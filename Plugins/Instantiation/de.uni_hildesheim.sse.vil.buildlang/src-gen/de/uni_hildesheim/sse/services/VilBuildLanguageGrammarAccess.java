/*
* generated by Xtext
*/
package de.uni_hildesheim.sse.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.uni_hildesheim.sse.vil.expressions.services.ExpressionDslGrammarAccess;

@Singleton
public class VilBuildLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ImplementationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementationUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cRequiresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequiresRequireParserRuleCall_2_0 = (RuleCall)cRequiresAssignment_2.eContents().get(0);
		private final Assignment cScriptsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScriptsLanguageUnitParserRuleCall_3_0 = (RuleCall)cScriptsAssignment_3.eContents().get(0);
		
		//ImplementationUnit:
		//	{ImplementationUnit} imports+=Import* requires+=Require* scripts+=LanguageUnit*;
		public ParserRule getRule() { return rule; }

		//{ImplementationUnit} imports+=Import* requires+=Require* scripts+=LanguageUnit*
		public Group getGroup() { return cGroup; }

		//{ImplementationUnit}
		public Action getImplementationUnitAction_0() { return cImplementationUnitAction_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//requires+=Require*
		public Assignment getRequiresAssignment_2() { return cRequiresAssignment_2; }

		//Require
		public RuleCall getRequiresRequireParserRuleCall_2_0() { return cRequiresRequireParserRuleCall_2_0; }

		//scripts+=LanguageUnit*
		public Assignment getScriptsAssignment_3() { return cScriptsAssignment_3; }

		//LanguageUnit
		public RuleCall getScriptsLanguageUnitParserRuleCall_3_0() { return cScriptsLanguageUnitParserRuleCall_3_0; }
	}

	public class RequireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Require");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireVTLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVersionSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionSpecVersionSpecParserRuleCall_2_0 = (RuleCall)cVersionSpecAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Require: //here fqn because this may reference a specific project (of an external project)
		//	"requireVTL" name=STRING versionSpec=VersionSpec ";";
		public ParserRule getRule() { return rule; }

		////here fqn because this may reference a specific project (of an external project)
		//"requireVTL" name=STRING versionSpec=VersionSpec ";"
		public Group getGroup() { return cGroup; }

		////here fqn because this may reference a specific project (of an external project)
		//"requireVTL"
		public Keyword getRequireVTLKeyword_0() { return cRequireVTLKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//versionSpec=VersionSpec
		public Assignment getVersionSpecAssignment_2() { return cVersionSpecAssignment_2; }

		//VersionSpec
		public RuleCall getVersionSpecVersionSpecParserRuleCall_2_0() { return cVersionSpecVersionSpecParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class LanguageUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdvicesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdvicesAdviceParserRuleCall_0_0 = (RuleCall)cAdvicesAssignment_0.eContents().get(0);
		private final Keyword cVilScriptKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamParameterListParserRuleCall_4_0 = (RuleCall)cParamAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParentScriptParentDeclParserRuleCall_6_0 = (RuleCall)cParentAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cVersionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cVersionVersionStmtParserRuleCall_8_0 = (RuleCall)cVersionAssignment_8.eContents().get(0);
		private final Assignment cLoadPropertiesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLoadPropertiesLoadPropertiesParserRuleCall_9_0 = (RuleCall)cLoadPropertiesAssignment_9.eContents().get(0);
		private final Assignment cContentsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cContentsScriptContentsParserRuleCall_10_0 = (RuleCall)cContentsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//// ---------------- project header
		//// do not rename - required for reuse
		//LanguageUnit:
		//	advices+=Advice* "vilScript" name=Identifier "(" param=ParameterList? ")" parent=ScriptParentDecl? "{"
		//	version=VersionStmt? loadProperties+=LoadProperties* contents=ScriptContents "}" ";"?;
		public ParserRule getRule() { return rule; }

		//advices+=Advice* "vilScript" name=Identifier "(" param=ParameterList? ")" parent=ScriptParentDecl? "{"
		//version=VersionStmt? loadProperties+=LoadProperties* contents=ScriptContents "}" ";"?
		public Group getGroup() { return cGroup; }

		//advices+=Advice*
		public Assignment getAdvicesAssignment_0() { return cAdvicesAssignment_0; }

		//Advice
		public RuleCall getAdvicesAdviceParserRuleCall_0_0() { return cAdvicesAdviceParserRuleCall_0_0; }

		//"vilScript"
		public Keyword getVilScriptKeyword_1() { return cVilScriptKeyword_1; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//param=ParameterList?
		public Assignment getParamAssignment_4() { return cParamAssignment_4; }

		//ParameterList
		public RuleCall getParamParameterListParserRuleCall_4_0() { return cParamParameterListParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//parent=ScriptParentDecl?
		public Assignment getParentAssignment_6() { return cParentAssignment_6; }

		//ScriptParentDecl
		public RuleCall getParentScriptParentDeclParserRuleCall_6_0() { return cParentScriptParentDeclParserRuleCall_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//version=VersionStmt?
		public Assignment getVersionAssignment_8() { return cVersionAssignment_8; }

		//VersionStmt
		public RuleCall getVersionVersionStmtParserRuleCall_8_0() { return cVersionVersionStmtParserRuleCall_8_0; }

		//loadProperties+=LoadProperties*
		public Assignment getLoadPropertiesAssignment_9() { return cLoadPropertiesAssignment_9; }

		//LoadProperties
		public RuleCall getLoadPropertiesLoadPropertiesParserRuleCall_9_0() { return cLoadPropertiesLoadPropertiesParserRuleCall_9_0; }

		//contents=ScriptContents
		public Assignment getContentsAssignment_10() { return cContentsAssignment_10; }

		//ScriptContents
		public RuleCall getContentsScriptContentsParserRuleCall_10_0() { return cContentsScriptContentsParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }

		//";"?
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }
	}

	public class ScriptParentDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptParentDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ScriptParentDecl:
		//	"extends" name= //here identifier because this references a complete project
		//	Identifier;
		public ParserRule getRule() { return rule; }

		//"extends" name= //here identifier because this references a complete project
		//Identifier
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//name= //here identifier because this references a complete project
		//Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		////here identifier because this references a complete project
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
	}

	public class LoadPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoadProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPropertiesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LoadProperties:
		//	"load" "properties" path= // here string because this references a file
		//	STRING ";";
		public ParserRule getRule() { return rule; }

		//"load" "properties" path= // here string because this references a file
		//STRING ";"
		public Group getGroup() { return cGroup; }

		//"load"
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }

		//"properties"
		public Keyword getPropertiesKeyword_1() { return cPropertiesKeyword_1; }

		//path= // here string because this references a file
		//STRING
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//// here string because this references a file
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ScriptContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptContents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScriptContentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cElementsVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cElementsRuleDeclarationParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//ScriptContents: // ensure object creation
		//	{ScriptContents} (elements+=VariableDeclaration | elements+=RuleDeclaration)*;
		public ParserRule getRule() { return rule; }

		//// ensure object creation
		//{ScriptContents} (elements+=VariableDeclaration | elements+=RuleDeclaration)*
		public Group getGroup() { return cGroup; }

		//// ensure object creation
		//{ScriptContents}
		public Action getScriptContentsAction_0() { return cScriptContentsAction_0; }

		//(elements+=VariableDeclaration | elements+=RuleDeclaration)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//elements+=VariableDeclaration
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }

		//VariableDeclaration
		public RuleCall getElementsVariableDeclarationParserRuleCall_1_0_0() { return cElementsVariableDeclarationParserRuleCall_1_0_0; }

		//elements+=RuleDeclaration
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//RuleDeclaration
		public RuleCall getElementsRuleDeclarationParserRuleCall_1_1_0() { return cElementsRuleDeclarationParserRuleCall_1_1_0; }
	}

	public class RuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cModifierAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cModifierRuleModifierParserRuleCall_1_0_0 = (RuleCall)cModifierAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cParamListAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cParamListParameterListParserRuleCall_1_3_0 = (RuleCall)cParamListAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cEqualsSignKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cPostconditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPostconditionLogicalExpressionParserRuleCall_2_0 = (RuleCall)cPostconditionAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPreconditionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPreconditionsLogicalExpressionParserRuleCall_4_0_0 = (RuleCall)cPreconditionsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cPreconditionsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cPreconditionsLogicalExpressionParserRuleCall_4_1_1_0 = (RuleCall)cPreconditionsAssignment_4_1_1.eContents().get(0);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockRuleElementBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// ---------------- rules
		//RuleDeclaration:
		//	{RuleDeclaration} (modifier=RuleModifier? name=Identifier "(" paramList=ParameterList? ")" "=")?
		//	postcondition+=LogicalExpression? ":" (preconditions+=LogicalExpression ("," preconditions+=LogicalExpression)*)?
		//	block=RuleElementBlock ";"?;
		public ParserRule getRule() { return rule; }

		//{RuleDeclaration} (modifier=RuleModifier? name=Identifier "(" paramList=ParameterList? ")" "=")?
		//postcondition+=LogicalExpression? ":" (preconditions+=LogicalExpression ("," preconditions+=LogicalExpression)*)?
		//block=RuleElementBlock ";"?
		public Group getGroup() { return cGroup; }

		//{RuleDeclaration}
		public Action getRuleDeclarationAction_0() { return cRuleDeclarationAction_0; }

		//(modifier=RuleModifier? name=Identifier "(" paramList=ParameterList? ")" "=")?
		public Group getGroup_1() { return cGroup_1; }

		//modifier=RuleModifier?
		public Assignment getModifierAssignment_1_0() { return cModifierAssignment_1_0; }

		//RuleModifier
		public RuleCall getModifierRuleModifierParserRuleCall_1_0_0() { return cModifierRuleModifierParserRuleCall_1_0_0; }

		//name=Identifier
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_1_0() { return cNameIdentifierParserRuleCall_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//paramList=ParameterList?
		public Assignment getParamListAssignment_1_3() { return cParamListAssignment_1_3; }

		//ParameterList
		public RuleCall getParamListParameterListParserRuleCall_1_3_0() { return cParamListParameterListParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//"="
		public Keyword getEqualsSignKeyword_1_5() { return cEqualsSignKeyword_1_5; }

		//postcondition+=LogicalExpression?
		public Assignment getPostconditionAssignment_2() { return cPostconditionAssignment_2; }

		//LogicalExpression
		public RuleCall getPostconditionLogicalExpressionParserRuleCall_2_0() { return cPostconditionLogicalExpressionParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(preconditions+=LogicalExpression ("," preconditions+=LogicalExpression)*)?
		public Group getGroup_4() { return cGroup_4; }

		//preconditions+=LogicalExpression
		public Assignment getPreconditionsAssignment_4_0() { return cPreconditionsAssignment_4_0; }

		//LogicalExpression
		public RuleCall getPreconditionsLogicalExpressionParserRuleCall_4_0_0() { return cPreconditionsLogicalExpressionParserRuleCall_4_0_0; }

		//("," preconditions+=LogicalExpression)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//preconditions+=LogicalExpression
		public Assignment getPreconditionsAssignment_4_1_1() { return cPreconditionsAssignment_4_1_1; }

		//LogicalExpression
		public RuleCall getPreconditionsLogicalExpressionParserRuleCall_4_1_1_0() { return cPreconditionsLogicalExpressionParserRuleCall_4_1_1_0; }

		//block=RuleElementBlock
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }

		//RuleElementBlock
		public RuleCall getBlockRuleElementBlockParserRuleCall_5_0() { return cBlockRuleElementBlockParserRuleCall_5_0; }

		//";"?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class RuleElementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleElementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleElementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsRuleElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RuleElementBlock:
		//	{RuleElementBlock} "{" elements+=RuleElement* "}";
		public ParserRule getRule() { return rule; }

		//{RuleElementBlock} "{" elements+=RuleElement* "}"
		public Group getGroup() { return cGroup; }

		//{RuleElementBlock}
		public Action getRuleElementBlockAction_0() { return cRuleElementBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=RuleElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//RuleElement
		public RuleCall getElementsRuleElementParserRuleCall_2_0() { return cElementsRuleElementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarDeclAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarDeclVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVarDeclAssignment_0.eContents().get(0);
		private final Assignment cExprStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprStmtExpressionStatementParserRuleCall_1_0 = (RuleCall)cExprStmtAssignment_1.eContents().get(0);
		private final Assignment cDeferDeclAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDeferDeclDeferDeclarationParserRuleCall_2_0 = (RuleCall)cDeferDeclAssignment_2.eContents().get(0);
		
		//RuleElement:
		//	varDecl=VariableDeclaration | exprStmt=ExpressionStatement | deferDecl=DeferDeclaration;
		public ParserRule getRule() { return rule; }

		//varDecl=VariableDeclaration | exprStmt=ExpressionStatement | deferDecl=DeferDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//varDecl=VariableDeclaration
		public Assignment getVarDeclAssignment_0() { return cVarDeclAssignment_0; }

		//VariableDeclaration
		public RuleCall getVarDeclVariableDeclarationParserRuleCall_0_0() { return cVarDeclVariableDeclarationParserRuleCall_0_0; }

		//exprStmt=ExpressionStatement
		public Assignment getExprStmtAssignment_1() { return cExprStmtAssignment_1; }

		//ExpressionStatement
		public RuleCall getExprStmtExpressionStatementParserRuleCall_1_0() { return cExprStmtExpressionStatementParserRuleCall_1_0; }

		//deferDecl=DeferDeclaration
		public Assignment getDeferDeclAssignment_2() { return cDeferDeclAssignment_2; }

		//DeferDeclaration
		public RuleCall getDeferDeclDeferDeclarationParserRuleCall_2_0() { return cDeferDeclDeferDeclarationParserRuleCall_2_0; }
	}

	public class RuleModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleModifier");
		private final Assignment cProtectedAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cProtectedProtectedKeyword_0 = (Keyword)cProtectedAssignment.eContents().get(0);
		
		//RuleModifier:
		//	protected="protected";
		public ParserRule getRule() { return rule; }

		//protected="protected"
		public Assignment getProtectedAssignment() { return cProtectedAssignment; }

		//"protected"
		public Keyword getProtectedProtectedKeyword_0() { return cProtectedProtectedKeyword_0; }
	}

	public class DeferDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeferDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRequiresKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDependsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDependsIdentifierParserRuleCall_2_1_0 = (RuleCall)cDependsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDependsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDependsIdentifierParserRuleCall_2_2_1_0 = (RuleCall)cDependsAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// unsure
		//DeferDeclaration:
		//	"defer" name=Identifier ("requires" depends+=Identifier ("," depends+=Identifier)*)? ";";
		public ParserRule getRule() { return rule; }

		//"defer" name=Identifier ("requires" depends+=Identifier ("," depends+=Identifier)*)? ";"
		public Group getGroup() { return cGroup; }

		//"defer"
		public Keyword getDeferKeyword_0() { return cDeferKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//("requires" depends+=Identifier ("," depends+=Identifier)*)?
		public Group getGroup_2() { return cGroup_2; }

		//"requires"
		public Keyword getRequiresKeyword_2_0() { return cRequiresKeyword_2_0; }

		//depends+=Identifier
		public Assignment getDependsAssignment_2_1() { return cDependsAssignment_2_1; }

		//Identifier
		public RuleCall getDependsIdentifierParserRuleCall_2_1_0() { return cDependsIdentifierParserRuleCall_2_1_0; }

		//("," depends+=Identifier)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//depends+=Identifier
		public Assignment getDependsAssignment_2_2_1() { return cDependsAssignment_2_2_1; }

		//Identifier
		public RuleCall getDependsIdentifierParserRuleCall_2_2_1_0() { return cDependsIdentifierParserRuleCall_2_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOtherExAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0 = (RuleCall)cOtherExAssignment_0.eContents().get(0);
		private final Assignment cUnqExAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnqExUnqualifiedExecutionParserRuleCall_1_0 = (RuleCall)cUnqExAssignment_1.eContents().get(0);
		private final Assignment cSuperExAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSuperExSuperExecutionParserRuleCall_2_0 = (RuleCall)cSuperExAssignment_2.eContents().get(0);
		private final Assignment cSysExAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSysExSystemExecutionParserRuleCall_3_0 = (RuleCall)cSysExAssignment_3.eContents().get(0);
		private final Assignment cMapAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMapMapParserRuleCall_4_0 = (RuleCall)cMapAssignment_4.eContents().get(0);
		private final Assignment cJoinAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cJoinJoinParserRuleCall_5_0 = (RuleCall)cJoinAssignment_5.eContents().get(0);
		private final Assignment cInstantiateAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cInstantiateInstantiateParserRuleCall_6_0 = (RuleCall)cInstantiateAssignment_6.eContents().get(0);
		private final Assignment cNewExAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cNewExConstructorExecutionParserRuleCall_7_0 = (RuleCall)cNewExAssignment_7.eContents().get(0);
		
		//// ----------------------- overriding and extending parts of the expression grammar -------------------
		//PrimaryExpression:
		//	otherEx=ExpressionOrQualifiedExecution | unqEx=UnqualifiedExecution | superEx=SuperExecution | sysEx=SystemExecution
		//	| map=Map | join=Join | instantiate=Instantiate | newEx=ConstructorExecution;
		public ParserRule getRule() { return rule; }

		//otherEx=ExpressionOrQualifiedExecution | unqEx=UnqualifiedExecution | superEx=SuperExecution | sysEx=SystemExecution |
		//map=Map | join=Join | instantiate=Instantiate | newEx=ConstructorExecution
		public Alternatives getAlternatives() { return cAlternatives; }

		//otherEx=ExpressionOrQualifiedExecution
		public Assignment getOtherExAssignment_0() { return cOtherExAssignment_0; }

		//ExpressionOrQualifiedExecution
		public RuleCall getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0() { return cOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0; }

		//unqEx=UnqualifiedExecution
		public Assignment getUnqExAssignment_1() { return cUnqExAssignment_1; }

		//UnqualifiedExecution
		public RuleCall getUnqExUnqualifiedExecutionParserRuleCall_1_0() { return cUnqExUnqualifiedExecutionParserRuleCall_1_0; }

		//superEx=SuperExecution
		public Assignment getSuperExAssignment_2() { return cSuperExAssignment_2; }

		//SuperExecution
		public RuleCall getSuperExSuperExecutionParserRuleCall_2_0() { return cSuperExSuperExecutionParserRuleCall_2_0; }

		//sysEx=SystemExecution
		public Assignment getSysExAssignment_3() { return cSysExAssignment_3; }

		//SystemExecution
		public RuleCall getSysExSystemExecutionParserRuleCall_3_0() { return cSysExSystemExecutionParserRuleCall_3_0; }

		//map=Map
		public Assignment getMapAssignment_4() { return cMapAssignment_4; }

		//Map
		public RuleCall getMapMapParserRuleCall_4_0() { return cMapMapParserRuleCall_4_0; }

		//join=Join
		public Assignment getJoinAssignment_5() { return cJoinAssignment_5; }

		//Join
		public RuleCall getJoinJoinParserRuleCall_5_0() { return cJoinJoinParserRuleCall_5_0; }

		//instantiate=Instantiate
		public Assignment getInstantiateAssignment_6() { return cInstantiateAssignment_6; }

		//Instantiate
		public RuleCall getInstantiateInstantiateParserRuleCall_6_0() { return cInstantiateInstantiateParserRuleCall_6_0; }

		//newEx=ConstructorExecution
		public Assignment getNewExAssignment_7() { return cNewExAssignment_7; }

		//ConstructorExecution
		public RuleCall getNewExConstructorExecutionParserRuleCall_7_0() { return cNewExConstructorExecutionParserRuleCall_7_0; }
	}

	public class InstantiateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instantiate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstantiateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cProjectAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cProjectIdentifierParserRuleCall_1_0_0_0 = (RuleCall)cProjectAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cRuleKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cRuleSTRINGTerminalRuleCall_1_0_1_1_0 = (RuleCall)cRuleAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRuleNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cRuleNameSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cRuleNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamArgumentListParserRuleCall_3_0 = (RuleCall)cParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVersionSpecAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVersionSpecVersionSpecParserRuleCall_5_0 = (RuleCall)cVersionSpecAssignment_5.eContents().get(0);
		
		//Instantiate:
		//	"instantiate" (project=Identifier ("rule" rule=STRING)? | ruleName=STRING) "(" param=ArgumentList? ")"
		//	versionSpec=VersionSpec?;
		public ParserRule getRule() { return rule; }

		//"instantiate" (project=Identifier ("rule" rule=STRING)? | ruleName=STRING) "(" param=ArgumentList? ")"
		//versionSpec=VersionSpec?
		public Group getGroup() { return cGroup; }

		//"instantiate"
		public Keyword getInstantiateKeyword_0() { return cInstantiateKeyword_0; }

		//project=Identifier ("rule" rule=STRING)? | ruleName=STRING
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//project=Identifier ("rule" rule=STRING)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//project=Identifier
		public Assignment getProjectAssignment_1_0_0() { return cProjectAssignment_1_0_0; }

		//Identifier
		public RuleCall getProjectIdentifierParserRuleCall_1_0_0_0() { return cProjectIdentifierParserRuleCall_1_0_0_0; }

		//("rule" rule=STRING)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"rule"
		public Keyword getRuleKeyword_1_0_1_0() { return cRuleKeyword_1_0_1_0; }

		//rule=STRING
		public Assignment getRuleAssignment_1_0_1_1() { return cRuleAssignment_1_0_1_1; }

		//STRING
		public RuleCall getRuleSTRINGTerminalRuleCall_1_0_1_1_0() { return cRuleSTRINGTerminalRuleCall_1_0_1_1_0; }

		//ruleName=STRING
		public Assignment getRuleNameAssignment_1_1() { return cRuleNameAssignment_1_1; }

		//STRING
		public RuleCall getRuleNameSTRINGTerminalRuleCall_1_1_0() { return cRuleNameSTRINGTerminalRuleCall_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//param=ArgumentList?
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }

		//ArgumentList
		public RuleCall getParamArgumentListParserRuleCall_3_0() { return cParamArgumentListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//versionSpec=VersionSpec?
		public Assignment getVersionSpecAssignment_5() { return cVersionSpecAssignment_5; }

		//VersionSpec
		public RuleCall getVersionSpecVersionSpecParserRuleCall_5_0() { return cVersionSpecVersionSpecParserRuleCall_5_0; }
	}

	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIdentifierParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVarAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVarIdentifierParserRuleCall_3_1_0 = (RuleCall)cVarAssignment_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExpressionParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlockRuleElementBlockParserRuleCall_7_0 = (RuleCall)cBlockAssignment_7.eContents().get(0);
		
		//Map:
		//	"map" "(" var+=Identifier ("," var+=Identifier)* "=" expr=Expression ")" block=RuleElementBlock;
		public ParserRule getRule() { return rule; }

		//"map" "(" var+=Identifier ("," var+=Identifier)* "=" expr=Expression ")" block=RuleElementBlock
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var+=Identifier
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//Identifier
		public RuleCall getVarIdentifierParserRuleCall_2_0() { return cVarIdentifierParserRuleCall_2_0; }

		//("," var+=Identifier)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//var+=Identifier
		public Assignment getVarAssignment_3_1() { return cVarAssignment_3_1; }

		//Identifier
		public RuleCall getVarIdentifierParserRuleCall_3_1_0() { return cVarIdentifierParserRuleCall_3_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//expr=Expression
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_5_0() { return cExprExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//block=RuleElementBlock
		public Assignment getBlockAssignment_7() { return cBlockAssignment_7; }

		//RuleElementBlock
		public RuleCall getBlockRuleElementBlockParserRuleCall_7_0() { return cBlockRuleElementBlockParserRuleCall_7_0; }
	}

	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJoinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVar1JoinVariableParserRuleCall_2_0 = (RuleCall)cVar1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVar2JoinVariableParserRuleCall_4_0 = (RuleCall)cVar2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cConditionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_6_2_0 = (RuleCall)cConditionAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//Join:
		//	"join" "(" var1=JoinVariable "," var2=JoinVariable ")" ("with" "(" condition=Expression ")")?;
		public ParserRule getRule() { return rule; }

		//"join" "(" var1=JoinVariable "," var2=JoinVariable ")" ("with" "(" condition=Expression ")")?
		public Group getGroup() { return cGroup; }

		//"join"
		public Keyword getJoinKeyword_0() { return cJoinKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var1=JoinVariable
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }

		//JoinVariable
		public RuleCall getVar1JoinVariableParserRuleCall_2_0() { return cVar1JoinVariableParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//var2=JoinVariable
		public Assignment getVar2Assignment_4() { return cVar2Assignment_4; }

		//JoinVariable
		public RuleCall getVar2JoinVariableParserRuleCall_4_0() { return cVar2JoinVariableParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("with" "(" condition=Expression ")")?
		public Group getGroup_6() { return cGroup_6; }

		//"with"
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//condition=Expression
		public Assignment getConditionAssignment_6_2() { return cConditionAssignment_6_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_6_2_0() { return cConditionExpressionParserRuleCall_6_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
	}

	public class JoinVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoinVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExclExcludeKeyword_0_0 = (Keyword)cExclAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIdentifierParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		
		//JoinVariable:
		//	excl="exclude"? var=Identifier ":" expr=Expression;
		public ParserRule getRule() { return rule; }

		//excl="exclude"? var=Identifier ":" expr=Expression
		public Group getGroup() { return cGroup; }

		//excl="exclude"?
		public Assignment getExclAssignment_0() { return cExclAssignment_0; }

		//"exclude"
		public Keyword getExclExcludeKeyword_0_0() { return cExclExcludeKeyword_0_0; }

		//var=Identifier
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//Identifier
		public RuleCall getVarIdentifierParserRuleCall_1_0() { return cVarIdentifierParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }
	}

	public class SystemExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCallAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallCallParserRuleCall_1_0 = (RuleCall)cCallAssignment_1.eContents().get(0);
		private final Assignment cCallsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallsSubCallParserRuleCall_2_0 = (RuleCall)cCallsAssignment_2.eContents().get(0);
		
		//SystemExecution:
		//	"execute" call=Call calls+=SubCall*;
		public ParserRule getRule() { return rule; }

		//"execute" call=Call calls+=SubCall*
		public Group getGroup() { return cGroup; }

		//"execute"
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }

		//call=Call
		public Assignment getCallAssignment_1() { return cCallAssignment_1; }

		//Call
		public RuleCall getCallCallParserRuleCall_1_0() { return cCallCallParserRuleCall_1_0; }

		//calls+=SubCall*
		public Assignment getCallsAssignment_2() { return cCallsAssignment_2; }

		//SubCall
		public RuleCall getCallsSubCallParserRuleCall_2_0() { return cCallsSubCallParserRuleCall_2_0; }
	}
	
	
	private ImplementationUnitElements pImplementationUnit;
	private RequireElements pRequire;
	private LanguageUnitElements pLanguageUnit;
	private ScriptParentDeclElements pScriptParentDecl;
	private LoadPropertiesElements pLoadProperties;
	private ScriptContentsElements pScriptContents;
	private RuleDeclarationElements pRuleDeclaration;
	private RuleElementBlockElements pRuleElementBlock;
	private RuleElementElements pRuleElement;
	private RuleModifierElements pRuleModifier;
	private DeferDeclarationElements pDeferDeclaration;
	private PrimaryExpressionElements pPrimaryExpression;
	private InstantiateElements pInstantiate;
	private MapElements pMap;
	private JoinElements pJoin;
	private JoinVariableElements pJoinVariable;
	private SystemExecutionElements pSystemExecution;
	
	private final Grammar grammar;

	private ExpressionDslGrammarAccess gaExpressionDsl;

	@Inject
	public VilBuildLanguageGrammarAccess(GrammarProvider grammarProvider,
		ExpressionDslGrammarAccess gaExpressionDsl) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaExpressionDsl = gaExpressionDsl;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_hildesheim.sse.VilBuildLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ExpressionDslGrammarAccess getExpressionDslGrammarAccess() {
		return gaExpressionDsl;
	}

	
	//ImplementationUnit:
	//	{ImplementationUnit} imports+=Import* requires+=Require* scripts+=LanguageUnit*;
	public ImplementationUnitElements getImplementationUnitAccess() {
		return (pImplementationUnit != null) ? pImplementationUnit : (pImplementationUnit = new ImplementationUnitElements());
	}
	
	public ParserRule getImplementationUnitRule() {
		return getImplementationUnitAccess().getRule();
	}

	//Require: //here fqn because this may reference a specific project (of an external project)
	//	"requireVTL" name=STRING versionSpec=VersionSpec ";";
	public RequireElements getRequireAccess() {
		return (pRequire != null) ? pRequire : (pRequire = new RequireElements());
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}

	//// ---------------- project header
	//// do not rename - required for reuse
	//LanguageUnit:
	//	advices+=Advice* "vilScript" name=Identifier "(" param=ParameterList? ")" parent=ScriptParentDecl? "{"
	//	version=VersionStmt? loadProperties+=LoadProperties* contents=ScriptContents "}" ";"?;
	public LanguageUnitElements getLanguageUnitAccess() {
		return (pLanguageUnit != null) ? pLanguageUnit : (pLanguageUnit = new LanguageUnitElements());
	}
	
	public ParserRule getLanguageUnitRule() {
		return getLanguageUnitAccess().getRule();
	}

	//ScriptParentDecl:
	//	"extends" name= //here identifier because this references a complete project
	//	Identifier;
	public ScriptParentDeclElements getScriptParentDeclAccess() {
		return (pScriptParentDecl != null) ? pScriptParentDecl : (pScriptParentDecl = new ScriptParentDeclElements());
	}
	
	public ParserRule getScriptParentDeclRule() {
		return getScriptParentDeclAccess().getRule();
	}

	//LoadProperties:
	//	"load" "properties" path= // here string because this references a file
	//	STRING ";";
	public LoadPropertiesElements getLoadPropertiesAccess() {
		return (pLoadProperties != null) ? pLoadProperties : (pLoadProperties = new LoadPropertiesElements());
	}
	
	public ParserRule getLoadPropertiesRule() {
		return getLoadPropertiesAccess().getRule();
	}

	//ScriptContents: // ensure object creation
	//	{ScriptContents} (elements+=VariableDeclaration | elements+=RuleDeclaration)*;
	public ScriptContentsElements getScriptContentsAccess() {
		return (pScriptContents != null) ? pScriptContents : (pScriptContents = new ScriptContentsElements());
	}
	
	public ParserRule getScriptContentsRule() {
		return getScriptContentsAccess().getRule();
	}

	//// ---------------- rules
	//RuleDeclaration:
	//	{RuleDeclaration} (modifier=RuleModifier? name=Identifier "(" paramList=ParameterList? ")" "=")?
	//	postcondition+=LogicalExpression? ":" (preconditions+=LogicalExpression ("," preconditions+=LogicalExpression)*)?
	//	block=RuleElementBlock ";"?;
	public RuleDeclarationElements getRuleDeclarationAccess() {
		return (pRuleDeclaration != null) ? pRuleDeclaration : (pRuleDeclaration = new RuleDeclarationElements());
	}
	
	public ParserRule getRuleDeclarationRule() {
		return getRuleDeclarationAccess().getRule();
	}

	//RuleElementBlock:
	//	{RuleElementBlock} "{" elements+=RuleElement* "}";
	public RuleElementBlockElements getRuleElementBlockAccess() {
		return (pRuleElementBlock != null) ? pRuleElementBlock : (pRuleElementBlock = new RuleElementBlockElements());
	}
	
	public ParserRule getRuleElementBlockRule() {
		return getRuleElementBlockAccess().getRule();
	}

	//RuleElement:
	//	varDecl=VariableDeclaration | exprStmt=ExpressionStatement | deferDecl=DeferDeclaration;
	public RuleElementElements getRuleElementAccess() {
		return (pRuleElement != null) ? pRuleElement : (pRuleElement = new RuleElementElements());
	}
	
	public ParserRule getRuleElementRule() {
		return getRuleElementAccess().getRule();
	}

	//RuleModifier:
	//	protected="protected";
	public RuleModifierElements getRuleModifierAccess() {
		return (pRuleModifier != null) ? pRuleModifier : (pRuleModifier = new RuleModifierElements());
	}
	
	public ParserRule getRuleModifierRule() {
		return getRuleModifierAccess().getRule();
	}

	//// unsure
	//DeferDeclaration:
	//	"defer" name=Identifier ("requires" depends+=Identifier ("," depends+=Identifier)*)? ";";
	public DeferDeclarationElements getDeferDeclarationAccess() {
		return (pDeferDeclaration != null) ? pDeferDeclaration : (pDeferDeclaration = new DeferDeclarationElements());
	}
	
	public ParserRule getDeferDeclarationRule() {
		return getDeferDeclarationAccess().getRule();
	}

	//// ----------------------- overriding and extending parts of the expression grammar -------------------
	//PrimaryExpression:
	//	otherEx=ExpressionOrQualifiedExecution | unqEx=UnqualifiedExecution | superEx=SuperExecution | sysEx=SystemExecution
	//	| map=Map | join=Join | instantiate=Instantiate | newEx=ConstructorExecution;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Instantiate:
	//	"instantiate" (project=Identifier ("rule" rule=STRING)? | ruleName=STRING) "(" param=ArgumentList? ")"
	//	versionSpec=VersionSpec?;
	public InstantiateElements getInstantiateAccess() {
		return (pInstantiate != null) ? pInstantiate : (pInstantiate = new InstantiateElements());
	}
	
	public ParserRule getInstantiateRule() {
		return getInstantiateAccess().getRule();
	}

	//Map:
	//	"map" "(" var+=Identifier ("," var+=Identifier)* "=" expr=Expression ")" block=RuleElementBlock;
	public MapElements getMapAccess() {
		return (pMap != null) ? pMap : (pMap = new MapElements());
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}

	//Join:
	//	"join" "(" var1=JoinVariable "," var2=JoinVariable ")" ("with" "(" condition=Expression ")")?;
	public JoinElements getJoinAccess() {
		return (pJoin != null) ? pJoin : (pJoin = new JoinElements());
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}

	//JoinVariable:
	//	excl="exclude"? var=Identifier ":" expr=Expression;
	public JoinVariableElements getJoinVariableAccess() {
		return (pJoinVariable != null) ? pJoinVariable : (pJoinVariable = new JoinVariableElements());
	}
	
	public ParserRule getJoinVariableRule() {
		return getJoinVariableAccess().getRule();
	}

	//SystemExecution:
	//	"execute" call=Call calls+=SubCall*;
	public SystemExecutionElements getSystemExecutionAccess() {
		return (pSystemExecution != null) ? pSystemExecution : (pSystemExecution = new SystemExecutionElements());
	}
	
	public ParserRule getSystemExecutionRule() {
		return getSystemExecutionAccess().getRule();
	}

	//VariableDeclaration:
	//	const="const"? type=Type name=Identifier ("=" expression=Expression)? ";";
	public ExpressionDslGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaExpressionDsl.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//// used in extending languages
	//Advice:
	//	"@advice" "(" name=QualifiedName ")" versionSpec=VersionSpec?;
	public ExpressionDslGrammarAccess.AdviceElements getAdviceAccess() {
		return gaExpressionDsl.getAdviceAccess();
	}
	
	public ParserRule getAdviceRule() {
		return getAdviceAccess().getRule();
	}

	//VersionSpec:
	//	"with" "(" conflicts+=VersionedId ("," conflicts+=VersionedId)* ")";
	public ExpressionDslGrammarAccess.VersionSpecElements getVersionSpecAccess() {
		return gaExpressionDsl.getVersionSpecAccess();
	}
	
	public ParserRule getVersionSpecRule() {
		return getVersionSpecAccess().getRule();
	}

	//VersionedId:
	//	"version" op=VersionOperator version=VERSION;
	public ExpressionDslGrammarAccess.VersionedIdElements getVersionedIdAccess() {
		return gaExpressionDsl.getVersionedIdAccess();
	}
	
	public ParserRule getVersionedIdRule() {
		return getVersionedIdAccess().getRule();
	}

	//VersionOperator:
	//	"==" | ">" | "<" | ">=" | "<=";
	public ExpressionDslGrammarAccess.VersionOperatorElements getVersionOperatorAccess() {
		return gaExpressionDsl.getVersionOperatorAccess();
	}
	
	public ParserRule getVersionOperatorRule() {
		return getVersionOperatorAccess().getRule();
	}

	//ParameterList:
	//	param+=Parameter ("," param+=Parameter)*;
	public ExpressionDslGrammarAccess.ParameterListElements getParameterListAccess() {
		return gaExpressionDsl.getParameterListAccess();
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//	type=Type name=Identifier;
	public ExpressionDslGrammarAccess.ParameterElements getParameterAccess() {
		return gaExpressionDsl.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//VersionStmt:
	//	"version" version=VERSION ";";
	public ExpressionDslGrammarAccess.VersionStmtElements getVersionStmtAccess() {
		return gaExpressionDsl.getVersionStmtAccess();
	}
	
	public ParserRule getVersionStmtRule() {
		return getVersionStmtAccess().getRule();
	}

	//Import: //here fqn because this may reference a specific project (of an external project)
	//	"import" name=Identifier versionSpec=VersionSpec? ";";
	public ExpressionDslGrammarAccess.ImportElements getImportAccess() {
		return gaExpressionDsl.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// ------------------------------------- expressions -----------------------
	//// used in extending languages
	//ExpressionStatement:
	//	(var=Identifier "=")? expr=Expression ";";
	public ExpressionDslGrammarAccess.ExpressionStatementElements getExpressionStatementAccess() {
		return gaExpressionDsl.getExpressionStatementAccess();
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//Expression:
	//	expr=LogicalExpression | init=ContainerInitializer;
	public ExpressionDslGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpressionDsl.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//LogicalExpression:
	//	left=EqualityExpression right+=LogicalExpressionPart*;
	public ExpressionDslGrammarAccess.LogicalExpressionElements getLogicalExpressionAccess() {
		return gaExpressionDsl.getLogicalExpressionAccess();
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//LogicalExpressionPart:
	//	op=LogicalOperator ex=EqualityExpression;
	public ExpressionDslGrammarAccess.LogicalExpressionPartElements getLogicalExpressionPartAccess() {
		return gaExpressionDsl.getLogicalExpressionPartAccess();
	}
	
	public ParserRule getLogicalExpressionPartRule() {
		return getLogicalExpressionPartAccess().getRule();
	}

	//LogicalOperator:
	//	"and" | "or" | "xor";
	public ExpressionDslGrammarAccess.LogicalOperatorElements getLogicalOperatorAccess() {
		return gaExpressionDsl.getLogicalOperatorAccess();
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}

	//EqualityExpression:
	//	left=RelationalExpression right=EqualityExpressionPart?;
	public ExpressionDslGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaExpressionDsl.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//EqualityExpressionPart:
	//	op=EqualityOperator ex=RelationalExpression;
	public ExpressionDslGrammarAccess.EqualityExpressionPartElements getEqualityExpressionPartAccess() {
		return gaExpressionDsl.getEqualityExpressionPartAccess();
	}
	
	public ParserRule getEqualityExpressionPartRule() {
		return getEqualityExpressionPartAccess().getRule();
	}

	//EqualityOperator:
	//	"==" | "<>" | "!=";
	public ExpressionDslGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaExpressionDsl.getEqualityOperatorAccess();
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression:
	//	left=AdditiveExpression right=RelationalExpressionPart?;
	public ExpressionDslGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaExpressionDsl.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//RelationalExpressionPart:
	//	op=RelationalOperator ex=AdditiveExpression;
	public ExpressionDslGrammarAccess.RelationalExpressionPartElements getRelationalExpressionPartAccess() {
		return gaExpressionDsl.getRelationalExpressionPartAccess();
	}
	
	public ParserRule getRelationalExpressionPartRule() {
		return getRelationalExpressionPartAccess().getRule();
	}

	//RelationalOperator:
	//	">" | "<" | ">=" | "<=";
	public ExpressionDslGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaExpressionDsl.getRelationalOperatorAccess();
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AdditiveExpression:
	//	left=MultiplicativeExpression right+=AdditiveExpressionPart*;
	public ExpressionDslGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaExpressionDsl.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//AdditiveExpressionPart:
	//	op=AdditiveOperator ex=MultiplicativeExpression;
	public ExpressionDslGrammarAccess.AdditiveExpressionPartElements getAdditiveExpressionPartAccess() {
		return gaExpressionDsl.getAdditiveExpressionPartAccess();
	}
	
	public ParserRule getAdditiveExpressionPartRule() {
		return getAdditiveExpressionPartAccess().getRule();
	}

	//AdditiveOperator:
	//	"+" | "-";
	public ExpressionDslGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaExpressionDsl.getAdditiveOperatorAccess();
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression:
	//	left=UnaryExpression right=MultiplicativeExpressionPart?;
	public ExpressionDslGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaExpressionDsl.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//MultiplicativeExpressionPart:
	//	op=MultiplicativeOperator expr=UnaryExpression;
	public ExpressionDslGrammarAccess.MultiplicativeExpressionPartElements getMultiplicativeExpressionPartAccess() {
		return gaExpressionDsl.getMultiplicativeExpressionPartAccess();
	}
	
	public ParserRule getMultiplicativeExpressionPartRule() {
		return getMultiplicativeExpressionPartAccess().getRule();
	}

	//MultiplicativeOperator:
	//	"*" | "/";
	public ExpressionDslGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaExpressionDsl.getMultiplicativeOperatorAccess();
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//UnaryExpression:
	//	op=UnaryOperator? expr=PostfixExpression;
	public ExpressionDslGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaExpressionDsl.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//UnaryOperator:
	//	"not" | "!" | "-";
	public ExpressionDslGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaExpressionDsl.getUnaryOperatorAccess();
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//PostfixExpression:
	//	left= // left here for extensions
	//	PrimaryExpression;
	public ExpressionDslGrammarAccess.PostfixExpressionElements getPostfixExpressionAccess() {
		return gaExpressionDsl.getPostfixExpressionAccess();
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}

	//ExpressionOrQualifiedExecution:
	//	(val=Constant | "(" parenthesis=Expression ")") calls+=SubCall*;
	public ExpressionDslGrammarAccess.ExpressionOrQualifiedExecutionElements getExpressionOrQualifiedExecutionAccess() {
		return gaExpressionDsl.getExpressionOrQualifiedExecutionAccess();
	}
	
	public ParserRule getExpressionOrQualifiedExecutionRule() {
		return getExpressionOrQualifiedExecutionAccess().getRule();
	}

	//UnqualifiedExecution:
	//	call=Call calls+=SubCall*;
	public ExpressionDslGrammarAccess.UnqualifiedExecutionElements getUnqualifiedExecutionAccess() {
		return gaExpressionDsl.getUnqualifiedExecutionAccess();
	}
	
	public ParserRule getUnqualifiedExecutionRule() {
		return getUnqualifiedExecutionAccess().getRule();
	}

	//SuperExecution:
	//	"super" "." call=Call calls+=SubCall*;
	public ExpressionDslGrammarAccess.SuperExecutionElements getSuperExecutionAccess() {
		return gaExpressionDsl.getSuperExecutionAccess();
	}
	
	public ParserRule getSuperExecutionRule() {
		return getSuperExecutionAccess().getRule();
	}

	//ConstructorExecution:
	//	"new" type=Type "(" param=ArgumentList? ")" calls+=SubCall*;
	public ExpressionDslGrammarAccess.ConstructorExecutionElements getConstructorExecutionAccess() {
		return gaExpressionDsl.getConstructorExecutionAccess();
	}
	
	public ParserRule getConstructorExecutionRule() {
		return getConstructorExecutionAccess().getRule();
	}

	//SubCall:
	//	"." call=Call | "[" arrayEx=Expression // IVML addition to OCL
	//	"]";
	public ExpressionDslGrammarAccess.SubCallElements getSubCallAccess() {
		return gaExpressionDsl.getSubCallAccess();
	}
	
	public ParserRule getSubCallRule() {
		return getSubCallAccess().getRule();
	}

	//Call:
	//	name=QualifiedPrefix "(" param=ArgumentList? ")";
	public ExpressionDslGrammarAccess.CallElements getCallAccess() {
		return gaExpressionDsl.getCallAccess();
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//ArgumentList:
	//	param+=NamedArgument ("," param+=NamedArgument)*;
	public ExpressionDslGrammarAccess.ArgumentListElements getArgumentListAccess() {
		return gaExpressionDsl.getArgumentListAccess();
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	//NamedArgument:
	//	(name=Identifier "=")? ex=Expression;
	public ExpressionDslGrammarAccess.NamedArgumentElements getNamedArgumentAccess() {
		return gaExpressionDsl.getNamedArgumentAccess();
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}

	//QualifiedPrefix:
	//	qname+=Identifier (qname+="::" qname+=Identifier)*;
	public ExpressionDslGrammarAccess.QualifiedPrefixElements getQualifiedPrefixAccess() {
		return gaExpressionDsl.getQualifiedPrefixAccess();
	}
	
	public ParserRule getQualifiedPrefixRule() {
		return getQualifiedPrefixAccess().getRule();
	}

	//QualifiedName:
	//	prefix=QualifiedPrefix (qname+="." qname+=Identifier)?;
	public ExpressionDslGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaExpressionDsl.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Constant:
	//	nValue=NumValue | sValue=STRING | qValue=QualifiedName | bValue=("true" | "false");
	public ExpressionDslGrammarAccess.ConstantElements getConstantAccess() {
		return gaExpressionDsl.getConstantAccess();
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//NumValue:
	//	val=NUMBER;
	public ExpressionDslGrammarAccess.NumValueElements getNumValueAccess() {
		return gaExpressionDsl.getNumValueAccess();
	}
	
	public ParserRule getNumValueRule() {
		return getNumValueAccess().getRule();
	}

	//Identifier:
	//	ID | VERSION | EXPONENT;
	public ExpressionDslGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaExpressionDsl.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//Type:
	//	name= // specific types will be dynamically loaded at start-up
	//	Identifier | set="setOf" param=TypeParameters | seq="sequenceOf" param=TypeParameters | map="mapOf"
	//	param=TypeParameters;
	public ExpressionDslGrammarAccess.TypeElements getTypeAccess() {
		return gaExpressionDsl.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//// currently no nested types!
	//TypeParameters:
	//	"(" param+=Identifier ("," param+=Identifier)* ")";
	public ExpressionDslGrammarAccess.TypeParametersElements getTypeParametersAccess() {
		return gaExpressionDsl.getTypeParametersAccess();
	}
	
	public ParserRule getTypeParametersRule() {
		return getTypeParametersAccess().getRule();
	}

	//ContainerInitializer:
	//	{ContainerInitializer} "{" (exprs+=ContainerInitializerExpression ("," exprs+=ContainerInitializerExpression)*)? "}";
	public ExpressionDslGrammarAccess.ContainerInitializerElements getContainerInitializerAccess() {
		return gaExpressionDsl.getContainerInitializerAccess();
	}
	
	public ParserRule getContainerInitializerRule() {
		return getContainerInitializerAccess().getRule();
	}

	//ContainerInitializerExpression:
	//	logical=LogicalExpression | container=ContainerInitializer;
	public ExpressionDslGrammarAccess.ContainerInitializerExpressionElements getContainerInitializerExpressionAccess() {
		return gaExpressionDsl.getContainerInitializerExpressionAccess();
	}
	
	public ParserRule getContainerInitializerExpressionRule() {
		return getContainerInitializerExpressionAccess().getRule();
	}

	//// --------------------- Terminals (from IVML)----------------------------------
	//// otherwise we would have to write 0 . 5 instead of 0.5
	//terminal VERSION:
	//	"v" "0".."9"+ ("." "0".."9"+)*;
	public TerminalRule getVERSIONRule() {
		return gaExpressionDsl.getVERSIONRule();
	} 

	//// adjust de.uni_hildesheim.sse.model.validation.IvmlIdentifierCheck
	//// never allow identifiers starting with $ -> Reasoner name prefixes
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaExpressionDsl.getIDRule();
	} 

	//terminal NUMBER:
	//	"-"? ("0".."9"+ ("." "0".."9"* EXPONENT?)? | "." "0".."9"+ EXPONENT? | "0".."9"+ EXPONENT);
	public TerminalRule getNUMBERRule() {
		return gaExpressionDsl.getNUMBERRule();
	} 

	//// just return a string
	//terminal EXPONENT:
	//	("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getEXPONENTRule() {
		return gaExpressionDsl.getEXPONENTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaExpressionDsl.getSTRINGRule();
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaExpressionDsl.getML_COMMENTRule();
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaExpressionDsl.getSL_COMMENTRule();
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaExpressionDsl.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaExpressionDsl.getANY_OTHERRule();
	} 
}
