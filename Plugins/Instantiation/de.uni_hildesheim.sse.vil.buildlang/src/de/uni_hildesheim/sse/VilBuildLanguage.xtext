grammar de.uni_hildesheim.sse.VilBuildLanguage with de.uni_hildesheim.sse.vil.expressions.ExpressionDsl

generate vilBuildLanguage "http://www.uni_hildesheim.de/sse/VilBuildLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ImplementationUnit:
    {ImplementationUnit}
    imports+=Import*
    requires+=Require*
    scripts+=LanguageUnit*;

Require:
    //here fqn because this may reference a specific project (of an external project)
    'requireVTL' name=STRING versionSpec=VersionSpec
    ';'
;

// ---------------- project header

LanguageUnit: // do not rename - required for reuse
    (advices+=Advice)*
    'vilScript' name=Identifier 
    '(' param=ParameterList? ')'
    (parent=ScriptParentDecl)?
    '{'
       version=VersionStmt?
       loadProperties+=LoadProperties*
       contents=ScriptContents
    '}' ';'?
;

ScriptParentDecl:
    'extends' name=Identifier //here identifier because this references a complete project
;

LoadProperties:
    'load' 'properties' path=STRING // here string because this references a file
    ';'
;

ScriptContents:
    {ScriptContents} // ensure object creation
    (
        elements+=VariableDeclaration
        | elements+=RuleDeclaration
    )*
;

// ---------------- rules

RuleDeclaration:
    {RuleDeclaration}
    (
        (modifier = RuleModifier)?
        name=Identifier
        '(' (paramList=ParameterList)? ')'
        '='
    )?
    (postcondition+=LogicalExpression)?
    ':'
    (preconditions+=LogicalExpression (',' preconditions+=LogicalExpression)*)?
    block=RuleElementBlock
    ';'?
;

RuleElementBlock:
    {RuleElementBlock}
    '{'
       elements+=RuleElement*
    '}'
;

RuleElement:
    varDecl=VariableDeclaration
    | exprStmt=ExpressionStatement
    | deferDecl=DeferDeclaration 
;

RuleModifier:
    protected = 'protected'
;

// unsure
DeferDeclaration:
    'defer' name=Identifier
    ('requires' depends+=Identifier (',' depends+=Identifier)*)?
    ';'
;

// ----------------------- overriding and extending parts of the expression grammar -------------------

PrimaryExpression:  
    otherEx=ExpressionOrQualifiedExecution 
    | unqEx=UnqualifiedExecution 
    | superEx=SuperExecution 
    | sysEx=SystemExecution
    | map=Map
    | join=Join
    | instantiate=Instantiate
    | newEx=ConstructorExecution
    ;
    
Instantiate:
    'instantiate' 
    ((project=Identifier ('rule' rule=STRING)?) | ruleName=STRING)
    '(' param=ArgumentList? ')' (versionSpec=VersionSpec?)
;

Map:
    'map' '(' var+=Identifier (',' var+=Identifier)* '=' expr=Expression ')'
    block=RuleElementBlock
;

Join: 
    'join' '(' 
        var1=JoinVariable ',' 
        var2=JoinVariable ')' 
        ('with' 
            '(' condition=Expression ')'
        )? 
    ;

JoinVariable:
    (excl='exclude'?)
    var=Identifier
    ':'
    expr=Expression
    ;

SystemExecution:
    'execute' call=Call calls+=SubCall*
    ;
    