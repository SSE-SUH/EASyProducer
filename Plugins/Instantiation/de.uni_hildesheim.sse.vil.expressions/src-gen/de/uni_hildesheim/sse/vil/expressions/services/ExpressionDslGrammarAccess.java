/*
* generated by Xtext
*/
package de.uni_hildesheim.sse.vil.expressions.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class ExpressionDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LanguageUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdvicesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdvicesAdviceParserRuleCall_0_0 = (RuleCall)cAdvicesAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVersionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionVersionStmtParserRuleCall_2_0 = (RuleCall)cVersionAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		
		//// just a template for required data
		//LanguageUnit:
		//	advices+=Advice* name=Identifier version=VersionStmt? imports+=Import*;
		public ParserRule getRule() { return rule; }

		//advices+=Advice* name=Identifier version=VersionStmt? imports+=Import*
		public Group getGroup() { return cGroup; }

		//advices+=Advice*
		public Assignment getAdvicesAssignment_0() { return cAdvicesAssignment_0; }

		//Advice
		public RuleCall getAdvicesAdviceParserRuleCall_0_0() { return cAdvicesAdviceParserRuleCall_0_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//version=VersionStmt?
		public Assignment getVersionAssignment_2() { return cVersionAssignment_2; }

		//VersionStmt
		public RuleCall getVersionVersionStmtParserRuleCall_2_0() { return cVersionVersionStmtParserRuleCall_2_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VariableDeclaration:
		//	const="const"? type=Type name=Identifier ("=" expression=Expression)? ";";
		public ParserRule getRule() { return rule; }

		//const="const"? type=Type name=Identifier ("=" expression=Expression)? ";"
		public Group getGroup() { return cGroup; }

		//const="const"?
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }

		//"const"
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//("=" expression=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeDef:
		//	"typedef" name=Identifier type=Type ";";
		public ParserRule getRule() { return rule; }

		//"typedef" name=Identifier type=Type ";"
		public Group getGroup() { return cGroup; }

		//"typedef"
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AdviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Advice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVersionSpecAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVersionSpecVersionSpecParserRuleCall_4_0 = (RuleCall)cVersionSpecAssignment_4.eContents().get(0);
		
		//// used in extending languages
		//Advice:
		//	"@advice" "(" name=QualifiedName ")" versionSpec=VersionSpec?;
		public ParserRule getRule() { return rule; }

		//"@advice" "(" name=QualifiedName ")" versionSpec=VersionSpec?
		public Group getGroup() { return cGroup; }

		//"@advice"
		public Keyword getAdviceKeyword_0() { return cAdviceKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//versionSpec=VersionSpec?
		public Assignment getVersionSpecAssignment_4() { return cVersionSpecAssignment_4; }

		//VersionSpec
		public RuleCall getVersionSpecVersionSpecParserRuleCall_4_0() { return cVersionSpecVersionSpecParserRuleCall_4_0; }
	}

	public class VersionSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersionSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRestrictionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRestrictionExpressionParserRuleCall_1_0 = (RuleCall)cRestrictionAssignment_1.eContents().get(0);
		
		//VersionSpec:
		//	"with" restriction=Expression;
		public ParserRule getRule() { return rule; }

		//"with" restriction=Expression
		public Group getGroup() { return cGroup; }

		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//restriction=Expression
		public Assignment getRestrictionAssignment_1() { return cRestrictionAssignment_1; }

		//Expression
		public RuleCall getRestrictionExpressionParserRuleCall_1_0() { return cRestrictionExpressionParserRuleCall_1_0; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamParameterParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamParameterParserRuleCall_1_1_0 = (RuleCall)cParamAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	param+=Parameter ("," param+=Parameter)*;
		public ParserRule getRule() { return rule; }

		//param+=Parameter ("," param+=Parameter)*
		public Group getGroup() { return cGroup; }

		//param+=Parameter
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//Parameter
		public RuleCall getParamParameterParserRuleCall_0_0() { return cParamParameterParserRuleCall_0_0; }

		//("," param+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//param+=Parameter
		public Assignment getParamAssignment_1_1() { return cParamAssignment_1_1; }

		//Parameter
		public RuleCall getParamParameterParserRuleCall_1_1_0() { return cParamParameterParserRuleCall_1_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=Type name=Identifier;
		public ParserRule getRule() { return rule; }

		//type=Type name=Identifier
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
	}

	public class VersionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersionStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionVERSIONTerminalRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VersionStmt:
		//	"version" version=VERSION ";";
		public ParserRule getRule() { return rule; }

		//"version" version=VERSION ";"
		public Group getGroup() { return cGroup; }

		//"version"
		public Keyword getVersionKeyword_0() { return cVersionKeyword_0; }

		//version=VERSION
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }

		//VERSION
		public RuleCall getVersionVERSIONTerminalRuleCall_1_0() { return cVersionVERSIONTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVersionSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionSpecVersionSpecParserRuleCall_2_0 = (RuleCall)cVersionSpecAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Import: //here fqn because this may reference a specific project (of an external project)
		//	"import" name=Identifier versionSpec=VersionSpec? ";";
		public ParserRule getRule() { return rule; }

		////here fqn because this may reference a specific project (of an external project)
		//"import" name=Identifier versionSpec=VersionSpec? ";"
		public Group getGroup() { return cGroup; }

		////here fqn because this may reference a specific project (of an external project)
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//versionSpec=VersionSpec?
		public Assignment getVersionSpecAssignment_2() { return cVersionSpecAssignment_2; }

		//VersionSpec
		public RuleCall getVersionSpecVersionSpecParserRuleCall_2_0() { return cVersionSpecVersionSpecParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarIdentifierParserRuleCall_0_0_0 = (RuleCall)cVarAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cFieldAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cFieldIdentifierParserRuleCall_0_1_1_0 = (RuleCall)cFieldAssignment_0_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// ------------------------------------- expressions -----------------------
		//// used in extending languages
		//ExpressionStatement:
		//	(var=Identifier ("." field=Identifier)? "=")? expr=Expression ";";
		public ParserRule getRule() { return rule; }

		//(var=Identifier ("." field=Identifier)? "=")? expr=Expression ";"
		public Group getGroup() { return cGroup; }

		//(var=Identifier ("." field=Identifier)? "=")?
		public Group getGroup_0() { return cGroup_0; }

		//var=Identifier
		public Assignment getVarAssignment_0_0() { return cVarAssignment_0_0; }

		//Identifier
		public RuleCall getVarIdentifierParserRuleCall_0_0_0() { return cVarIdentifierParserRuleCall_0_0_0; }

		//("." field=Identifier)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }

		//field=Identifier
		public Assignment getFieldAssignment_0_1_1() { return cFieldAssignment_0_1_1; }

		//Identifier
		public RuleCall getFieldIdentifierParserRuleCall_0_1_1_0() { return cFieldIdentifierParserRuleCall_0_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprLogicalExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Assignment cInitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInitContainerInitializerParserRuleCall_1_0 = (RuleCall)cInitAssignment_1.eContents().get(0);
		
		//Expression:
		//	expr=LogicalExpression | init=ContainerInitializer;
		public ParserRule getRule() { return rule; }

		//expr=LogicalExpression | init=ContainerInitializer
		public Alternatives getAlternatives() { return cAlternatives; }

		//expr=LogicalExpression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//LogicalExpression
		public RuleCall getExprLogicalExpressionParserRuleCall_0_0() { return cExprLogicalExpressionParserRuleCall_0_0; }

		//init=ContainerInitializer
		public Assignment getInitAssignment_1() { return cInitAssignment_1; }

		//ContainerInitializer
		public RuleCall getInitContainerInitializerParserRuleCall_1_0() { return cInitContainerInitializerParserRuleCall_1_0; }
	}

	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftEqualityExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightLogicalExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//LogicalExpression:
		//	left=EqualityExpression right+=LogicalExpressionPart*;
		public ParserRule getRule() { return rule; }

		//left=EqualityExpression right+=LogicalExpressionPart*
		public Group getGroup() { return cGroup; }

		//left=EqualityExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//EqualityExpression
		public RuleCall getLeftEqualityExpressionParserRuleCall_0_0() { return cLeftEqualityExpressionParserRuleCall_0_0; }

		//right+=LogicalExpressionPart*
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//LogicalExpressionPart
		public RuleCall getRightLogicalExpressionPartParserRuleCall_1_0() { return cRightLogicalExpressionPartParserRuleCall_1_0; }
	}

	public class LogicalExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpLogicalOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExEqualityExpressionParserRuleCall_1_0 = (RuleCall)cExAssignment_1.eContents().get(0);
		
		//LogicalExpressionPart:
		//	op=LogicalOperator ex=EqualityExpression;
		public ParserRule getRule() { return rule; }

		//op=LogicalOperator ex=EqualityExpression
		public Group getGroup() { return cGroup; }

		//op=LogicalOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//LogicalOperator
		public RuleCall getOpLogicalOperatorParserRuleCall_0_0() { return cOpLogicalOperatorParserRuleCall_0_0; }

		//ex=EqualityExpression
		public Assignment getExAssignment_1() { return cExAssignment_1; }

		//EqualityExpression
		public RuleCall getExEqualityExpressionParserRuleCall_1_0() { return cExEqualityExpressionParserRuleCall_1_0; }
	}

	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cXorKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//LogicalOperator:
		//	"and" | "or" | "xor";
		public ParserRule getRule() { return rule; }

		//"and" | "or" | "xor"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"and"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }

		//"xor"
		public Keyword getXorKeyword_2() { return cXorKeyword_2; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftRelationalExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightEqualityExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//EqualityExpression:
		//	left=RelationalExpression right=EqualityExpressionPart?;
		public ParserRule getRule() { return rule; }

		//left=RelationalExpression right=EqualityExpressionPart?
		public Group getGroup() { return cGroup; }

		//left=RelationalExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//RelationalExpression
		public RuleCall getLeftRelationalExpressionParserRuleCall_0_0() { return cLeftRelationalExpressionParserRuleCall_0_0; }

		//right=EqualityExpressionPart?
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//EqualityExpressionPart
		public RuleCall getRightEqualityExpressionPartParserRuleCall_1_0() { return cRightEqualityExpressionPartParserRuleCall_1_0; }
	}

	public class EqualityExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpEqualityOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExRelationalExpressionParserRuleCall_1_0 = (RuleCall)cExAssignment_1.eContents().get(0);
		
		//EqualityExpressionPart:
		//	op=EqualityOperator ex=RelationalExpression;
		public ParserRule getRule() { return rule; }

		//op=EqualityOperator ex=RelationalExpression
		public Group getGroup() { return cGroup; }

		//op=EqualityOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//EqualityOperator
		public RuleCall getOpEqualityOperatorParserRuleCall_0_0() { return cOpEqualityOperatorParserRuleCall_0_0; }

		//ex=RelationalExpression
		public Assignment getExAssignment_1() { return cExAssignment_1; }

		//RelationalExpression
		public RuleCall getExRelationalExpressionParserRuleCall_1_0() { return cExRelationalExpressionParserRuleCall_1_0; }
	}

	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//EqualityOperator:
		//	"==" | "<>" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "<>" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_1() { return cLessThanSignGreaterThanSignKeyword_1; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_2() { return cExclamationMarkEqualsSignKeyword_2; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAdditiveExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightRelationalExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//RelationalExpression:
		//	left=AdditiveExpression right=RelationalExpressionPart?;
		public ParserRule getRule() { return rule; }

		//left=AdditiveExpression right=RelationalExpressionPart?
		public Group getGroup() { return cGroup; }

		//left=AdditiveExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//AdditiveExpression
		public RuleCall getLeftAdditiveExpressionParserRuleCall_0_0() { return cLeftAdditiveExpressionParserRuleCall_0_0; }

		//right=RelationalExpressionPart?
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//RelationalExpressionPart
		public RuleCall getRightRelationalExpressionPartParserRuleCall_1_0() { return cRightRelationalExpressionPartParserRuleCall_1_0; }
	}

	public class RelationalExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpRelationalOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExAdditiveExpressionParserRuleCall_1_0 = (RuleCall)cExAssignment_1.eContents().get(0);
		
		//RelationalExpressionPart:
		//	op=RelationalOperator ex=AdditiveExpression;
		public ParserRule getRule() { return rule; }

		//op=RelationalOperator ex=AdditiveExpression
		public Group getGroup() { return cGroup; }

		//op=RelationalOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//RelationalOperator
		public RuleCall getOpRelationalOperatorParserRuleCall_0_0() { return cOpRelationalOperatorParserRuleCall_0_0; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_1() { return cExAssignment_1; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_1_0() { return cExAdditiveExpressionParserRuleCall_1_0; }
	}

	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelationalOperator:
		//	">" | "<" | ">=" | "<=";
		public ParserRule getRule() { return rule; }

		//">" | "<" | ">=" | "<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftMultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightAdditiveExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//AdditiveExpression:
		//	left=MultiplicativeExpression right+=AdditiveExpressionPart*;
		public ParserRule getRule() { return rule; }

		//left=MultiplicativeExpression right+=AdditiveExpressionPart*
		public Group getGroup() { return cGroup; }

		//left=MultiplicativeExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//MultiplicativeExpression
		public RuleCall getLeftMultiplicativeExpressionParserRuleCall_0_0() { return cLeftMultiplicativeExpressionParserRuleCall_0_0; }

		//right+=AdditiveExpressionPart*
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//AdditiveExpressionPart
		public RuleCall getRightAdditiveExpressionPartParserRuleCall_1_0() { return cRightAdditiveExpressionPartParserRuleCall_1_0; }
	}

	public class AdditiveExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpAdditiveOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExMultiplicativeExpressionParserRuleCall_1_0 = (RuleCall)cExAssignment_1.eContents().get(0);
		
		//AdditiveExpressionPart:
		//	op=AdditiveOperator ex=MultiplicativeExpression;
		public ParserRule getRule() { return rule; }

		//op=AdditiveOperator ex=MultiplicativeExpression
		public Group getGroup() { return cGroup; }

		//op=AdditiveOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//AdditiveOperator
		public RuleCall getOpAdditiveOperatorParserRuleCall_0_0() { return cOpAdditiveOperatorParserRuleCall_0_0; }

		//ex=MultiplicativeExpression
		public Assignment getExAssignment_1() { return cExAssignment_1; }

		//MultiplicativeExpression
		public RuleCall getExMultiplicativeExpressionParserRuleCall_1_0() { return cExMultiplicativeExpressionParserRuleCall_1_0; }
	}

	public class AdditiveOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AdditiveOperator:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftUnaryExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightMultiplicativeExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//MultiplicativeExpression:
		//	left=UnaryExpression right=MultiplicativeExpressionPart?;
		public ParserRule getRule() { return rule; }

		//left=UnaryExpression right=MultiplicativeExpressionPart?
		public Group getGroup() { return cGroup; }

		//left=UnaryExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//UnaryExpression
		public RuleCall getLeftUnaryExpressionParserRuleCall_0_0() { return cLeftUnaryExpressionParserRuleCall_0_0; }

		//right=MultiplicativeExpressionPart?
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//MultiplicativeExpressionPart
		public RuleCall getRightMultiplicativeExpressionPartParserRuleCall_1_0() { return cRightMultiplicativeExpressionPartParserRuleCall_1_0; }
	}

	public class MultiplicativeExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpMultiplicativeOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//MultiplicativeExpressionPart:
		//	op=MultiplicativeOperator expr=UnaryExpression;
		public ParserRule getRule() { return rule; }

		//op=MultiplicativeOperator expr=UnaryExpression
		public Group getGroup() { return cGroup; }

		//op=MultiplicativeOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//MultiplicativeOperator
		public RuleCall getOpMultiplicativeOperatorParserRuleCall_0_0() { return cOpMultiplicativeOperatorParserRuleCall_0_0; }

		//expr=UnaryExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_0() { return cExprUnaryExpressionParserRuleCall_1_0; }
	}

	public class MultiplicativeOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MultiplicativeOperator:
		//	"*" | "/";
		public ParserRule getRule() { return rule; }

		//"*" | "/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpUnaryOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprPostfixExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//UnaryExpression:
		//	op=UnaryOperator? expr=PostfixExpression;
		public ParserRule getRule() { return rule; }

		//op=UnaryOperator? expr=PostfixExpression
		public Group getGroup() { return cGroup; }

		//op=UnaryOperator?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//UnaryOperator
		public RuleCall getOpUnaryOperatorParserRuleCall_0_0() { return cOpUnaryOperatorParserRuleCall_0_0; }

		//expr=PostfixExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//PostfixExpression
		public RuleCall getExprPostfixExpressionParserRuleCall_1_0() { return cExprPostfixExpressionParserRuleCall_1_0; }
	}

	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//UnaryOperator:
		//	"not" | "!" | "-";
		public ParserRule getRule() { return rule; }

		//"not" | "!" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"not"
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
	}

	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixExpression");
		private final Assignment cLeftAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLeftPrimaryExpressionParserRuleCall_0 = (RuleCall)cLeftAssignment.eContents().get(0);
		
		//PostfixExpression:
		//	left= // left here for extensions
		//	PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//left= // left here for extensions
		//PrimaryExpression
		public Assignment getLeftAssignment() { return cLeftAssignment; }

		//// left here for extensions
		//PrimaryExpression
		public RuleCall getLeftPrimaryExpressionParserRuleCall_0() { return cLeftPrimaryExpressionParserRuleCall_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOtherExAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0 = (RuleCall)cOtherExAssignment_0.eContents().get(0);
		private final Assignment cUnqExAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnqExUnqualifiedExecutionParserRuleCall_1_0 = (RuleCall)cUnqExAssignment_1.eContents().get(0);
		private final Assignment cSuperExAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSuperExSuperExecutionParserRuleCall_2_0 = (RuleCall)cSuperExAssignment_2.eContents().get(0);
		private final Assignment cNewExAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNewExConstructorExecutionParserRuleCall_3_0 = (RuleCall)cNewExAssignment_3.eContents().get(0);
		
		//PrimaryExpression:
		//	otherEx=ExpressionOrQualifiedExecution | unqEx=UnqualifiedExecution | superEx=SuperExecution |
		//	newEx=ConstructorExecution;
		public ParserRule getRule() { return rule; }

		//otherEx=ExpressionOrQualifiedExecution | unqEx=UnqualifiedExecution | superEx=SuperExecution |
		//newEx=ConstructorExecution
		public Alternatives getAlternatives() { return cAlternatives; }

		//otherEx=ExpressionOrQualifiedExecution
		public Assignment getOtherExAssignment_0() { return cOtherExAssignment_0; }

		//ExpressionOrQualifiedExecution
		public RuleCall getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0() { return cOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0; }

		//unqEx=UnqualifiedExecution
		public Assignment getUnqExAssignment_1() { return cUnqExAssignment_1; }

		//UnqualifiedExecution
		public RuleCall getUnqExUnqualifiedExecutionParserRuleCall_1_0() { return cUnqExUnqualifiedExecutionParserRuleCall_1_0; }

		//superEx=SuperExecution
		public Assignment getSuperExAssignment_2() { return cSuperExAssignment_2; }

		//SuperExecution
		public RuleCall getSuperExSuperExecutionParserRuleCall_2_0() { return cSuperExSuperExecutionParserRuleCall_2_0; }

		//newEx=ConstructorExecution
		public Assignment getNewExAssignment_3() { return cNewExAssignment_3; }

		//ConstructorExecution
		public RuleCall getNewExConstructorExecutionParserRuleCall_3_0() { return cNewExConstructorExecutionParserRuleCall_3_0; }
	}

	public class ExpressionOrQualifiedExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionOrQualifiedExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cValAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cValConstantParserRuleCall_0_0_0 = (RuleCall)cValAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cParenthesisAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cParenthesisExpressionParserRuleCall_0_1_1_0 = (RuleCall)cParenthesisAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallsSubCallParserRuleCall_1_0 = (RuleCall)cCallsAssignment_1.eContents().get(0);
		
		//ExpressionOrQualifiedExecution:
		//	(val=Constant | "(" parenthesis=Expression ")") calls+=SubCall*;
		public ParserRule getRule() { return rule; }

		//(val=Constant | "(" parenthesis=Expression ")") calls+=SubCall*
		public Group getGroup() { return cGroup; }

		//val=Constant | "(" parenthesis=Expression ")"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//val=Constant
		public Assignment getValAssignment_0_0() { return cValAssignment_0_0; }

		//Constant
		public RuleCall getValConstantParserRuleCall_0_0_0() { return cValConstantParserRuleCall_0_0_0; }

		//"(" parenthesis=Expression ")"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }

		//parenthesis=Expression
		public Assignment getParenthesisAssignment_0_1_1() { return cParenthesisAssignment_0_1_1; }

		//Expression
		public RuleCall getParenthesisExpressionParserRuleCall_0_1_1_0() { return cParenthesisExpressionParserRuleCall_0_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }

		//calls+=SubCall*
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }

		//SubCall
		public RuleCall getCallsSubCallParserRuleCall_1_0() { return cCallsSubCallParserRuleCall_1_0; }
	}

	public class UnqualifiedExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnqualifiedExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCallAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCallCallParserRuleCall_0_0 = (RuleCall)cCallAssignment_0.eContents().get(0);
		private final Assignment cCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallsSubCallParserRuleCall_1_0 = (RuleCall)cCallsAssignment_1.eContents().get(0);
		
		//UnqualifiedExecution:
		//	call=Call calls+=SubCall*;
		public ParserRule getRule() { return rule; }

		//call=Call calls+=SubCall*
		public Group getGroup() { return cGroup; }

		//call=Call
		public Assignment getCallAssignment_0() { return cCallAssignment_0; }

		//Call
		public RuleCall getCallCallParserRuleCall_0_0() { return cCallCallParserRuleCall_0_0; }

		//calls+=SubCall*
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }

		//SubCall
		public RuleCall getCallsSubCallParserRuleCall_1_0() { return cCallsSubCallParserRuleCall_1_0; }
	}

	public class SuperExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuperExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCallAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallCallParserRuleCall_2_0 = (RuleCall)cCallAssignment_2.eContents().get(0);
		private final Assignment cCallsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCallsSubCallParserRuleCall_3_0 = (RuleCall)cCallsAssignment_3.eContents().get(0);
		
		//SuperExecution:
		//	"super" "." call=Call calls+=SubCall*;
		public ParserRule getRule() { return rule; }

		//"super" "." call=Call calls+=SubCall*
		public Group getGroup() { return cGroup; }

		//"super"
		public Keyword getSuperKeyword_0() { return cSuperKeyword_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//call=Call
		public Assignment getCallAssignment_2() { return cCallAssignment_2; }

		//Call
		public RuleCall getCallCallParserRuleCall_2_0() { return cCallCallParserRuleCall_2_0; }

		//calls+=SubCall*
		public Assignment getCallsAssignment_3() { return cCallsAssignment_3; }

		//SubCall
		public RuleCall getCallsSubCallParserRuleCall_3_0() { return cCallsSubCallParserRuleCall_3_0; }
	}

	public class ConstructorExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamArgumentListParserRuleCall_3_0 = (RuleCall)cParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCallsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCallsSubCallParserRuleCall_5_0 = (RuleCall)cCallsAssignment_5.eContents().get(0);
		
		//ConstructorExecution:
		//	"new" type=Type "(" param=ArgumentList? ")" calls+=SubCall*;
		public ParserRule getRule() { return rule; }

		//"new" type=Type "(" param=ArgumentList? ")" calls+=SubCall*
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//param=ArgumentList?
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }

		//ArgumentList
		public RuleCall getParamArgumentListParserRuleCall_3_0() { return cParamArgumentListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//calls+=SubCall*
		public Assignment getCallsAssignment_5() { return cCallsAssignment_5; }

		//SubCall
		public RuleCall getCallsSubCallParserRuleCall_5_0() { return cCallsSubCallParserRuleCall_5_0; }
	}

	public class SubCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0_0 = (Alternatives)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cTypeFullStopKeyword_0_0_0_0 = (Keyword)cTypeAlternatives_0_0_0.eContents().get(0);
		private final Keyword cTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1 = (Keyword)cTypeAlternatives_0_0_0.eContents().get(1);
		private final Assignment cCallAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCallCallParserRuleCall_0_1_0 = (RuleCall)cCallAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArrayExAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArrayExExpressionParserRuleCall_1_1_0 = (RuleCall)cArrayExAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SubCall:
		//	type=("." | "->") call=Call | "[" arrayEx=Expression // IVML addition to OCL
		//	"]";
		public ParserRule getRule() { return rule; }

		//type=("." | "->") call=Call | "[" arrayEx=Expression // IVML addition to OCL
		//"]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=("." | "->") call=Call
		public Group getGroup_0() { return cGroup_0; }

		//type=("." | "->")
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//"." | "->"
		public Alternatives getTypeAlternatives_0_0_0() { return cTypeAlternatives_0_0_0; }

		//"."
		public Keyword getTypeFullStopKeyword_0_0_0_0() { return cTypeFullStopKeyword_0_0_0_0; }

		//"->"
		public Keyword getTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1() { return cTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1; }

		//call=Call
		public Assignment getCallAssignment_0_1() { return cCallAssignment_0_1; }

		//Call
		public RuleCall getCallCallParserRuleCall_0_1_0() { return cCallCallParserRuleCall_0_1_0; }

		//"[" arrayEx=Expression // IVML addition to OCL
		//"]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//arrayEx=Expression
		public Assignment getArrayExAssignment_1_1() { return cArrayExAssignment_1_1; }

		//Expression
		public RuleCall getArrayExExpressionParserRuleCall_1_1_0() { return cArrayExExpressionParserRuleCall_1_1_0; }

		//// IVML addition to OCL
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclDeclarationParserRuleCall_0_0 = (RuleCall)cDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclDeclarationParserRuleCall_1_1_0 = (RuleCall)cDeclAssignment_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Declarator:
		//	decl+=Declaration (";" decl+=Declaration)* "|";
		public ParserRule getRule() { return rule; }

		//decl+=Declaration (";" decl+=Declaration)* "|"
		public Group getGroup() { return cGroup; }

		//decl+=Declaration
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }

		//Declaration
		public RuleCall getDeclDeclarationParserRuleCall_0_0() { return cDeclDeclarationParserRuleCall_0_0; }

		//(";" decl+=Declaration)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//decl+=Declaration
		public Assignment getDeclAssignment_1_1() { return cDeclAssignment_1_1; }

		//Declaration
		public RuleCall getDeclDeclarationParserRuleCall_1_1_0() { return cDeclDeclarationParserRuleCall_1_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cUnitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitsDeclarationUnitParserRuleCall_1_0 = (RuleCall)cUnitsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitsDeclarationUnitParserRuleCall_2_1_0 = (RuleCall)cUnitsAssignment_2_1.eContents().get(0);
		
		//Declaration:
		//	type=Type? units+=DeclarationUnit ("," units+=DeclarationUnit)*;
		public ParserRule getRule() { return rule; }

		//type=Type? units+=DeclarationUnit ("," units+=DeclarationUnit)*
		public Group getGroup() { return cGroup; }

		//type=Type?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//units+=DeclarationUnit
		public Assignment getUnitsAssignment_1() { return cUnitsAssignment_1; }

		//DeclarationUnit
		public RuleCall getUnitsDeclarationUnitParserRuleCall_1_0() { return cUnitsDeclarationUnitParserRuleCall_1_0; }

		//("," units+=DeclarationUnit)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//units+=DeclarationUnit
		public Assignment getUnitsAssignment_2_1() { return cUnitsAssignment_2_1; }

		//DeclarationUnit
		public RuleCall getUnitsDeclarationUnitParserRuleCall_2_1_0() { return cUnitsDeclarationUnitParserRuleCall_2_1_0; }
	}

	public class DeclarationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclarationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentifierParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDefltAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDefltExpressionParserRuleCall_1_1_0 = (RuleCall)cDefltAssignment_1_1.eContents().get(0);
		
		//DeclarationUnit:
		//	id=Identifier ("=" deflt=Expression)?;
		public ParserRule getRule() { return rule; }

		//id=Identifier ("=" deflt=Expression)?
		public Group getGroup() { return cGroup; }

		//id=Identifier
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_0_0() { return cIdIdentifierParserRuleCall_0_0; }

		//("=" deflt=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//deflt=Expression
		public Assignment getDefltAssignment_1_1() { return cDefltAssignment_1_1; }

		//Expression
		public RuleCall getDefltExpressionParserRuleCall_1_1_0() { return cDefltExpressionParserRuleCall_1_1_0; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedPrefixParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclDeclaratorParserRuleCall_2_0 = (RuleCall)cDeclAssignment_2.eContents().get(0);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamArgumentListParserRuleCall_3_0 = (RuleCall)cParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Call:
		//	name=QualifiedPrefix "(" decl=Declarator? param=ArgumentList? ")";
		public ParserRule getRule() { return rule; }

		//name=QualifiedPrefix "(" decl=Declarator? param=ArgumentList? ")"
		public Group getGroup() { return cGroup; }

		//name=QualifiedPrefix
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//QualifiedPrefix
		public RuleCall getNameQualifiedPrefixParserRuleCall_0_0() { return cNameQualifiedPrefixParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//decl=Declarator?
		public Assignment getDeclAssignment_2() { return cDeclAssignment_2; }

		//Declarator
		public RuleCall getDeclDeclaratorParserRuleCall_2_0() { return cDeclDeclaratorParserRuleCall_2_0; }

		//param=ArgumentList?
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }

		//ArgumentList
		public RuleCall getParamArgumentListParserRuleCall_3_0() { return cParamArgumentListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamNamedArgumentParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamNamedArgumentParserRuleCall_1_1_0 = (RuleCall)cParamAssignment_1_1.eContents().get(0);
		
		//ArgumentList:
		//	param+=NamedArgument ("," param+=NamedArgument)*;
		public ParserRule getRule() { return rule; }

		//param+=NamedArgument ("," param+=NamedArgument)*
		public Group getGroup() { return cGroup; }

		//param+=NamedArgument
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//NamedArgument
		public RuleCall getParamNamedArgumentParserRuleCall_0_0() { return cParamNamedArgumentParserRuleCall_0_0; }

		//("," param+=NamedArgument)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//param+=NamedArgument
		public Assignment getParamAssignment_1_1() { return cParamAssignment_1_1; }

		//NamedArgument
		public RuleCall getParamNamedArgumentParserRuleCall_1_1_0() { return cParamNamedArgumentParserRuleCall_1_1_0; }
	}

	public class NamedArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExExpressionParserRuleCall_1_0 = (RuleCall)cExAssignment_1.eContents().get(0);
		
		//NamedArgument:
		//	(name=Identifier "=")? ex=Expression;
		public ParserRule getRule() { return rule; }

		//(name=Identifier "=")? ex=Expression
		public Group getGroup() { return cGroup; }

		//(name=Identifier "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=Identifier
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0_0() { return cNameIdentifierParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//ex=Expression
		public Assignment getExAssignment_1() { return cExAssignment_1; }

		//Expression
		public RuleCall getExExpressionParserRuleCall_1_0() { return cExExpressionParserRuleCall_1_0; }
	}

	public class QualifiedPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQnameIdentifierParserRuleCall_0_0 = (RuleCall)cQnameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cQnameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cQnameColonColonKeyword_1_0_0 = (Keyword)cQnameAssignment_1_0.eContents().get(0);
		private final Assignment cQnameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQnameIdentifierParserRuleCall_1_1_0 = (RuleCall)cQnameAssignment_1_1.eContents().get(0);
		
		//QualifiedPrefix:
		//	qname+=Identifier (qname+="::" qname+=Identifier)*;
		public ParserRule getRule() { return rule; }

		//qname+=Identifier (qname+="::" qname+=Identifier)*
		public Group getGroup() { return cGroup; }

		//qname+=Identifier
		public Assignment getQnameAssignment_0() { return cQnameAssignment_0; }

		//Identifier
		public RuleCall getQnameIdentifierParserRuleCall_0_0() { return cQnameIdentifierParserRuleCall_0_0; }

		//(qname+="::" qname+=Identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//qname+="::"
		public Assignment getQnameAssignment_1_0() { return cQnameAssignment_1_0; }

		//"::"
		public Keyword getQnameColonColonKeyword_1_0_0() { return cQnameColonColonKeyword_1_0_0; }

		//qname+=Identifier
		public Assignment getQnameAssignment_1_1() { return cQnameAssignment_1_1; }

		//Identifier
		public RuleCall getQnameIdentifierParserRuleCall_1_1_0() { return cQnameIdentifierParserRuleCall_1_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixQualifiedPrefixParserRuleCall_0_0 = (RuleCall)cPrefixAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cQnameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cQnameFullStopKeyword_1_0_0 = (Keyword)cQnameAssignment_1_0.eContents().get(0);
		private final Assignment cQnameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQnameIdentifierParserRuleCall_1_1_0 = (RuleCall)cQnameAssignment_1_1.eContents().get(0);
		
		//QualifiedName:
		//	prefix=QualifiedPrefix (qname+="." qname+=Identifier)*;
		public ParserRule getRule() { return rule; }

		//prefix=QualifiedPrefix (qname+="." qname+=Identifier)*
		public Group getGroup() { return cGroup; }

		//prefix=QualifiedPrefix
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }

		//QualifiedPrefix
		public RuleCall getPrefixQualifiedPrefixParserRuleCall_0_0() { return cPrefixQualifiedPrefixParserRuleCall_0_0; }

		//(qname+="." qname+=Identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//qname+="."
		public Assignment getQnameAssignment_1_0() { return cQnameAssignment_1_0; }

		//"."
		public Keyword getQnameFullStopKeyword_1_0_0() { return cQnameFullStopKeyword_1_0_0; }

		//qname+=Identifier
		public Assignment getQnameAssignment_1_1() { return cQnameAssignment_1_1; }

		//Identifier
		public RuleCall getQnameIdentifierParserRuleCall_1_1_0() { return cQnameIdentifierParserRuleCall_1_1_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNValueNumValueParserRuleCall_0_0 = (RuleCall)cNValueAssignment_0.eContents().get(0);
		private final Assignment cSValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cSValueAssignment_1.eContents().get(0);
		private final Assignment cQValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cQValueQualifiedNameParserRuleCall_2_0 = (RuleCall)cQValueAssignment_2.eContents().get(0);
		private final Assignment cBValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cBValueAlternatives_3_0 = (Alternatives)cBValueAssignment_3.eContents().get(0);
		private final Keyword cBValueTrueKeyword_3_0_0 = (Keyword)cBValueAlternatives_3_0.eContents().get(0);
		private final Keyword cBValueFalseKeyword_3_0_1 = (Keyword)cBValueAlternatives_3_0.eContents().get(1);
		private final Assignment cNullAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cNullNullKeyword_4_0 = (Keyword)cNullAssignment_4.eContents().get(0);
		private final Assignment cVersionAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cVersionVERSIONTerminalRuleCall_5_0 = (RuleCall)cVersionAssignment_5.eContents().get(0);
		
		//Constant:
		//	nValue=NumValue | sValue=STRING | qValue=QualifiedName | bValue=("true" | "false") | null="null" | =>
		//	version=VERSION;
		public ParserRule getRule() { return rule; }

		//nValue=NumValue | sValue=STRING | qValue=QualifiedName | bValue=("true" | "false") | null="null" | => version=VERSION
		public Alternatives getAlternatives() { return cAlternatives; }

		//nValue=NumValue
		public Assignment getNValueAssignment_0() { return cNValueAssignment_0; }

		//NumValue
		public RuleCall getNValueNumValueParserRuleCall_0_0() { return cNValueNumValueParserRuleCall_0_0; }

		//sValue=STRING
		public Assignment getSValueAssignment_1() { return cSValueAssignment_1; }

		//STRING
		public RuleCall getSValueSTRINGTerminalRuleCall_1_0() { return cSValueSTRINGTerminalRuleCall_1_0; }

		//qValue=QualifiedName
		public Assignment getQValueAssignment_2() { return cQValueAssignment_2; }

		//QualifiedName
		public RuleCall getQValueQualifiedNameParserRuleCall_2_0() { return cQValueQualifiedNameParserRuleCall_2_0; }

		//bValue=("true" | "false")
		public Assignment getBValueAssignment_3() { return cBValueAssignment_3; }

		//"true" | "false"
		public Alternatives getBValueAlternatives_3_0() { return cBValueAlternatives_3_0; }

		//"true"
		public Keyword getBValueTrueKeyword_3_0_0() { return cBValueTrueKeyword_3_0_0; }

		//"false"
		public Keyword getBValueFalseKeyword_3_0_1() { return cBValueFalseKeyword_3_0_1; }

		//null="null"
		public Assignment getNullAssignment_4() { return cNullAssignment_4; }

		//"null"
		public Keyword getNullNullKeyword_4_0() { return cNullNullKeyword_4_0; }

		//=> version=VERSION
		public Assignment getVersionAssignment_5() { return cVersionAssignment_5; }

		//VERSION
		public RuleCall getVersionVERSIONTerminalRuleCall_5_0() { return cVersionVERSIONTerminalRuleCall_5_0; }
	}

	public class NumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValNUMBERTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//NumValue:
		//	val=NUMBER;
		public ParserRule getRule() { return rule; }

		//val=NUMBER
		public Assignment getValAssignment() { return cValAssignment; }

		//NUMBER
		public RuleCall getValNUMBERTerminalRuleCall_0() { return cValNUMBERTerminalRuleCall_0; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVERSIONTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEXPONENTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cVersionKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Identifier:
		//	ID | VERSION | EXPONENT | "version";
		public ParserRule getRule() { return rule; }

		//ID | VERSION | EXPONENT | "version"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//VERSION
		public RuleCall getVERSIONTerminalRuleCall_1() { return cVERSIONTerminalRuleCall_1; }

		//EXPONENT
		public RuleCall getEXPONENTTerminalRuleCall_2() { return cEXPONENTTerminalRuleCall_2; }

		//"version"
		public Keyword getVersionKeyword_3() { return cVersionKeyword_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameQualifiedPrefixParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSetAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSetSetOfKeyword_1_0_0 = (Keyword)cSetAssignment_1_0.eContents().get(0);
		private final Assignment cParamAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamTypeParametersParserRuleCall_1_1_0 = (RuleCall)cParamAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSeqAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cSeqSequenceOfKeyword_2_0_0 = (Keyword)cSeqAssignment_2_0.eContents().get(0);
		private final Assignment cParamAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamTypeParametersParserRuleCall_2_1_0 = (RuleCall)cParamAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cMapAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cMapMapOfKeyword_3_0_0 = (Keyword)cMapAssignment_3_0.eContents().get(0);
		private final Assignment cParamAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamTypeParametersParserRuleCall_3_1_0 = (RuleCall)cParamAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cCallAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cCallCallOfKeyword_4_0_0 = (Keyword)cCallAssignment_4_0.eContents().get(0);
		private final Assignment cReturnAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnTypeParserRuleCall_4_1_0 = (RuleCall)cReturnAssignment_4_1.eContents().get(0);
		private final Assignment cParamAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParamTypeParametersParserRuleCall_4_2_0 = (RuleCall)cParamAssignment_4_2.eContents().get(0);
		
		//Type:
		//	name= // specific types will be dynamically loaded at start-up
		//	QualifiedPrefix | set="setOf" param=TypeParameters | seq="sequenceOf" param=TypeParameters | map="mapOf"
		//	param=TypeParameters | call="callOf" return=Type? param=TypeParameters;
		public ParserRule getRule() { return rule; }

		//name= // specific types will be dynamically loaded at start-up
		//QualifiedPrefix | set="setOf" param=TypeParameters | seq="sequenceOf" param=TypeParameters | map="mapOf"
		//param=TypeParameters | call="callOf" return=Type? param=TypeParameters
		public Alternatives getAlternatives() { return cAlternatives; }

		//name= // specific types will be dynamically loaded at start-up
		//QualifiedPrefix
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//// specific types will be dynamically loaded at start-up
		//QualifiedPrefix
		public RuleCall getNameQualifiedPrefixParserRuleCall_0_0() { return cNameQualifiedPrefixParserRuleCall_0_0; }

		//set="setOf" param=TypeParameters
		public Group getGroup_1() { return cGroup_1; }

		//set="setOf"
		public Assignment getSetAssignment_1_0() { return cSetAssignment_1_0; }

		//"setOf"
		public Keyword getSetSetOfKeyword_1_0_0() { return cSetSetOfKeyword_1_0_0; }

		//param=TypeParameters
		public Assignment getParamAssignment_1_1() { return cParamAssignment_1_1; }

		//TypeParameters
		public RuleCall getParamTypeParametersParserRuleCall_1_1_0() { return cParamTypeParametersParserRuleCall_1_1_0; }

		//seq="sequenceOf" param=TypeParameters
		public Group getGroup_2() { return cGroup_2; }

		//seq="sequenceOf"
		public Assignment getSeqAssignment_2_0() { return cSeqAssignment_2_0; }

		//"sequenceOf"
		public Keyword getSeqSequenceOfKeyword_2_0_0() { return cSeqSequenceOfKeyword_2_0_0; }

		//param=TypeParameters
		public Assignment getParamAssignment_2_1() { return cParamAssignment_2_1; }

		//TypeParameters
		public RuleCall getParamTypeParametersParserRuleCall_2_1_0() { return cParamTypeParametersParserRuleCall_2_1_0; }

		//map="mapOf" param=TypeParameters
		public Group getGroup_3() { return cGroup_3; }

		//map="mapOf"
		public Assignment getMapAssignment_3_0() { return cMapAssignment_3_0; }

		//"mapOf"
		public Keyword getMapMapOfKeyword_3_0_0() { return cMapMapOfKeyword_3_0_0; }

		//param=TypeParameters
		public Assignment getParamAssignment_3_1() { return cParamAssignment_3_1; }

		//TypeParameters
		public RuleCall getParamTypeParametersParserRuleCall_3_1_0() { return cParamTypeParametersParserRuleCall_3_1_0; }

		//call="callOf" return=Type? param=TypeParameters
		public Group getGroup_4() { return cGroup_4; }

		//call="callOf"
		public Assignment getCallAssignment_4_0() { return cCallAssignment_4_0; }

		//"callOf"
		public Keyword getCallCallOfKeyword_4_0_0() { return cCallCallOfKeyword_4_0_0; }

		//return=Type?
		public Assignment getReturnAssignment_4_1() { return cReturnAssignment_4_1; }

		//Type
		public RuleCall getReturnTypeParserRuleCall_4_1_0() { return cReturnTypeParserRuleCall_4_1_0; }

		//param=TypeParameters
		public Assignment getParamAssignment_4_2() { return cParamAssignment_4_2; }

		//TypeParameters
		public RuleCall getParamTypeParametersParserRuleCall_4_2_0() { return cParamTypeParametersParserRuleCall_4_2_0; }
	}

	public class TypeParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamTypeParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamTypeParserRuleCall_2_1_0 = (RuleCall)cParamAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeParameters:
		//	"(" param+=Type ("," param+=Type)* ")";
		public ParserRule getRule() { return rule; }

		//"(" param+=Type ("," param+=Type)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//param+=Type
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }

		//Type
		public RuleCall getParamTypeParserRuleCall_1_0() { return cParamTypeParserRuleCall_1_0; }

		//("," param+=Type)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//param+=Type
		public Assignment getParamAssignment_2_1() { return cParamAssignment_2_1; }

		//Type
		public RuleCall getParamTypeParserRuleCall_2_1_0() { return cParamTypeParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ContainerInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainerInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExprsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprsContainerInitializerExpressionParserRuleCall_2_0_0 = (RuleCall)cExprsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExprsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExprsContainerInitializerExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExprsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContainerInitializer:
		//	{ContainerInitializer} "{" (exprs+=ContainerInitializerExpression ("," exprs+=ContainerInitializerExpression)*)? "}";
		public ParserRule getRule() { return rule; }

		//{ContainerInitializer} "{" (exprs+=ContainerInitializerExpression ("," exprs+=ContainerInitializerExpression)*)? "}"
		public Group getGroup() { return cGroup; }

		//{ContainerInitializer}
		public Action getContainerInitializerAction_0() { return cContainerInitializerAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(exprs+=ContainerInitializerExpression ("," exprs+=ContainerInitializerExpression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//exprs+=ContainerInitializerExpression
		public Assignment getExprsAssignment_2_0() { return cExprsAssignment_2_0; }

		//ContainerInitializerExpression
		public RuleCall getExprsContainerInitializerExpressionParserRuleCall_2_0_0() { return cExprsContainerInitializerExpressionParserRuleCall_2_0_0; }

		//("," exprs+=ContainerInitializerExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//exprs+=ContainerInitializerExpression
		public Assignment getExprsAssignment_2_1_1() { return cExprsAssignment_2_1_1; }

		//ContainerInitializerExpression
		public RuleCall getExprsContainerInitializerExpressionParserRuleCall_2_1_1_0() { return cExprsContainerInitializerExpressionParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ContainerInitializerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerInitializerExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLogicalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalLogicalExpressionParserRuleCall_0_0 = (RuleCall)cLogicalAssignment_0.eContents().get(0);
		private final Assignment cContainerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cContainerContainerInitializerParserRuleCall_1_0 = (RuleCall)cContainerAssignment_1.eContents().get(0);
		
		//ContainerInitializerExpression:
		//	logical=LogicalExpression | container=ContainerInitializer;
		public ParserRule getRule() { return rule; }

		//logical=LogicalExpression | container=ContainerInitializer
		public Alternatives getAlternatives() { return cAlternatives; }

		//logical=LogicalExpression
		public Assignment getLogicalAssignment_0() { return cLogicalAssignment_0; }

		//LogicalExpression
		public RuleCall getLogicalLogicalExpressionParserRuleCall_0_0() { return cLogicalLogicalExpressionParserRuleCall_0_0; }

		//container=ContainerInitializer
		public Assignment getContainerAssignment_1() { return cContainerAssignment_1; }

		//ContainerInitializer
		public RuleCall getContainerContainerInitializerParserRuleCall_1_0() { return cContainerContainerInitializerParserRuleCall_1_0; }
	}
	
	
	private LanguageUnitElements pLanguageUnit;
	private VariableDeclarationElements pVariableDeclaration;
	private TypeDefElements pTypeDef;
	private AdviceElements pAdvice;
	private VersionSpecElements pVersionSpec;
	private ParameterListElements pParameterList;
	private ParameterElements pParameter;
	private VersionStmtElements pVersionStmt;
	private ImportElements pImport;
	private ExpressionStatementElements pExpressionStatement;
	private ExpressionElements pExpression;
	private LogicalExpressionElements pLogicalExpression;
	private LogicalExpressionPartElements pLogicalExpressionPart;
	private LogicalOperatorElements pLogicalOperator;
	private EqualityExpressionElements pEqualityExpression;
	private EqualityExpressionPartElements pEqualityExpressionPart;
	private EqualityOperatorElements pEqualityOperator;
	private RelationalExpressionElements pRelationalExpression;
	private RelationalExpressionPartElements pRelationalExpressionPart;
	private RelationalOperatorElements pRelationalOperator;
	private AdditiveExpressionElements pAdditiveExpression;
	private AdditiveExpressionPartElements pAdditiveExpressionPart;
	private AdditiveOperatorElements pAdditiveOperator;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private MultiplicativeExpressionPartElements pMultiplicativeExpressionPart;
	private MultiplicativeOperatorElements pMultiplicativeOperator;
	private UnaryExpressionElements pUnaryExpression;
	private UnaryOperatorElements pUnaryOperator;
	private PostfixExpressionElements pPostfixExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private ExpressionOrQualifiedExecutionElements pExpressionOrQualifiedExecution;
	private UnqualifiedExecutionElements pUnqualifiedExecution;
	private SuperExecutionElements pSuperExecution;
	private ConstructorExecutionElements pConstructorExecution;
	private SubCallElements pSubCall;
	private DeclaratorElements pDeclarator;
	private DeclarationElements pDeclaration;
	private DeclarationUnitElements pDeclarationUnit;
	private CallElements pCall;
	private ArgumentListElements pArgumentList;
	private NamedArgumentElements pNamedArgument;
	private QualifiedPrefixElements pQualifiedPrefix;
	private QualifiedNameElements pQualifiedName;
	private ConstantElements pConstant;
	private NumValueElements pNumValue;
	private IdentifierElements pIdentifier;
	private TypeElements pType;
	private TypeParametersElements pTypeParameters;
	private ContainerInitializerElements pContainerInitializer;
	private ContainerInitializerExpressionElements pContainerInitializerExpression;
	private TerminalRule tVERSION;
	private TerminalRule tID;
	private TerminalRule tNUMBER;
	private TerminalRule tEXPONENT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public ExpressionDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_hildesheim.sse.vil.expressions.ExpressionDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// just a template for required data
	//LanguageUnit:
	//	advices+=Advice* name=Identifier version=VersionStmt? imports+=Import*;
	public LanguageUnitElements getLanguageUnitAccess() {
		return (pLanguageUnit != null) ? pLanguageUnit : (pLanguageUnit = new LanguageUnitElements());
	}
	
	public ParserRule getLanguageUnitRule() {
		return getLanguageUnitAccess().getRule();
	}

	//VariableDeclaration:
	//	const="const"? type=Type name=Identifier ("=" expression=Expression)? ";";
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//TypeDef:
	//	"typedef" name=Identifier type=Type ";";
	public TypeDefElements getTypeDefAccess() {
		return (pTypeDef != null) ? pTypeDef : (pTypeDef = new TypeDefElements());
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//// used in extending languages
	//Advice:
	//	"@advice" "(" name=QualifiedName ")" versionSpec=VersionSpec?;
	public AdviceElements getAdviceAccess() {
		return (pAdvice != null) ? pAdvice : (pAdvice = new AdviceElements());
	}
	
	public ParserRule getAdviceRule() {
		return getAdviceAccess().getRule();
	}

	//VersionSpec:
	//	"with" restriction=Expression;
	public VersionSpecElements getVersionSpecAccess() {
		return (pVersionSpec != null) ? pVersionSpec : (pVersionSpec = new VersionSpecElements());
	}
	
	public ParserRule getVersionSpecRule() {
		return getVersionSpecAccess().getRule();
	}

	//ParameterList:
	//	param+=Parameter ("," param+=Parameter)*;
	public ParameterListElements getParameterListAccess() {
		return (pParameterList != null) ? pParameterList : (pParameterList = new ParameterListElements());
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//	type=Type name=Identifier;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//VersionStmt:
	//	"version" version=VERSION ";";
	public VersionStmtElements getVersionStmtAccess() {
		return (pVersionStmt != null) ? pVersionStmt : (pVersionStmt = new VersionStmtElements());
	}
	
	public ParserRule getVersionStmtRule() {
		return getVersionStmtAccess().getRule();
	}

	//Import: //here fqn because this may reference a specific project (of an external project)
	//	"import" name=Identifier versionSpec=VersionSpec? ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// ------------------------------------- expressions -----------------------
	//// used in extending languages
	//ExpressionStatement:
	//	(var=Identifier ("." field=Identifier)? "=")? expr=Expression ";";
	public ExpressionStatementElements getExpressionStatementAccess() {
		return (pExpressionStatement != null) ? pExpressionStatement : (pExpressionStatement = new ExpressionStatementElements());
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//Expression:
	//	expr=LogicalExpression | init=ContainerInitializer;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//LogicalExpression:
	//	left=EqualityExpression right+=LogicalExpressionPart*;
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return (pLogicalExpression != null) ? pLogicalExpression : (pLogicalExpression = new LogicalExpressionElements());
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//LogicalExpressionPart:
	//	op=LogicalOperator ex=EqualityExpression;
	public LogicalExpressionPartElements getLogicalExpressionPartAccess() {
		return (pLogicalExpressionPart != null) ? pLogicalExpressionPart : (pLogicalExpressionPart = new LogicalExpressionPartElements());
	}
	
	public ParserRule getLogicalExpressionPartRule() {
		return getLogicalExpressionPartAccess().getRule();
	}

	//LogicalOperator:
	//	"and" | "or" | "xor";
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return (pLogicalOperator != null) ? pLogicalOperator : (pLogicalOperator = new LogicalOperatorElements());
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}

	//EqualityExpression:
	//	left=RelationalExpression right=EqualityExpressionPart?;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//EqualityExpressionPart:
	//	op=EqualityOperator ex=RelationalExpression;
	public EqualityExpressionPartElements getEqualityExpressionPartAccess() {
		return (pEqualityExpressionPart != null) ? pEqualityExpressionPart : (pEqualityExpressionPart = new EqualityExpressionPartElements());
	}
	
	public ParserRule getEqualityExpressionPartRule() {
		return getEqualityExpressionPartAccess().getRule();
	}

	//EqualityOperator:
	//	"==" | "<>" | "!=";
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return (pEqualityOperator != null) ? pEqualityOperator : (pEqualityOperator = new EqualityOperatorElements());
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression:
	//	left=AdditiveExpression right=RelationalExpressionPart?;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//RelationalExpressionPart:
	//	op=RelationalOperator ex=AdditiveExpression;
	public RelationalExpressionPartElements getRelationalExpressionPartAccess() {
		return (pRelationalExpressionPart != null) ? pRelationalExpressionPart : (pRelationalExpressionPart = new RelationalExpressionPartElements());
	}
	
	public ParserRule getRelationalExpressionPartRule() {
		return getRelationalExpressionPartAccess().getRule();
	}

	//RelationalOperator:
	//	">" | "<" | ">=" | "<=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (pRelationalOperator != null) ? pRelationalOperator : (pRelationalOperator = new RelationalOperatorElements());
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AdditiveExpression:
	//	left=MultiplicativeExpression right+=AdditiveExpressionPart*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//AdditiveExpressionPart:
	//	op=AdditiveOperator ex=MultiplicativeExpression;
	public AdditiveExpressionPartElements getAdditiveExpressionPartAccess() {
		return (pAdditiveExpressionPart != null) ? pAdditiveExpressionPart : (pAdditiveExpressionPart = new AdditiveExpressionPartElements());
	}
	
	public ParserRule getAdditiveExpressionPartRule() {
		return getAdditiveExpressionPartAccess().getRule();
	}

	//AdditiveOperator:
	//	"+" | "-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return (pAdditiveOperator != null) ? pAdditiveOperator : (pAdditiveOperator = new AdditiveOperatorElements());
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression:
	//	left=UnaryExpression right=MultiplicativeExpressionPart?;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//MultiplicativeExpressionPart:
	//	op=MultiplicativeOperator expr=UnaryExpression;
	public MultiplicativeExpressionPartElements getMultiplicativeExpressionPartAccess() {
		return (pMultiplicativeExpressionPart != null) ? pMultiplicativeExpressionPart : (pMultiplicativeExpressionPart = new MultiplicativeExpressionPartElements());
	}
	
	public ParserRule getMultiplicativeExpressionPartRule() {
		return getMultiplicativeExpressionPartAccess().getRule();
	}

	//MultiplicativeOperator:
	//	"*" | "/";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return (pMultiplicativeOperator != null) ? pMultiplicativeOperator : (pMultiplicativeOperator = new MultiplicativeOperatorElements());
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//UnaryExpression:
	//	op=UnaryOperator? expr=PostfixExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//UnaryOperator:
	//	"not" | "!" | "-";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (pUnaryOperator != null) ? pUnaryOperator : (pUnaryOperator = new UnaryOperatorElements());
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//PostfixExpression:
	//	left= // left here for extensions
	//	PrimaryExpression;
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return (pPostfixExpression != null) ? pPostfixExpression : (pPostfixExpression = new PostfixExpressionElements());
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}

	//PrimaryExpression:
	//	otherEx=ExpressionOrQualifiedExecution | unqEx=UnqualifiedExecution | superEx=SuperExecution |
	//	newEx=ConstructorExecution;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//ExpressionOrQualifiedExecution:
	//	(val=Constant | "(" parenthesis=Expression ")") calls+=SubCall*;
	public ExpressionOrQualifiedExecutionElements getExpressionOrQualifiedExecutionAccess() {
		return (pExpressionOrQualifiedExecution != null) ? pExpressionOrQualifiedExecution : (pExpressionOrQualifiedExecution = new ExpressionOrQualifiedExecutionElements());
	}
	
	public ParserRule getExpressionOrQualifiedExecutionRule() {
		return getExpressionOrQualifiedExecutionAccess().getRule();
	}

	//UnqualifiedExecution:
	//	call=Call calls+=SubCall*;
	public UnqualifiedExecutionElements getUnqualifiedExecutionAccess() {
		return (pUnqualifiedExecution != null) ? pUnqualifiedExecution : (pUnqualifiedExecution = new UnqualifiedExecutionElements());
	}
	
	public ParserRule getUnqualifiedExecutionRule() {
		return getUnqualifiedExecutionAccess().getRule();
	}

	//SuperExecution:
	//	"super" "." call=Call calls+=SubCall*;
	public SuperExecutionElements getSuperExecutionAccess() {
		return (pSuperExecution != null) ? pSuperExecution : (pSuperExecution = new SuperExecutionElements());
	}
	
	public ParserRule getSuperExecutionRule() {
		return getSuperExecutionAccess().getRule();
	}

	//ConstructorExecution:
	//	"new" type=Type "(" param=ArgumentList? ")" calls+=SubCall*;
	public ConstructorExecutionElements getConstructorExecutionAccess() {
		return (pConstructorExecution != null) ? pConstructorExecution : (pConstructorExecution = new ConstructorExecutionElements());
	}
	
	public ParserRule getConstructorExecutionRule() {
		return getConstructorExecutionAccess().getRule();
	}

	//SubCall:
	//	type=("." | "->") call=Call | "[" arrayEx=Expression // IVML addition to OCL
	//	"]";
	public SubCallElements getSubCallAccess() {
		return (pSubCall != null) ? pSubCall : (pSubCall = new SubCallElements());
	}
	
	public ParserRule getSubCallRule() {
		return getSubCallAccess().getRule();
	}

	//Declarator:
	//	decl+=Declaration (";" decl+=Declaration)* "|";
	public DeclaratorElements getDeclaratorAccess() {
		return (pDeclarator != null) ? pDeclarator : (pDeclarator = new DeclaratorElements());
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}

	//Declaration:
	//	type=Type? units+=DeclarationUnit ("," units+=DeclarationUnit)*;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//DeclarationUnit:
	//	id=Identifier ("=" deflt=Expression)?;
	public DeclarationUnitElements getDeclarationUnitAccess() {
		return (pDeclarationUnit != null) ? pDeclarationUnit : (pDeclarationUnit = new DeclarationUnitElements());
	}
	
	public ParserRule getDeclarationUnitRule() {
		return getDeclarationUnitAccess().getRule();
	}

	//Call:
	//	name=QualifiedPrefix "(" decl=Declarator? param=ArgumentList? ")";
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//ArgumentList:
	//	param+=NamedArgument ("," param+=NamedArgument)*;
	public ArgumentListElements getArgumentListAccess() {
		return (pArgumentList != null) ? pArgumentList : (pArgumentList = new ArgumentListElements());
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	//NamedArgument:
	//	(name=Identifier "=")? ex=Expression;
	public NamedArgumentElements getNamedArgumentAccess() {
		return (pNamedArgument != null) ? pNamedArgument : (pNamedArgument = new NamedArgumentElements());
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}

	//QualifiedPrefix:
	//	qname+=Identifier (qname+="::" qname+=Identifier)*;
	public QualifiedPrefixElements getQualifiedPrefixAccess() {
		return (pQualifiedPrefix != null) ? pQualifiedPrefix : (pQualifiedPrefix = new QualifiedPrefixElements());
	}
	
	public ParserRule getQualifiedPrefixRule() {
		return getQualifiedPrefixAccess().getRule();
	}

	//QualifiedName:
	//	prefix=QualifiedPrefix (qname+="." qname+=Identifier)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Constant:
	//	nValue=NumValue | sValue=STRING | qValue=QualifiedName | bValue=("true" | "false") | null="null" | =>
	//	version=VERSION;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//NumValue:
	//	val=NUMBER;
	public NumValueElements getNumValueAccess() {
		return (pNumValue != null) ? pNumValue : (pNumValue = new NumValueElements());
	}
	
	public ParserRule getNumValueRule() {
		return getNumValueAccess().getRule();
	}

	//Identifier:
	//	ID | VERSION | EXPONENT | "version";
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//Type:
	//	name= // specific types will be dynamically loaded at start-up
	//	QualifiedPrefix | set="setOf" param=TypeParameters | seq="sequenceOf" param=TypeParameters | map="mapOf"
	//	param=TypeParameters | call="callOf" return=Type? param=TypeParameters;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//TypeParameters:
	//	"(" param+=Type ("," param+=Type)* ")";
	public TypeParametersElements getTypeParametersAccess() {
		return (pTypeParameters != null) ? pTypeParameters : (pTypeParameters = new TypeParametersElements());
	}
	
	public ParserRule getTypeParametersRule() {
		return getTypeParametersAccess().getRule();
	}

	//ContainerInitializer:
	//	{ContainerInitializer} "{" (exprs+=ContainerInitializerExpression ("," exprs+=ContainerInitializerExpression)*)? "}";
	public ContainerInitializerElements getContainerInitializerAccess() {
		return (pContainerInitializer != null) ? pContainerInitializer : (pContainerInitializer = new ContainerInitializerElements());
	}
	
	public ParserRule getContainerInitializerRule() {
		return getContainerInitializerAccess().getRule();
	}

	//ContainerInitializerExpression:
	//	logical=LogicalExpression | container=ContainerInitializer;
	public ContainerInitializerExpressionElements getContainerInitializerExpressionAccess() {
		return (pContainerInitializerExpression != null) ? pContainerInitializerExpression : (pContainerInitializerExpression = new ContainerInitializerExpressionElements());
	}
	
	public ParserRule getContainerInitializerExpressionRule() {
		return getContainerInitializerExpressionAccess().getRule();
	}

	//// --------------------- Terminals (from IVML)----------------------------------
	//// otherwise we would have to write 0 . 5 instead of 0.5
	//terminal VERSION:
	//	"v" "0".."9"+ ("." "0".."9"+)*;
	public TerminalRule getVERSIONRule() {
		return (tVERSION != null) ? tVERSION : (tVERSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VERSION"));
	} 

	//// adjust de.uni_hildesheim.sse.model.validation.IvmlIdentifierCheck
	//// never allow identifiers starting with $ -> Reasoner name prefixes
	//// here $ goes for meta names in dynamic IVML types
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "$") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal NUMBER:
	//	"-"? ("0".."9"+ ("." "0".."9"* EXPONENT?)? | "." "0".."9"+ EXPONENT? | "0".."9"+ EXPONENT);
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//// just return a string
	//terminal EXPONENT:
	//	("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getEXPONENTRule() {
		return (tEXPONENT != null) ? tEXPONENT : (tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
