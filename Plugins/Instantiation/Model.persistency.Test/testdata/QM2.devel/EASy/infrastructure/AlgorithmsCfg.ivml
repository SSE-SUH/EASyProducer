project AlgorithmsCfg {

	import ReconfigurableHardware;
	import ReconfigurableHardwareCfg;
	import Algorithms;
	import BasicsCfg;
	Algorithm swPreprocessor;
	Algorithm SWTopoCorrelationFinancial;
	Algorithm HWTopoCorrelationFinancial;
	Algorithm HWTopoCorrelationTwitter;
	Algorithm SWTopoCorrelationTwitter;
	Algorithm topoSentiWord;
	Algorithm topoSVM;
	Algorithm mismatchedAlg;
	Algorithm randomAlg1;
	Algorithm randomAlg2;
	Algorithm switchAlg1;
	Algorithm switchAlg2;
	Algorithm aggregateAlg;
	Algorithm preprocessorTest;
	Algorithm financialCorrelationTest;
	Algorithm sentimentAnalysisTest;
	Algorithm twitterCorrelationTest;
	algorithms = {
		refBy(swPreprocessor), refBy(SWTopoCorrelationFinancial), refBy(HWTopoCorrelationFinancial), refBy(SWTopoCorrelationTwitter), refBy(HWTopoCorrelationTwitter), refBy(topoSentiWord), refBy(topoSVM), refBy(mismatchedAlg), refBy(randomAlg1), refBy(randomAlg2), refBy(switchAlg1), refBy(switchAlg2), refBy(aggregateAlg)
	, refBy(preprocessorTest), refBy(financialCorrelationTest), refBy(sentimentAnalysisTest), refBy(twitterCorrelationTest)};
	algorithms.bindingTime = BindingTime.compile;
	swPreprocessor = Algorithm {
		name = "preprocessor", 
		artifact = "eu.qualimaster:hy-preprocessor:3.0-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.correlation.Preprocessor", 
		input = {
			Tuple {
				name = "springStream", 
				fields = {
					Field {
						name = "symbolTuple", 
						type = refBy(StringType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}
	};
	preprocessorTest = Algorithm {
		name = "preprocessorTest", 
		artifact = "eu.qualimaster.test:PreprocessorTSI:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.PreprocessorTSI", 
		input = {
			Tuple {
				name = "springStream", 
				fields = {
					Field {
						name = "symbolTuple", 
						type = refBy(StringType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}
	};
	SWTopoCorrelationFinancial = Algorithm {
		name = "TopoSoftwareCorrelationFinancial", 
		artifact = "eu.qualimaster:hy-correlation-financial-software:3.0-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.correlation.softwaresubtopology.TopoSoftwareCorrelationFinancial", 
		description = "", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		algTopologyClass = "TopoSoftwareCorrelationFinancial"
	};
	
	HWTopoCorrelationFinancial = Algorithm {
		name = "TopoHardwareCorrelationFinancial", 
		artifact = "eu.qualimaster:hy-correlation-financial-hardware:3.0-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.correlation.hardwaresubtopology.TopoHardwareCorrelationFinancial", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		algTopologyClass = "TopoHardwareCorrelationFinancial",
		hwNode = refBy(cluster1)
	};
	
	financialCorrelationTest = Algorithm {
		name = "financialCorrelationTest", 
		artifact = "eu.qualimaster.test:FinancialCorrelationTest:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.FinancialCorrelationTest", 
		description = "", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}
	};
	
	HWTopoCorrelationTwitter = Algorithm {
		name = "TopoHardwareCorrelationTwitter", 
		artifact = "eu.qualimaster:hy-correlation-twitter-hardware:3.0-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.correlation.hardwaresubtopology.TopoHardwareCorrelationTwitter", 
		input = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseTwitter", 
				fields = {
					Field {
						name = "pairwiseCorrelationTwitter", 
						type = refBy(StringType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		algTopologyClass = "TopoHardwareCorrelationTwitter",
		hwNode = refBy(cluster2)
	};
	SWTopoCorrelationTwitter = Algorithm {
		name = "TopoSoftwareCorrelationTwitter", 
		artifact = "eu.qualimaster:hy-correlation-twitter-software:3.0-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.correlation.softwaresubtopology.TopoSoftwareCorrelationTwitter", 
		input = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseTwitter", 
				fields = {
					Field {
						name = "pairwiseCorrelationTwitter", 
						type = refBy(StringType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		algTopologyClass = "TopoSoftwareCorrelationTwitter"
	};
	
	twitterCorrelationTest = Algorithm {
		name = "twitterCorrelationTest", 
		artifact = "eu.qualimaster.test:TwitterCorrelationTest:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.TwitterCorrelationTest", 
		input = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseTwitter", 
				fields = {
					Field {
						name = "pairwiseCorrelationTwitter", 
						type = refBy(StringType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}
	};
	
	topoSentiWord = Algorithm {
		name = "sentiWord", 
		artifact = "eu.qualimaster:SentiWordnetSubTopology:0.0.5-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.sentiment.topology.impl.SentimentAnaylsisSentiWordNetTopology", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 60, 
				name = "timeSeriesGranularity"
			}, IntegerParameter {
				defaultValue = 10, 
				name = "sentimentClass"
			}, RealParameter {
				defaultValue = 2.5, 
				name = "classificationThreshold"
			}
		}, 
		algTopologyClass = "SentimentAnaylsisSentiWordNetTopology"
	};
	topoSVM = Algorithm {
		name = "SVM", 
		artifact = "eu.qualimaster:SVMSubTopology:0.0.5-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.sentiment.topology.impl.SentimentAnaylsisSVMTopology", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 60, 
				name = "timeSeriesGranularity"
			}, IntegerParameter {
				defaultValue = 10, 
				name = "sentimentClass"
			}, RealParameter {
				defaultValue = 2.5, 
				name = "classificationThreshold"
			}
		}, 
		algTopologyClass = "SentimentAnaylsisSVMTopology"
	};
	
	sentimentAnalysisTest = Algorithm {
		name = "sentimentAnalysisTest", 
		artifact = "eu.qualimaster.test:SentimentAnalysisTest:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.SentimentAnalysisTest", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType),
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 60, 
				name = "timeSeriesGranularity"
			}, IntegerParameter {
				defaultValue = 10, 
				name = "sentimentClass"
			}, RealParameter {
				defaultValue = 2.5, 
				name = "classificationThreshold"
			}
		}
	};
	
	mismatchedAlg = Algorithm {
		name = "mismatchedAlg", 
		artifact = "eu.qualimaster:MismatchedAlg:0.0.1", 
		class = "eu.qualimaster.algorithms.impl.MismatchedAlg", 
		input = {
			Tuple {
				name = "misString", 
				fields = {
					Field {
						name = "symbolTuple1", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "misString", 
				fields = {
					Field {
						name = "streamID1", 
						type = refBy(StringType),
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(IntegerType),
						keyPart = false
					}, Field {
						name = "quote", 
						type = refBy(RealType),
						keyPart = false
					}
				}
			}
		}
	};
	randomAlg1 = Algorithm {
		name = "randomAlg1", 
		artifact = "eu.qualimaster.test:RandomProcessor1:0.0.2-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.RandomProcessor1", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "proccessedData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}, BooleanParameter {
				defaultValue = false,
				name = "flag"
			}
		}, 
		algTopologyClass = "RandomProcessor1"
	};
	randomAlg2 = Algorithm {
		name = "randomAlg2", 
		artifact = "eu.qualimaster.test:RandomProcessor2:0.0.2-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.RandomProcessor2", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "proccessedData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}, BooleanParameter {
				defaultValue = false,
				name = "flag"
			}
		}, 
		algTopologyClass = "RandomProcessor2"
	};
	switchAlg1 = Algorithm {
		name = "switchAlg1", 
		artifact = "eu.qualimaster.test:SwitchProcessor1:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.SwitchProcessor1", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "proccessedData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}, BooleanParameter {
				defaultValue = false,
				name = "flag"
			}
		}
	};
	switchAlg2 = Algorithm {
		name = "switchAlg2", 
		artifact = "eu.qualimaster.test:SwitchProcessor2:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.SwitchProcessor2", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "proccessedData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}, BooleanParameter {
				defaultValue = false,
				name = "flag"
			}
		}
	};
	aggregateAlg = Algorithm {
		name = "aggregateAlg", 
		artifact = "eu.qualimaster.test:AggregationAlg:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.AggregationAlg", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType),
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 1, 
				name = "factor"
			}, IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}
		}
	};
	freeze {
		algorithms;
		swPreprocessor;
		SWTopoCorrelationFinancial;
		HWTopoCorrelationFinancial;
		HWTopoCorrelationTwitter;
		SWTopoCorrelationTwitter;
		topoSentiWord;
		topoSVM;
		mismatchedAlg;
		randomAlg1;
		randomAlg2;
		switchAlg1;
		switchAlg2;
		aggregateAlg;
		preprocessorTest;
		financialCorrelationTest;
		twitterCorrelationTest;
		sentimentAnalysisTest;
	} but (f|f.bindingTime == BindingTime.runtime)
}
