@advice(QM)
template hardwareConnection(Configuration config, FileArtifact target, DecisionVariable family, String ifName, String hwName, mapOf(Tuple,String) nameToOutputMap, mapOf(String, mapOf(Tuple, Tuple)) globalMap) {
	
	
    def String parameterTypeName(DecisionVariable var) {
    	switch(var.type()) {
    		"IntegerParameter" : "int",
    		"BooleanParameter" : "boolean",
    		"RealParameter" : "double",
    		"StringParameter" : "String"
    	}
    }
    def produceForVariable(mapOf(Tuple, Tuple) inputToOutputMapping, DecisionVariable tuples, Boolean input, Integer indent) {
        Integer inputTuplesSize = tuples.variables().size();
        String varName;
        String inputTupleId = "";
        Integer tupleCount = 1;
        for(Tuple t : tuples) {
        	if(input) {
				if(inputToOutputMapping.containsKey(t))	{
				  Tuple output = inputToOutputMapping.get(t);
				  varName = nameToOutputMap.get(output);				
				}        		
        	} else {
        	    if(inputTuplesSize >1) {
        		    inputTupleId = "${tupleCount}";
        	    }
        	    varName = "I${ifName}${inputTupleId}Output";	
        	    tupleCount = tupleCount + 1;
        	}
 
			/*     	
        	if(inputTuplesSize >1) {
        		inputTupleId = "${tupleCount}";
        	}
        	if(input) {
        	    varName = "I${ifName}${inputTupleId}Input";	
        	} else {
        		varName = "I${ifName}${inputTupleId}Output";
        	} 
        	*  */  
               	
        	'$varName[] buffered${varName};'  | indent;
        	
        }       	
    }
    
    def produceForConstruction(DecisionVariable tuples, Boolean input, Integer indent) {
        Integer inputTuplesSize = tuples.variables().size();
        String varName;
        String inputTupleId = "";
        Integer tupleCount = 1;
        for(Tuple t : tuples) {
        	if(inputTuplesSize >1) {
        		inputTupleId = "${tupleCount}";
        	}
        	if(input) {
        	    varName = "I${ifName}${inputTupleId}Input";	
        	} else {
        		varName = "I${ifName}${inputTupleId}Output";
        	}        	
        	'buffered${varName} = new $varName[size];'  | indent;
        	tupleCount = tupleCount + 1;
        }     	
    }
    
    def produceForCalculate(DecisionVariable inputTuples, DecisionVariable outputTuples) {
    	 Integer inputTuplesSize = inputTuples.variables().size();
    	 Integer outputTuplesSize = outputTuples.variables().size();    	 
    	 String inputTupleId = "";
    	 String outputTupleId = "";
         Integer inputTupleCount = 1;   	   	 	  
    	 for(Tuple t : inputTuples){
    	    Integer outputTupleCount = 1;
    	    if(inputTuplesSize > 1){
    	 	   inputTupleId = "$inputTupleCount";
    	    }       	        	      	 	
    	 	String inTypeName = "I${ifName}${inputTupleId}Input";
    	 	
    	 	outputTupleCount = 1;
    	 	for(Tuple p : outputTuples){
    	      if(outputTuplesSize > 1){
    	 	   outputTupleId = "$outputTupleCount";
    	      }  
    	 	  String outTypeName = "I${ifName}${outputTupleId}Output";  	 
    	
    	'    /**'
    	'     * Hardware algorithm.'
    	'     *'
    	'     * @param input the algorithm input taken from the input stream'
    	'     * @param result the result calculated by the algorithm'
    	'     */'
        '    public void calculate(${inTypeName} input, ${outTypeName} result) {'
	    '        //Send the size arg number.'
	    '        out.println(size);'
	    '        //Send data'
	    '        for(int i=0; i<buffered${inTypeName}.length; i++) {'
	    '            Utils.sleep(1);'
	    '            out.println(buffered${inTypeName}[i]);'
	    '        }'
	    '        logger.info("Maxeler call performed!");'
	    '        for(int i=0; i<buffered${outTypeName}.length; i++) {'
	    '            //buffered${outTypeName}[i] = in.readLine();'
	    '        }'
	    '        disconnect();'
        '    }'
        ''
            outputTupleCount = outputTupleCount +1;
           }
        inputTupleCount = inputTupleCount +1;  
       }
    }     
	
	def main(Configuration config, FileArtifact target, DecisionVariable family, String ifName, String hwName, mapOf(Tuple,String) nameToOutputMap, mapOf(String, mapOf(Tuple, Tuple)) globalMap){		

        String iName = ifName;
      	String ifOutputName = iName + "Output";
        Integer end = ifName.length();
		String name =  hwName;
		DecisionVariable inputTuples = family.byName("input");
		DecisionVariable outputTuples = family.byName("output");
		String fmVarName = family.varName().firstToUpperCase();
		mapOf(Tuple, Tuple) inputToOutputMapping = {};
		if(globalMap.containsKey(fmVarName)){
			inputToOutputMapping = globalMap.get(fmVarName);
		}		 
      	'package eu.qualimaster.hardware.imp;'
      	''
      	'import org.apache.log4j.Logger;'
      	'import java.io.BufferedReader;'
        'import java.io.IOException;'
        'import java.io.InputStreamReader;'
        'import java.io.PrintWriter;'
        'import java.net.Socket;'
        'import eu.qualimaster.families.inf.$iName;'
        'import eu.qualimaster.hardware.inf.*;'
        'import backtype.storm.utils.Utils;'
		''
		'/**'
		' * Define the family hardware connection class(GEN).'
		'**/'
		'public class $name implements $iName, HardwareStub{'		
		''
		'    final static Logger logger = Logger.getLogger($name.class);'
		'    private static PrintWriter out = null;'
        '    private static BufferedReader in = null;'
        '    private static int size = 384; //Maxeler input size needs to be a multiple of 384 elements'
        '    private static int count = 0;'
		produceForVariable(inputToOutputMapping, inputTuples, true, 4);
		produceForVariable(inputToOutputMapping, outputTuples, false, 4);
        ''
		'    /**'
		'    * Construction of family hardware connection.'
		'    **/'
		'    public $name() {'		
		produceForConstruction(inputTuples, true, 4);
		produceForConstruction(outputTuples, false, 4);		
		'    }'
		''
		'    /**'
		'    * Connect with Hardware.'
		'    **/'
		'    @Override'
		'    public void connect(String host) {'
        '        String[] hostInfo = host.split(":");'
        '        String IP = hostInfo[0];'
        '        String port = hostInfo[1];'
	 	'        try {'
		'            Socket sock = new Socket(IP, Integer.parseInt(port));'
 		'            in = new BufferedReader(new InputStreamReader(sock.getInputStream()));'
  		'            out = new PrintWriter(sock.getOutputStream(), true);'
	    '        }'
	    '        catch (IOException ioe) {'
		'            logger.error(ioe);'
	    '        }'
	    '    }'
	    ''
	    '    /**'
	    '    * Disconnect with hardware.'
	    '    **/'
	    '    @Override'
	    '    public void disconnect() {'
	    '        if(in != null)'
	    '            try {'
	    '                in.close();'
	    '                out.close();'
	    '            } catch(IOException e) {'
	    '                e.printStackTrace();'
	    '            }'
	    '    }'
	    ''
	    produceForCalculate(family.byName("input"), family.byName("output")); 
	    
	        if (family.byName("parameters").variables().size()>0) {
	        '    // algorithm parameters'
	        ''
	        for (Parameter p : family.byName("parameters")) {
	        	String paramName = p.name;
    			String mname = firstToUpperCase(toIdentifier(paramName));
	        	'    /**'
	        	'     * Sets the algorithm parameter "${paramName}".'
	        	'     *'
	        	'     * @param value the new value of the algorithm parameter'
	        	'     */'
	        	'    public void setParameter${mname}(${parameterTypeName(p)} value) {'
	        	'    }'
	        	''
	    	}
    	}
    	
		'}'
			 			
	}
}