project Basics {

    // common type definitions

	typedef PositiveInteger Integer with (PositiveInteger > 0);
	typedef NonEmptyString String with (NonEmptyString.size() > 0);
	typedef PortInteger Integer with (PortInteger > 0 and PortInteger < 65536);
	enum BindingTime {compile, startup, runtime};
	enum FieldType {INTEGER, STRING, BOOLEAN, REAL};

	attribute BindingTime bindingTime = BindingTime.compile to Basics;

	typedef Tuples sequenceOf(Tuple);
	typedef Parameters setOf(Parameter);
	typedef Fields sequenceOf(Field);
	typedef FieldTypes sequenceOf(FieldType);
	
	// for the moment we assume that we will not have nested Tuples
	compound Tuple { // this conception is based on how the Storm describes the stream
		Fields fields; 
	} 
	
	compound Field { // in order to fit the data structure in the Storm
		NonEmptyString name;
		FieldType type;
	}
	
	// parameters are different than fields as they may have a configured default value for startup
	
	compound Parameter {
		NonEmptyString name;
	}
	
	compound IntegerParameter refines Parameter {
		assign(bindingTime = BindingTime.runtime) to {
			Integer value; // this may get a "default/startup" value from the configuration
		}
	}
	
	compound StringParameter refines Parameter {
		assign(bindingTime = BindingTime.runtime) to {
			String value; // this may get a "default/startup" value from the configuration
		}
	}

	compound RealParameter refines Parameter {
		assign(bindingTime = BindingTime.runtime) to {
			Real value; // this may get a "default/startup" value from the configuration
		}
	}

	compound BooleanParameter refines Parameter {
		assign(bindingTime = BindingTime.runtime) to {
			Boolean value; // this may get a "default/startup" value from the configuration
		}
	}

}