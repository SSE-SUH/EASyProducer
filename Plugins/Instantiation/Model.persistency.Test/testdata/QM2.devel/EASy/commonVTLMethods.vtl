@advice(QM)
template commonVTLMethods(Configuration config, FileArtifact target) {
	def String parameterTypeName(DecisionVariable var) {
    	switch(var.type()) {
    		"IntegerParameter" : "int",
    		"BooleanParameter" : "boolean",
    		"RealParameter" : "double",
    		"StringParameter" : "String",
    		"LongParameter" : "long" 		
    	}
    }
    
    def obtainDefaultValue(FieldType type) {
    	switch(type.class) {
    		"int" : 0,
    		"String" : null,
    		"boolean" : false,
    		"long" : 0, 
    		"float" : 0.0,
    		"double" : 0.0,
    		"Object" : null,
    		default : null
    	}
    }	

    def String basicTypeForProto(FieldType type) {
    	switch(type.class) {
    		"int" : "int32",
    		"String" : "string",
    		"boolean" : "bool",
    		"long" : "int64", 
    		"float" : "float",
    		"double" : "double",
    		default : ""
    	}
    }	
    
    def Boolean isBasicType(FieldType type) {
    	switch(type.class) {
    		"int" : true,
    		"String" : true,
    		"boolean" : true,
    		"long" : true, 
    		"float" : true,
    		"double" : true,
    		default : false
    	}
    }
    
    def Boolean isListType(FieldType type) {
    	String class = type.class;
    	if(class.matches("java.util.List.*")) {
    		true;
    	} else {
    		false;
    	}
    }
    
    def String obtainInnerType(String class) {
    	String result;
    	Integer len = class.length();
    	result = class.substring(15, len - 1);
    	result;
    }
    
    def String fieldTypeName(DecisionVariable f) {
		DecisionVariable type = f.byName("type");
		String typeName = type.byName("class");
		typeName;
	}
	
	def String stripTemplates(String typeName) {
		typeName.substitute("<.*>", "");
	}
	
	
    def String composePOptionsInit(String confName, String paramName, String type, Any value) {
		String result;
		if (confName.length() > 0) {
			result = "PipelineOptions.getExecutor${type}Argument($confName, getName(), \"${paramName}\", $value)";
		} else {
			result = "$value";
		}
		result;
	}

	def setDefaultParameterValue(setOf(Parameter) parameters, String confName, String algName, int indent) {
		for(Parameter p : parameters) {	
			String paraName = p.name;
			String ty = p.type();
			if(ty == "IntegerParameter") { 
				IntegerParameter para = p;
				Integer value = para.defaultValue;
				String tmp = composePOptionsInit(confName, paraName, "Int", value);
				'$algName.setParameter${paraName.firstToUpperCase()}($tmp);' | indent;
			} else if(ty == "BooleanParameter") { 
				BooleanParameter para = p;
				Boolean value = para.defaultValue;
				String tmp = composePOptionsInit(confName, paraName, "Boolean", value);
				'$algName.setParameter${paraName.firstToUpperCase()}($tmp);' | indent;
			} else if(ty == "StringParameter") { 
				StringParameter para = p;
				String value = para.defaultValue;
				String tmp = composePOptionsInit(confName, paraName, "String", "\"$value\"");
				'$algName.setParameter${paraName.firstToUpperCase()}($tmp);' | indent;
			} else if(ty == "RealParameter") { 
				RealParameter para = p;
				Real value = para.defaultValue;
				String tmp = composePOptionsInit(confName, paraName, "Double", value);
				'$algName.setParameter${paraName.firstToUpperCase()}($tmp);' | indent;
			} else if(ty == "LongParameter") { 
				LongParameter para = p;
				Real value = para.defaultValue;
				String tmp = composePOptionsInit(confName, paraName, "Long", value);
				'$algName.setParameter${paraName.firstToUpperCase()}($tmp);' | indent;
			}		
		}
	}
	
}