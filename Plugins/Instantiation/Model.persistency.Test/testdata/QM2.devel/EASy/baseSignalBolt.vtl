template baseSignalBolt(Configuration config, FileArtifact target) {
	def main(Configuration config, FileArtifact target){


'package eu.qualiMaster.signal;'

'import java.util.Map;'
'import eu.qualiMaster.signal.*;'
'import backtype.storm.task.OutputCollector;'
'import backtype.storm.task.TopologyContext;'
'import backtype.storm.topology.base.BaseRichBolt;'

'@SuppressWarnings("serial")'
'public abstract class BaseSignalBolt extends BaseRichBolt implements SignalListener {'
''
'    private String name;'
'    private StormSignalConnection signalConnection;'
''
'    public BaseSignalBolt(String name) {'
'        this.name = name;'
'    }'
''
'    @SuppressWarnings("rawtypes")'
'    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {'
'        try {'
'        	System.out.println("Prepare--basesignalbolt....");'
'            this.signalConnection = new StormSignalConnection(this.name, this);'
'            this.signalConnection.init(conf);'
'        } catch (Exception e) {'
'            System.err.println("Error SignalConnection."+ e);'
'        }'
'    }'
''

'    public void sendSignal(String toPath, byte[] signal)throws Exception {'
'        this.signalConnection.send(toPath, signal);'
'    }'
''
'    @Override'
'    public void cleanup() {'
''        // TODO Auto-generated method stub
'        super.cleanup();'
'        this.signalConnection.close();'
''
'    }'
''
'}'

	}
}