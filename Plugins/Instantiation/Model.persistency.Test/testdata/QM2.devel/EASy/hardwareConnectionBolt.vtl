@advice(QM)
template hardwareConnectionBolt(Configuration config, FileArtifact target, Family family, String algName) {
	def main(Configuration config, FileArtifact target, Family family, String algName) {
		String fName = family.name;
		String ifName = "I" + fName.firstToUpperCase();
		'package eu.qualimaster.algorithms.$algName;'
		''
		'import java.io.IOException;'
		'import java.io.ByteArrayOutputStream;'
		'import java.util.Map;'
		'import backtype.storm.task.OutputCollector;'
		'import backtype.storm.task.TopologyContext;'
		'import backtype.storm.topology.OutputFieldsDeclarer;'
		'import backtype.storm.tuple.Tuple;'
		'import eu.qualimaster.common.signal.BaseSignalBolt;'
		'import eu.qualimaster.base.algorithm.HardwareTransmitter;'
		'import eu.qualimaster.dataManagement.serialization.SerializerRegistry;'		
		produceImportFromInput(family.input, fName, 0);
		''
		'public class HardwareConnectionBolt extends BaseSignalBolt {'
			'final static org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(HardwareConnectionBolt.class);' | 4;
			'private OutputCollector collector;' | 4;
			'private String ip;' | 4;
			'private int port;' | 4;
			'private HardwareTransmitter hardwareConnection;' | 4;
			'private transient ByteArrayOutputStream output = null;' | 4;
			produceInputVariable(family.input, fName, 4);
			''
			/*********************** */
			/*******Constructor***** */
			/*********************** */
			'public HardwareConnectionBolt(String name, String namespace) {' | 4;
        		'super(name, namespace); ' | 8; 
    		'}' | 4;
    		''
    		/************************* */
    		/*******prepare method**** */
    		/************************* */
    		'@SuppressWarnings("rawtypes")' | 4;
    		'public void prepare(Map map, TopologyContext topologyContext, OutputCollector outputCollector) {' | 4;
    			'super.prepare(map, topologyContext, outputCollector);' | 8;
    			'collector = outputCollector;' | 8;
    			'ip = "147.27.39.13";' | 8; //replace to the ip configuration
        		'port = 2400;' | 8; //replace to the port configuration
        		'output = new ByteArrayOutputStream();' | 8;
    		'}' | 4;
    		''
    		/************************** */
    		/*******execute method***** */
    		/************************** */
    		'public void execute(Tuple tuple) {' | 4;
        	produceInputForTuples(family.input, ifName, 8);
        	'}' | 4;
        	''
			/**************************** */
			/*********connect method***** */
			/**************************** */
			'private boolean connect() {' | 4;
        		'if (null == hardwareConnection) {' | 8;
	            	'try {' | 12;
	                	'hardwareConnection = new HardwareTransmitter(ip, port);' | 16;
	                	'logger.info("Created a transmitter connection.");' | 16;
	            	'} catch (IOException e) {' | 12;
	                	'e.printStackTrace();' | 16;
	            	'}' | 12;
        		'}' | 8;
        		'return null != hardwareConnection;' | 8;
    		'}' | 4;
    		''
    		/******************************** */
    		/****declareOuputFields method*** */
    		/******************************** */
    		'public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {' | 4;
    		'}' | 4;    		   		
		'}'
	}
	
	def produceInputForTuples(Tuples tuples, String ifName, Integer indent) {	
		String inputInfName; //input interface name	
		String inputImpName;		     
		
		String tupleName;
		Boolean multiStream = false;

		Integer tuplesSize = tuples.size();
		Integer innerIndent = indent;
		if(tuplesSize > 1){
			multiStream = true;
			innerIndent = indent + 4;
		}
		for(Tuple t : tuples) {
			//get the tuple name
			tupleName = t.name;			
			//get input interface name
			inputInfName = "I" + ifName + "${firstToUpperCase(tupleName)}Input";
			inputImpName =ifName + "${firstToUpperCase(tupleName)}Input";
												
			if(multiStream){
				'if(tuple.getValue(0) instanceof $inputImpName) {' | indent;
			}
			'input${firstToUpperCase(tupleName)} = ($inputImpName)tuple.getValue(0);' | innerIndent;
			'try {' | innerIndent;
				'output.reset();' | innerIndent + 4;
		    	'SerializerRegistry.getSerializerSafe("$inputImpName", $inputImpName.class).serializeTo(input${firstToUpperCase(tupleName)}, output);' | innerIndent + 4;
			 '} catch (IOException e) {' | innerIndent;
            	'e.printStackTrace();' | innerIndent + 4;
        	 '}' | innerIndent;
        	 'if (connect()) {' | innerIndent;
			 	'hardwareConnection.sendData(output.toByteArray());' | innerIndent + 4;           
            	'collector.ack(tuple);' | innerIndent + 4;
        	 '}' | innerIndent;
			 if(multiStream){
			 	'}' | indent;
			 }	
			 ''		
		}							
	}
	
	def produceInputVariable(Tuples tuples, String fName, Integer indent) {
		String ifName = "I" + fName.firstToUpperCase();
		String tupleName;
		for(Tuple t : tuples) {
			tupleName = t.name;
			String inputInfName = ifName + "${firstToUpperCase(tupleName)}Input";
			'private transient $inputInfName input${firstToUpperCase(tupleName)} = null;' | indent;
		}
	}
	
	def produceImportFromInput(Tuples tuples, String fName, Integer indent) {
		String ifName = "I" + fName.firstToUpperCase();
		String tupleName;
		'import eu.qualimaster.families.imp.${firstToUpperCase(toIdentifier(fName))}.*;'
		for(Tuple t : tuples) {
			tupleName = t.name;
			String inputInfName = ifName + "${firstToUpperCase(tupleName)}Input";
			'import eu.qualimaster.families.imp.${firstToUpperCase(toIdentifier(fName))}.$inputInfName;' | indent;
		}
	}
	
}