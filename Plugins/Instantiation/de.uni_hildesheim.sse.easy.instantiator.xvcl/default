<?xml version="1.0" encoding="us-ascii"?>

<!ENTITY newline "\n">
<!ENTITY return "\r">
<!ENTITY tab "\t">
<!ENTITY comma "\,">
<!-- this entity is used for passing comas (,) as value in multi-valued -->

<!ELEMENT x-frame (#PCDATA | break | adapt | set | set-multi | select | value-of | message | while | remove | ifdef | ifndef | print | set-loop | vars | var | set-iter | option | otherwise)*>
<!ELEMENT break (#PCDATA | adapt | set | set-multi | select | value-of | message | while | remove | ifdef | ifndef | print | set-loop | vars | var | set-iter | option | otherwise)*>
<!ELEMENT adapt (insert | insert-after | insert-before)*>
<!ELEMENT insert (#PCDATA | break | adapt | set | set-multi | select | value-of | message | while | remove | ifdef | ifndef | print | set-loop | vars | var | set-iter | option | otherwise)*>
<!ELEMENT insert-before (#PCDATA | break | adapt | set | set-multi | select | value-of | message | while | remove | ifdef | ifndef | print | set-loop | vars | var | set-iter | option | otherwise)*>
<!ELEMENT insert-after (#PCDATA | break | adapt | set | set-multi | select | value-of | message | while | remove | ifdef | ifndef | print | set-loop | vars | var | set-iter | option | otherwise)*>
<!--<!ELEMENT set-loop (vars?,set-iter+)>-->
<!ELEMENT set-loop (vars | set-iter | break | adapt | select | message | ifdef | ifndef)*>
<!--<!ELEMENT vars (var+)>-->
<!ELEMENT vars (var | break | adapt | select | message | ifdef | ifndef)*>
<!ELEMENT var EMPTY>
<!ELEMENT set-iter EMPTY>
<!ELEMENT set-multi EMPTY>
<!ELEMENT set EMPTY>
<!--<!ELEMENT select (option*, otherwise?)>-->
<!ELEMENT select (option | otherwise | break | adapt | message | ifdef | ifndef)*>
<!ELEMENT ifndef (#PCDATA | break | adapt | set | set-multi | select | value-of | message | while | remove | ifdef | ifndef | print | set-loop | vars | var | set-iter | option | otherwise)*>
<!ELEMENT ifdef (#PCDATA | break | adapt | set | set-multi | select | value-of | message | while | remove | ifdef | ifndef | print | set-loop | vars | var | set-iter | option | otherwise)*>
<!ELEMENT option (#PCDATA | break | adapt | set | set-multi | select | value-of | message | while | remove | ifdef | ifndef | print | set-loop | vars | var | set-iter)*>
<!ELEMENT otherwise (#PCDATA | break | adapt | set | set-multi | select | value-of | message | while | remove | ifdef | ifndef | print | set-loop | vars | var | set-iter)*>
<!ELEMENT while (#PCDATA | break | adapt | set | set-multi | select | value-of | message | while | remove | ifdef | ifndef | print | set-loop | vars | var | set-iter)*>
<!ELEMENT message EMPTY>
<!ELEMENT value-of EMPTY>
<!ELEMENT remove EMPTY>
<!ELEMENT print EMPTY>

<!ATTLIST x-frame
	name CDATA #REQUIRED
	outdir CDATA #IMPLIED
	outfile CDATA #IMPLIED
	language CDATA #IMPLIED
>
<!ATTLIST break
	name CDATA #REQUIRED
>
<!ATTLIST adapt
	x-frame CDATA #REQUIRED
	src CDATA #IMPLIED
	outdir CDATA #IMPLIED
	outfile CDATA #IMPLIED
	samelevel CDATA #IMPLIED
	once CDATA #IMPLIED
>
<!ATTLIST set
	var CDATA #REQUIRED
	value CDATA #REQUIRED
	defer-evaluation CDATA #IMPLIED
>
<!ATTLIST set-multi
	var CDATA #REQUIRED
	value CDATA #REQUIRED
	defer-evaluation CDATA #IMPLIED
>
<!ATTLIST set-loop
	name CDATA #REQUIRED
	defer-evaluation CDATA #IMPLIED
>
<!ATTLIST vars
	enforcevars CDATA #IMPLIED
>
<!ATTLIST var
	name CDATA #REQUIRED
	default CDATA #IMPLIED
>
<!ATTLIST insert
	break CDATA #REQUIRED
>
<!ATTLIST insert-after
	break CDATA #REQUIRED
>
<!ATTLIST insert-before
	break CDATA #REQUIRED
>
<!ATTLIST select
	option CDATA #REQUIRED
>
<!ATTLIST option
	value CDATA #REQUIRED
	comp-operator CDATA #IMPLIED
>
<!ATTLIST while
	using-items-in CDATA #IMPLIED
	using-loop CDATA #IMPLIED
>
<!ATTLIST value-of
	expr CDATA #REQUIRED
>
<!ATTLIST message
	text CDATA #REQUIRED
	continue CDATA #IMPLIED
>
<!ATTLIST remove
	var CDATA #REQUIRED
>
<!ATTLIST ifdef
	var CDATA #REQUIRED
>
<!ATTLIST ifndef
	var CDATA #REQUIRED
>
<!ATTLIST print
	text CDATA #REQUIRED
>