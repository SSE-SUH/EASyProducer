vilScript collections () {

    sequenceOf(Integer) seq0 = {};
    Integer i_seq0 = seq0.size();
    Boolean i_b0 = seq0.includes(5);
    sequenceOf(Integer) seq1 = {1, 2, 3, 4};
    Integer i_s1 = seq1.size();
    Boolean i_b1 = seq1.includes(5);
    Boolean i_b2 = seq1.includes(3);
    Boolean i_b3 = seq1.excludes(3);
    Boolean i_b4 = seq1.excludes(5);
    sequenceOf(Integer, Integer) seq2 = {{1, 2}, {2, 3}, {3, 4}};
    sequenceOf(Integer) seq2flat = seq2.flatten();
    Integer i_s2 = seq2.size();
    sequenceOf(Integer) seq3 = {1, 2, 3, 4};
    Boolean i_b5 = seq1.equals(seq3);
    Boolean i_b5e = seq1 == seq3;
    Boolean i_b6 = seq1.equals(seq2);
    Boolean i_b6e = seq1 == seq2;
    Boolean i_b7 = seq1.isEmpty();
    Boolean i_b8 = seq1.isNotEmpty();
    Boolean i_b9 = seq1.notEmpty();
    Integer i_i1 = seq1.get(1);
    Integer i_i2 = seq1[2];
    setOf(Integer) set1 = seq1.toSet();
    sequenceOf(Integer) seq4 = {1, 2, 2, 3, 4, 5};
    Integer sumInt4 = seq4.sum();
    Real avgInt4 = seq4.avg();
    Integer prodInt4 = seq4.product();
    Integer minInt4 = seq4.min();
    Integer maxInt4 = seq4.max();
    setOf(Integer) set2 = seq4.toSet();
    sequenceOf(Integer) seq7 = set2.toSequence();
    sequenceOf(Integer) seq8 = seq1.selectByType(Integer);
    sequenceOf(Integer) seq8_1 = seq1.selectByKind(Integer);
    sequenceOf(Real) seq9 = seq1.selectByType(Real);
    sequenceOf(Real) seq9_1 = seq1.selectByKind(Real);
    sequenceOf(Integer) seq10 = seq4.excluding(seq3);
    sequenceOf(Integer) seq11 = seq4.excluding(seq1);
    sequenceOf(Integer) seq12 = seq4->select(i | i > 4);
    sequenceOf(Integer) seq4r1 = seq4.reverse();
    sequenceOf(Integer) seq4r2 = seq4.revert();
    Integer seq4any1 = seq4->any(i | i > 4);
    Integer seq4any2 = seq4->any(i | i == 2);
    Integer seq4one1 = seq4->one(i | i > 4);
    Integer seq4one2 = seq4->one(i | i == 2);
    Boolean seq4all1 = seq4->forAll(i | i >= 0);
    Boolean seq4all2 = seq4->forAll(i | i >= 4);
    Boolean seq4exists1 = seq4->exists(i | i >= 0);
    Boolean seq4exists2 = seq4->forAll(i | i < 0);
    Boolean seq4unique = seq4->isUnique(i | i + 1);
    Boolean seq3unique = seq3->isUnique(i | i + 1);
    setOf(Integer) set3 = set2.selectByType(Integer);
    setOf(Integer) set3_1 = set2.selectByKind(Integer);
    setOf(Real) set4 = set2.selectByType(Real);
    setOf(Real) set4_1 = set2.selectByKind(Real);
    setOf(Real) set4_2 = set2.typeSelect(Real);
    setOf(Real) set4_3 = set2.typeReject(Real);
    setOf(Integer) set5 = set2.excluding(set2);
    setOf(Integer) set6 = set2.excluding(seq8);
    setOf(Integer) set7 = set2->select(i | i > 4);
    setOf(Integer) set8 = set2->reject(i | i > 4);
    sequenceOf(Integer) seq13 = {5, 4, 7, 2, 1, 6};
    sequenceOf(Integer) seq14 = seq13.sortAlpha();
    Integer sumInt13 = seq13.sum();
    Real avgInt13 = seq13.avg();
    Integer prodInt13 = seq13.product();
    Integer minInt13 = seq13.min();
    Integer maxInt13 = seq13.max();
    Boolean incAll1 = seq4.includesAll(seq3);
    Boolean incAll2 = seq4.includesAll(seq13);
    Boolean incAll3 = seq4.toSet().includesAll(seq3);
    Boolean incAll4 = seq4.toSet().includesAll(seq13.toSet());
    sequenceOf(Integer) seq15 = {11, 12, 13, 14};
    Boolean exlAll5 = seq4.excludesAll(seq15);
    Boolean exlAll6 = seq4.excludesAll(seq13);
    Boolean exlAll7 = seq4.toSet().excludesAll(seq15);
    Boolean exlAll8 = seq4.toSet().excludesAll(seq13.toSet());
    setOf(Integer) set9 = set1 - seq13.toSet();
    setOf(Integer) set10 = set1.symmetricDifference(seq13.toSet());
    sequenceOf(Integer) seq16 = seq1.union(seq13);
    sequenceOf(Integer) seq17 = seq1.append(27);
    sequenceOf(Integer) seq18 = seq1.prepend(27);
    sequenceOf(Integer) seq19 = seq1.subSequence(1, 3);
    Boolean seq1Unique = seq1.hasDuplicates();
    Boolean seq4Unique = seq4.hasDuplicates();
    Boolean seq1seq4Overlaps = seq1.overlaps(seq4);
    Boolean seq4seq1Overlaps = seq4.overlaps(seq1);
    sequenceOf(Integer) seq20 = {1, 2, 3, 4, 5};
    Boolean seq1seq4SubSeq = seq1.isSubsequenceOf(seq4);
    Boolean seq4seq1SubSeq = seq4.isSubsequenceOf(seq1);
    Boolean seq1seq20SubSeq = seq1.isSubsequenceOf(seq20);
    Boolean seq20seq1SubSeq = seq20.isSubsequenceOf(seq1);

    main() = : {
    }

}