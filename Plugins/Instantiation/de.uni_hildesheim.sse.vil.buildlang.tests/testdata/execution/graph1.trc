-> main(Project, Configuration, Project) with (<project>, <config>, <project>)
    g <- <config>
    -> closure(Set, ExpressionEvaluator) with ({graph1::g1 {0}}, <evaluator>) = {graph1::Node::next {0}, graph1::Node::next {0}, graph1::g1 {0}}
    g1 <- {graph1::Node::next {0}, graph1::Node::next {0}, graph1::g1 {0}}
    -> isAcyclic(Collection, ExpressionEvaluator) with ({graph1::g1 {0}}, <evaluator>) = false
    a1 <- false
    -> closure(Set, ExpressionEvaluator) with ({graph1::g2 {0}}, <evaluator>) = {graph1::Node::next {0}, graph1::g2 {0}}
    g2 <- {graph1::Node::next {0}, graph1::g2 {0}}
    -> isAcyclic(Collection, ExpressionEvaluator) with ({graph1::g2 {0}}, <evaluator>) = true
    a2 <- true