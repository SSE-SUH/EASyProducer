r <- func(Integer)
f10 <- func10(Integer)
-> main()
    seq <- {1, 2, 3, 4, 5, 6}
    map {
        map: i <- 1
        -> func(Integer) with (1)
            -> println(Any) with (1)
        map: i <- 2
        -> func(Integer) with (2)
            -> println(Any) with (2)
        map: i <- 3
        -> func(Integer) with (3)
            -> println(Any) with (3)
        map: i <- 4
        -> func(Integer) with (4)
            -> println(Any) with (4)
        map: i <- 5
        -> func(Integer) with (5)
            -> println(Any) with (5)
        map: i <- 6
        -> func(Integer) with (6)
            -> println(Any) with (6)
    }
    -> impCall1(FunCallImp, Integer) with (func10(Integer), 1)
        -> func10(Integer) with (1)
            -> *(Integer, Integer) with (1, 10) = 10
        -> +(Integer, Integer) with (10, 1) = 11
    j <- 11
    -> impCall2(callOf Integer (Integer), Integer) with (func10(Integer), 2)
        -> func10(Integer) with (2)
            -> *(Integer, Integer) with (2, 10) = 20
        -> +(Integer, Integer) with (20, 2) = 22
    j <- 22
    -> impCall1(FunCallImp, Integer) with (func10(Integer), 3)
        -> func10(Integer) with (3)
            -> *(Integer, Integer) with (3, 10) = 30
        -> +(Integer, Integer) with (30, 1) = 31
    j <- 31