int1 <- 1
real1 <- 1.0
bool1 <- true
string1 <- test
seq1 <- {1, 2, 3, 4}
set1 <- {1, 2, 3, 4}
-> main()
    -> type(Integer) with (1) = Integer representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoInteger
    -> println(Any) with (Integer representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoInteger)
    -> type(Real) with (1.0) = Real representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoReal
    -> println(Any) with (Real representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoReal)
    -> type(Boolean) with (true) = Boolean representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoBoolean
    -> println(Any) with (Boolean representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoBoolean)
    -> type(String) with (test) = String representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoString
    -> println(Any) with (String representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoString)
    -> type(Collection) with ({1, 2, 3, 4}) = Sequence representing net.ssehub.easy.instantiation.core.model.vilTypes.Sequence
    -> println(Any) with (Sequence representing net.ssehub.easy.instantiation.core.model.vilTypes.Sequence)
    -> type(Collection) with ({1, 2, 3, 4}) = Set representing net.ssehub.easy.instantiation.core.model.vilTypes.Set
    -> println(Any) with (Set representing net.ssehub.easy.instantiation.core.model.vilTypes.Set)
    -> byName(Configuration, String) with (<config>, tc1) = typeSelectTest::tc1
    -> type(DecisionVariable) with (typeSelectTest::tc1) = TestCompound
    -> println(Any) with (TestCompound)
    -> byName(Configuration, String) with (<config>, tc2) = typeSelectTest::tc2
    -> type(DecisionVariable) with (typeSelectTest::tc2) = SpecialCompound
    -> println(Any) with (SpecialCompound)
    -> byName(Configuration, String) with (<config>, tc3) = typeSelectTest::tc3
    -> type(DecisionVariable) with (typeSelectTest::tc3) = SpecialCompound
    -> println(Any) with (SpecialCompound)
    -> byName(Configuration, String) with (<config>, tc1) = typeSelectTest::tc1
    -> type(DecisionVariable) with (typeSelectTest::tc1) = TestCompound
    -> +(String, Any) with (pre_, TestCompound) = pre_TestCompound
    s1 <- pre_TestCompound
    -> byName(Configuration, String) with (<config>, tc1) = typeSelectTest::tc1
    -> type(DecisionVariable) with (typeSelectTest::tc1) = TestCompound
    -> ==(String, Type) with (TestCompound, TestCompound) = true
    b1 <- true
    -> byName(Configuration, String) with (<config>, tc1) = typeSelectTest::tc1
    -> type(DecisionVariable) with (typeSelectTest::tc1) = TestCompound
    -> ==(Type, String) with (TestCompound, TestCompound) = true
    b2 <- true
    -> byName(Configuration, String) with (<config>, tc1) = typeSelectTest::tc1
    -> type(DecisionVariable) with (typeSelectTest::tc1) = TestCompound
    -> !=(String, Type) with (SpecialCompound, TestCompound) = true
    b3 <- true
    -> byName(Configuration, String) with (<config>, tc1) = typeSelectTest::tc1
    -> type(DecisionVariable) with (typeSelectTest::tc1) = TestCompound
    -> !=(Type, String) with (TestCompound, SpecialCompound) = true
    b4 <- true
    -> byName(Configuration, String) with (<config>, tc1) = typeSelectTest::tc1
    tc1 <- typeSelectTest::tc1
    -> byName(Configuration, String) with (<config>, tc2) = typeSelectTest::tc2
    tc2 <- typeSelectTest::tc2
    -> type(DecisionVariable) with (typeSelectTest::tc1) = TestCompound
    s2 <- TestCompound
    -> ==(String, String) with (TestCompound, TestCompound) = true
    b5 <- true
    -> isKindOf(DecisionVariable, Type) with (typeSelectTest::tc1, typeSelectTest::tc1) = true
    b6 <- true
    -> isTypeOf(DecisionVariable, Type) with (typeSelectTest::tc1, typeSelectTest::tc1) = true
    b7 <- true
    -> isKindOf(DecisionVariable, Type) with (typeSelectTest::tc2, typeSelectTest::tc1) = true
    b8 <- true