seq0 <- {}
-> size(Collection) with ({}) = 0
i_seq0 <- 0
-> includes(Collection, Any) with ({}, 5) = false
i_b0 <- false
seq1 <- {1, 2, 3, 4}
-> size(Collection) with ({1, 2, 3, 4}) = 4
i_s1 <- 4
-> includes(Collection, Any) with ({1, 2, 3, 4}, 5) = false
i_b1 <- false
-> includes(Collection, Any) with ({1, 2, 3, 4}, 3) = true
i_b2 <- true
-> excludes(Collection, Any) with ({1, 2, 3, 4}, 3) = false
i_b3 <- false
-> excludes(Collection, Any) with ({1, 2, 3, 4}, 5) = true
i_b4 <- true
seq2 <- {{1, 2}, {2, 3}, {3, 4}}
-> flatten(Sequence) with ({{1, 2}, {2, 3}, {3, 4}}) = {1, 2, 2, 3, 3, 4}
seq2flat <- {1, 2, 2, 3, 3, 4}
-> *(Integer, Integer) with (1, 2) = 2
-> *(Integer, Integer) with (2, 2) = 4
-> *(Integer, Integer) with (2, 2) = 4
-> *(Integer, Integer) with (3, 2) = 6
-> *(Integer, Integer) with (3, 2) = 6
-> *(Integer, Integer) with (4, 2) = 8
-> collectNested(Sequence, ExpressionEvaluator) with ({{1, 2}, {2, 3}, {3, 4}}, <evaluator>) = {[2, 4], [4, 6], [6, 8]}
seq2collN <- {[2, 4], [4, 6], [6, 8]}
-> *(Integer, Integer) with (1, 2) = 2
-> *(Integer, Integer) with (2, 2) = 4
-> *(Integer, Integer) with (2, 2) = 4
-> *(Integer, Integer) with (3, 2) = 6
-> *(Integer, Integer) with (3, 2) = 6
-> *(Integer, Integer) with (4, 2) = 8
-> collect(Sequence, ExpressionEvaluator) with ({{1, 2}, {2, 3}, {3, 4}}, <evaluator>) = {2, 4, 4, 6, 6, 8}
seq2coll <- {2, 4, 4, 6, 6, 8}
-> size(Collection) with ({{1, 2}, {2, 3}, {3, 4}}) = 3
i_s2 <- 3
seq3 <- {1, 2, 3, 4}
-> equals(Collection, Collection) with ({1, 2, 3, 4}, {1, 2, 3, 4}) = true
i_b5 <- true
-> ==(Collection, Collection) with ({1, 2, 3, 4}, {1, 2, 3, 4}) = true
i_b5e <- true
-> equals(Collection, Collection) with ({1, 2, 3, 4}, {{1, 2}, {2, 3}, {3, 4}}) = false
i_b6 <- false
-> ==(Collection, Collection) with ({1, 2, 3, 4}, {{1, 2}, {2, 3}, {3, 4}}) = false
i_b6e <- false
-> isEmpty(Collection) with ({1, 2, 3, 4}) = false
i_b7 <- false
-> isNotEmpty(Collection) with ({1, 2, 3, 4}) = true
i_b8 <- true
-> notEmpty(Collection) with ({1, 2, 3, 4}) = true
i_b9 <- true
-> get(Sequence, Integer) with ({1, 2, 3, 4}, 1) = 2
i_i1 <- 2
-> [](Sequence, Integer) with ({1, 2, 3, 4}, 2) = 3
i_i2 <- 3
-> toSet(Sequence) with ({1, 2, 3, 4}) = {1, 2, 3, 4}
set1 <- {1, 2, 3, 4}
seq4 <- {1, 2, 2, 3, 4, 5}
-> sum(Collection) with ({1, 2, 2, 3, 4, 5}) = 17
sumInt4 <- 17
-> avg(Collection) with ({1, 2, 2, 3, 4, 5}) = 2.8333333333333335
avgInt4 <- 2.8333333333333335
-> product(Collection) with ({1, 2, 2, 3, 4, 5}) = 240
prodInt4 <- 240
-> min(Collection) with ({1, 2, 2, 3, 4, 5}) = 1
minInt4 <- 1
-> max(Collection) with ({1, 2, 2, 3, 4, 5}) = 5
maxInt4 <- 5
-> toSet(Sequence) with ({1, 2, 2, 3, 4, 5}) = {1, 2, 3, 4, 5}
set2 <- {1, 2, 3, 4, 5}
-> toSequence(Set) with ({1, 2, 3, 4, 5}) = {1, 2, 3, 4, 5}
seq7 <- {1, 2, 3, 4, 5}
-> selectByType(Sequence, Type) with ({1, 2, 3, 4}, Integer representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoInteger) = {1, 2, 3, 4}
seq8 <- {1, 2, 3, 4}
-> selectByKind(Sequence, Type) with ({1, 2, 3, 4}, Integer representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoInteger) = {1, 2, 3, 4}
seq8_1 <- {1, 2, 3, 4}
-> selectByType(Sequence, Type) with ({1, 2, 3, 4}, Real representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoReal) = {}
seq9 <- {}
-> selectByKind(Sequence, Type) with ({1, 2, 3, 4}, Real representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoReal) = {}
seq9_1 <- {}
-> excluding(Sequence, Collection) with ({1, 2, 2, 3, 4, 5}, {1, 2, 3, 4}) = {5}
seq10 <- {5}
-> excluding(Sequence, Collection) with ({1, 2, 2, 3, 4, 5}, {1, 2, 3, 4}) = {5}
seq11 <- {5}
-> >(Integer, Integer) with (1, 4) = false
-> >(Integer, Integer) with (2, 4) = false
-> >(Integer, Integer) with (2, 4) = false
-> >(Integer, Integer) with (3, 4) = false
-> >(Integer, Integer) with (4, 4) = false
-> >(Integer, Integer) with (5, 4) = true
-> select(Sequence, ExpressionEvaluator) with ({1, 2, 2, 3, 4, 5}, <evaluator>) = {5}
seq12 <- {5}
-> reverse(Sequence) with ({1, 2, 2, 3, 4, 5}) = {1, 2, 2, 3, 4, 5}
seq4r1 <- {1, 2, 2, 3, 4, 5}
-> revert(Sequence) with ({1, 2, 2, 3, 4, 5}) = {1, 2, 2, 3, 4, 5}
seq4r2 <- {1, 2, 2, 3, 4, 5}
-> >(Integer, Integer) with (1, 4) = false
-> >(Integer, Integer) with (2, 4) = false
-> >(Integer, Integer) with (2, 4) = false
-> >(Integer, Integer) with (3, 4) = false
-> >(Integer, Integer) with (4, 4) = false
-> >(Integer, Integer) with (5, 4) = true
-> any(Collection, ExpressionEvaluator) with ({1, 2, 2, 3, 4, 5}, <evaluator>) = 5
seq4any1 <- 5
-> ==(Integer, Integer) with (1, 2) = false
-> ==(Integer, Integer) with (2, 2) = true
-> any(Collection, ExpressionEvaluator) with ({1, 2, 2, 3, 4, 5}, <evaluator>) = 2
seq4any2 <- 2
-> >(Integer, Integer) with (1, 4) = false
-> >(Integer, Integer) with (2, 4) = false
-> >(Integer, Integer) with (2, 4) = false
-> >(Integer, Integer) with (3, 4) = false
-> >(Integer, Integer) with (4, 4) = false
-> >(Integer, Integer) with (5, 4) = true
-> one(Collection, ExpressionEvaluator) with ({1, 2, 2, 3, 4, 5}, <evaluator>) = 5
seq4one1 <- 5
-> ==(Integer, Integer) with (1, 2) = false
-> ==(Integer, Integer) with (2, 2) = true
-> ==(Integer, Integer) with (2, 2) = true
-> ==(Integer, Integer) with (3, 2) = false
-> ==(Integer, Integer) with (4, 2) = false
-> ==(Integer, Integer) with (5, 2) = false
-> one(Collection, ExpressionEvaluator) with ({1, 2, 2, 3, 4, 5}, <evaluator>) = null
seq4one2 <- null
-> >=(Integer, Integer) with (1, 0) = true
-> >=(Integer, Integer) with (2, 0) = true
-> >=(Integer, Integer) with (2, 0) = true
-> >=(Integer, Integer) with (3, 0) = true
-> >=(Integer, Integer) with (4, 0) = true
-> >=(Integer, Integer) with (5, 0) = true
-> forAll(Collection, ExpressionEvaluator) with ({1, 2, 2, 3, 4, 5}, <evaluator>) = true
seq4all1 <- true
-> >=(Integer, Integer) with (1, 4) = false
-> >=(Integer, Integer) with (2, 4) = false
-> >=(Integer, Integer) with (2, 4) = false
-> >=(Integer, Integer) with (3, 4) = false
-> >=(Integer, Integer) with (4, 4) = true
-> >=(Integer, Integer) with (5, 4) = true
-> forAll(Collection, ExpressionEvaluator) with ({1, 2, 2, 3, 4, 5}, <evaluator>) = false
seq4all2 <- false
-> >=(Integer, Integer) with (1, 0) = true
-> exists(Collection, ExpressionEvaluator) with ({1, 2, 2, 3, 4, 5}, <evaluator>) = true
seq4exists1 <- true
-> <(Integer, Integer) with (1, 0) = false
-> <(Integer, Integer) with (2, 0) = false
-> <(Integer, Integer) with (2, 0) = false
-> <(Integer, Integer) with (3, 0) = false
-> <(Integer, Integer) with (4, 0) = false
-> <(Integer, Integer) with (5, 0) = false
-> forAll(Collection, ExpressionEvaluator) with ({1, 2, 2, 3, 4, 5}, <evaluator>) = false
seq4exists2 <- false
-> +(Integer, Integer) with (1, 1) = 2
-> +(Integer, Integer) with (2, 1) = 3
-> +(Integer, Integer) with (2, 1) = 3
-> +(Integer, Integer) with (3, 1) = 4
-> +(Integer, Integer) with (4, 1) = 5
-> +(Integer, Integer) with (5, 1) = 6
-> isUnique(Collection, ExpressionEvaluator) with ({1, 2, 2, 3, 4, 5}, <evaluator>) = false
seq4unique <- false
-> +(Integer, Integer) with (1, 1) = 2
-> +(Integer, Integer) with (2, 1) = 3
-> +(Integer, Integer) with (3, 1) = 4
-> +(Integer, Integer) with (4, 1) = 5
-> isUnique(Collection, ExpressionEvaluator) with ({1, 2, 3, 4}, <evaluator>) = true
seq3unique <- true
-> selectByType(Set, Type) with ({1, 2, 3, 4, 5}, Integer representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoInteger) = {1, 2, 3, 4, 5}
set3 <- {1, 2, 3, 4, 5}
-> selectByKind(Set, Type) with ({1, 2, 3, 4, 5}, Integer representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoInteger) = {1, 2, 3, 4, 5}
set3_1 <- {1, 2, 3, 4, 5}
-> selectByType(Set, Type) with ({1, 2, 3, 4, 5}, Real representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoReal) = {}
set4 <- {}
-> selectByKind(Set, Type) with ({1, 2, 3, 4, 5}, Real representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoReal) = {}
set4_1 <- {}
-> typeSelect(Set, Type) with ({1, 2, 3, 4, 5}, Real representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoReal) = {}
set4_2 <- {}
-> typeReject(Set, Type) with ({1, 2, 3, 4, 5}, Real representing net.ssehub.easy.instantiation.core.model.vilTypes.PseudoReal) = {1, 2, 3, 4, 5}
set4_3 <- {1, 2, 3, 4, 5}
-> excluding(Set, Collection) with ({1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}) = {}
set5 <- {}
-> excluding(Set, Collection) with ({1, 2, 3, 4, 5}, {1, 2, 3, 4}) = {5}
set6 <- {5}
-> >(Integer, Integer) with (1, 4) = false
-> >(Integer, Integer) with (2, 4) = false
-> >(Integer, Integer) with (3, 4) = false
-> >(Integer, Integer) with (4, 4) = false
-> >(Integer, Integer) with (5, 4) = true
-> select(Set, ExpressionEvaluator) with ({1, 2, 3, 4, 5}, <evaluator>) = {5}
set7 <- {5}
-> >(Integer, Integer) with (1, 4) = false
-> >(Integer, Integer) with (2, 4) = false
-> >(Integer, Integer) with (3, 4) = false
-> >(Integer, Integer) with (4, 4) = false
-> >(Integer, Integer) with (5, 4) = true
-> reject(Set, ExpressionEvaluator) with ({1, 2, 3, 4, 5}, <evaluator>) = {1, 2, 3, 4}
set8 <- {1, 2, 3, 4}
seq13 <- {1, 2, 4, 5, 6, 7}
-> sortAlpha(Sequence) with ({1, 2, 4, 5, 6, 7}) = {1, 2, 4, 5, 6, 7}
seq14 <- {1, 2, 4, 5, 6, 7}
-> sum(Collection) with ({1, 2, 4, 5, 6, 7}) = 25
sumInt13 <- 25
-> avg(Collection) with ({1, 2, 4, 5, 6, 7}) = 4.166666666666667
avgInt13 <- 4.166666666666667
-> product(Collection) with ({1, 2, 4, 5, 6, 7}) = 1680
prodInt13 <- 1680
-> min(Collection) with ({1, 2, 4, 5, 6, 7}) = 1
minInt13 <- 1
-> max(Collection) with ({1, 2, 4, 5, 6, 7}) = 7
maxInt13 <- 7
-> includesAll(Collection, Collection) with ({1, 2, 2, 3, 4, 5}, {1, 2, 3, 4}) = true
incAll1 <- true
-> includesAll(Collection, Collection) with ({1, 2, 2, 3, 4, 5}, {1, 2, 4, 5, 6, 7}) = false
incAll2 <- false
-> toSet(Sequence) with ({1, 2, 2, 3, 4, 5}) = {1, 2, 3, 4, 5}
-> includesAll(Collection, Collection) with ({1, 2, 3, 4, 5}, {1, 2, 3, 4}) = true
incAll3 <- true
-> toSet(Sequence) with ({1, 2, 2, 3, 4, 5}) = {1, 2, 3, 4, 5}
-> toSet(Sequence) with ({1, 2, 4, 5, 6, 7}) = {1, 2, 4, 5, 6, 7}
-> includesAll(Collection, Collection) with ({1, 2, 3, 4, 5}, {1, 2, 4, 5, 6, 7}) = false
incAll4 <- false
seq15 <- {11, 12, 13, 14}
-> excludesAll(Collection, Collection) with ({1, 2, 2, 3, 4, 5}, {11, 12, 13, 14}) = true
exlAll5 <- true
-> excludesAll(Collection, Collection) with ({1, 2, 2, 3, 4, 5}, {1, 2, 4, 5, 6, 7}) = false
exlAll6 <- false
-> toSet(Sequence) with ({1, 2, 2, 3, 4, 5}) = {1, 2, 3, 4, 5}
-> excludesAll(Collection, Collection) with ({1, 2, 3, 4, 5}, {11, 12, 13, 14}) = true
exlAll7 <- true
-> toSet(Sequence) with ({1, 2, 2, 3, 4, 5}) = {1, 2, 3, 4, 5}
-> toSet(Sequence) with ({1, 2, 4, 5, 6, 7}) = {1, 2, 4, 5, 6, 7}
-> excludesAll(Collection, Collection) with ({1, 2, 3, 4, 5}, {1, 2, 4, 5, 6, 7}) = false
exlAll8 <- false
-> toSet(Sequence) with ({1, 2, 4, 5, 6, 7}) = {1, 2, 4, 5, 6, 7}
-> -(Set, Set) with ({1, 2, 3, 4}, {1, 2, 4, 5, 6, 7}) = {3}
set9 <- {3}
-> toSet(Sequence) with ({1, 2, 4, 5, 6, 7}) = {1, 2, 4, 5, 6, 7}
-> symmetricDifference(Set, Set) with ({1, 2, 3, 4}, {1, 2, 4, 5, 6, 7}) = {3, 5, 6, 7}
set10 <- {3, 5, 6, 7}
-> union(Sequence, Sequence) with ({1, 2, 3, 4}, {1, 2, 4, 5, 6, 7}) = {1, 1, 2, 2, 3, 4, 4, 5, 6, 7}
seq16 <- {1, 1, 2, 2, 3, 4, 4, 5, 6, 7}
-> append(Sequence, Any) with ({1, 2, 3, 4}, 27) = {1, 2, 27, 3, 4}
seq17 <- {1, 2, 27, 3, 4}
-> prepend(Sequence, Any) with ({1, 2, 3, 4}, 27) = {1, 2, 27, 3, 4}
seq18 <- {1, 2, 27, 3, 4}
-> subSequence(Sequence, Integer, Integer) with ({1, 2, 3, 4}, 1, 3) = {2, 3, 4}
seq19 <- {2, 3, 4}
-> hasDuplicates(Sequence) with ({1, 2, 3, 4}) = false
seq1Unique <- false
-> hasDuplicates(Sequence) with ({1, 2, 2, 3, 4, 5}) = true
seq4Unique <- true
-> overlaps(Sequence, Sequence) with ({1, 2, 3, 4}, {1, 2, 2, 3, 4, 5}) = true
seq1seq4Overlaps <- true
-> overlaps(Sequence, Sequence) with ({1, 2, 2, 3, 4, 5}, {1, 2, 3, 4}) = true
seq4seq1Overlaps <- true
seq20 <- {1, 2, 3, 4, 5}
-> isSubsequenceOf(Sequence, Sequence) with ({1, 2, 3, 4}, {1, 2, 2, 3, 4, 5}) = true
seq1seq4SubSeq <- true
-> isSubsequenceOf(Sequence, Sequence) with ({1, 2, 2, 3, 4, 5}, {1, 2, 3, 4}) = false
seq4seq1SubSeq <- false
-> isSubsequenceOf(Sequence, Sequence) with ({1, 2, 3, 4}, {1, 2, 3, 4, 5}) = true
seq1seq20SubSeq <- true
-> isSubsequenceOf(Sequence, Sequence) with ({1, 2, 3, 4, 5}, {1, 2, 3, 4}) = false
seq20seq1SubSeq <- false
-> main()