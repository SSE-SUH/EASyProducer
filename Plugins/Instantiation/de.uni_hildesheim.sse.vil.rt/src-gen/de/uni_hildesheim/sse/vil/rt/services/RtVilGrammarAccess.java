/*
* generated by Xtext
*/
package de.uni_hildesheim.sse.vil.rt.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.uni_hildesheim.sse.services.VilBuildLanguageGrammarAccess;
import de.uni_hildesheim.sse.vil.expressions.services.ExpressionDslGrammarAccess;

@Singleton
public class RtVilGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ImplementationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementationUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cRequiresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequiresRequireParserRuleCall_2_0 = (RuleCall)cRequiresAssignment_2.eContents().get(0);
		private final Assignment cScriptsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScriptsLanguageUnitParserRuleCall_3_0 = (RuleCall)cScriptsAssignment_3.eContents().get(0);
		
		//ImplementationUnit:
		//	{ImplementationUnit} imports+=Import* requires+=Require* scripts+=LanguageUnit*;
		public ParserRule getRule() { return rule; }

		//{ImplementationUnit} imports+=Import* requires+=Require* scripts+=LanguageUnit*
		public Group getGroup() { return cGroup; }

		//{ImplementationUnit}
		public Action getImplementationUnitAction_0() { return cImplementationUnitAction_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//requires+=Require*
		public Assignment getRequiresAssignment_2() { return cRequiresAssignment_2; }

		//Require
		public RuleCall getRequiresRequireParserRuleCall_2_0() { return cRequiresRequireParserRuleCall_2_0; }

		//scripts+=LanguageUnit*
		public Assignment getScriptsAssignment_3() { return cScriptsAssignment_3; }

		//LanguageUnit
		public RuleCall getScriptsLanguageUnitParserRuleCall_3_0() { return cScriptsLanguageUnitParserRuleCall_3_0; }
	}

	public class LanguageUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdvicesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdvicesAdviceParserRuleCall_0_0 = (RuleCall)cAdvicesAssignment_0.eContents().get(0);
		private final Keyword cRtVilScriptKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamParameterListParserRuleCall_4_0 = (RuleCall)cParamAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParentScriptParentDeclParserRuleCall_6_0 = (RuleCall)cParentAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cVersionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cVersionVersionStmtParserRuleCall_8_0 = (RuleCall)cVersionAssignment_8.eContents().get(0);
		private final Assignment cRtContentsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRtContentsRtContentsParserRuleCall_9_0 = (RuleCall)cRtContentsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// do not rename - required for reuse
		//LanguageUnit:
		//	advices+=Advice* "rtVilScript" name=Identifier "(" param=ParameterList? ")" parent=ScriptParentDecl? "{"
		//	version=VersionStmt? rtContents=rtContents "}" ";"?;
		public ParserRule getRule() { return rule; }

		//advices+=Advice* "rtVilScript" name=Identifier "(" param=ParameterList? ")" parent=ScriptParentDecl? "{"
		//version=VersionStmt? rtContents=rtContents "}" ";"?
		public Group getGroup() { return cGroup; }

		//advices+=Advice*
		public Assignment getAdvicesAssignment_0() { return cAdvicesAssignment_0; }

		//Advice
		public RuleCall getAdvicesAdviceParserRuleCall_0_0() { return cAdvicesAdviceParserRuleCall_0_0; }

		//"rtVilScript"
		public Keyword getRtVilScriptKeyword_1() { return cRtVilScriptKeyword_1; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//param=ParameterList?
		public Assignment getParamAssignment_4() { return cParamAssignment_4; }

		//ParameterList
		public RuleCall getParamParameterListParserRuleCall_4_0() { return cParamParameterListParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//parent=ScriptParentDecl?
		public Assignment getParentAssignment_6() { return cParentAssignment_6; }

		//ScriptParentDecl
		public RuleCall getParentScriptParentDeclParserRuleCall_6_0() { return cParentScriptParentDeclParserRuleCall_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//version=VersionStmt?
		public Assignment getVersionAssignment_8() { return cVersionAssignment_8; }

		//VersionStmt
		public RuleCall getVersionVersionStmtParserRuleCall_8_0() { return cVersionVersionStmtParserRuleCall_8_0; }

		//rtContents=rtContents
		public Assignment getRtContentsAssignment_9() { return cRtContentsAssignment_9; }

		//rtContents
		public RuleCall getRtContentsRtContentsParserRuleCall_9_0() { return cRtContentsRtContentsParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }

		//";"?
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
	}

	public class RtContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rtContents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRtContentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cElementsGlobalVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cElementsRuleDeclarationParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cElementsStrategyDeclarationParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		private final Assignment cElementsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cElementsTacticDeclarationParserRuleCall_1_3_0 = (RuleCall)cElementsAssignment_1_3.eContents().get(0);
		private final Assignment cElementsAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cElementsTypeDefParserRuleCall_1_4_0 = (RuleCall)cElementsAssignment_1_4.eContents().get(0);
		
		//rtContents: // ensure object creation
		//	{rtContents} (elements+=GlobalVariableDeclaration | elements+=RuleDeclaration | elements+=StrategyDeclaration |
		//	elements+=TacticDeclaration | elements+=TypeDef)*;
		public ParserRule getRule() { return rule; }

		//// ensure object creation
		//{rtContents} (elements+=GlobalVariableDeclaration | elements+=RuleDeclaration | elements+=StrategyDeclaration |
		//elements+=TacticDeclaration | elements+=TypeDef)*
		public Group getGroup() { return cGroup; }

		//// ensure object creation
		//{rtContents}
		public Action getRtContentsAction_0() { return cRtContentsAction_0; }

		//(elements+=GlobalVariableDeclaration | elements+=RuleDeclaration | elements+=StrategyDeclaration |
		//elements+=TacticDeclaration | elements+=TypeDef)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//elements+=GlobalVariableDeclaration
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }

		//GlobalVariableDeclaration
		public RuleCall getElementsGlobalVariableDeclarationParserRuleCall_1_0_0() { return cElementsGlobalVariableDeclarationParserRuleCall_1_0_0; }

		//elements+=RuleDeclaration
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//RuleDeclaration
		public RuleCall getElementsRuleDeclarationParserRuleCall_1_1_0() { return cElementsRuleDeclarationParserRuleCall_1_1_0; }

		//elements+=StrategyDeclaration
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }

		//StrategyDeclaration
		public RuleCall getElementsStrategyDeclarationParserRuleCall_1_2_0() { return cElementsStrategyDeclarationParserRuleCall_1_2_0; }

		//elements+=TacticDeclaration
		public Assignment getElementsAssignment_1_3() { return cElementsAssignment_1_3; }

		//TacticDeclaration
		public RuleCall getElementsTacticDeclarationParserRuleCall_1_3_0() { return cElementsTacticDeclarationParserRuleCall_1_3_0; }

		//elements+=TypeDef
		public Assignment getElementsAssignment_1_4() { return cElementsAssignment_1_4; }

		//TypeDef
		public RuleCall getElementsTypeDefParserRuleCall_1_4_0() { return cElementsTypeDefParserRuleCall_1_4_0; }
	}

	public class GlobalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPersistentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPersistentPersistentKeyword_0_0 = (Keyword)cPersistentAssignment_0.eContents().get(0);
		private final Assignment cVarDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarDeclVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVarDeclAssignment_1.eContents().get(0);
		
		//GlobalVariableDeclaration:
		//	persistent="persistent"? varDecl=VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//persistent="persistent"? varDecl=VariableDeclaration
		public Group getGroup() { return cGroup; }

		//persistent="persistent"?
		public Assignment getPersistentAssignment_0() { return cPersistentAssignment_0; }

		//"persistent"
		public Keyword getPersistentPersistentKeyword_0_0() { return cPersistentPersistentKeyword_0_0; }

		//varDecl=VariableDeclaration
		public Assignment getVarDeclAssignment_1() { return cVarDeclAssignment_1; }

		//VariableDeclaration
		public RuleCall getVarDeclVariableDeclarationParserRuleCall_1_0() { return cVarDeclVariableDeclarationParserRuleCall_1_0; }
	}

	public class StrategyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StrategyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStrategyDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStrategyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamListParameterListParserRuleCall_4_0 = (RuleCall)cParamListAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConditionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConditionsRuleConditionsParserRuleCall_7_0 = (RuleCall)cConditionsAssignment_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cVarDeclsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cVarDeclsVariableDeclarationParserRuleCall_9_0 = (RuleCall)cVarDeclsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cObjectiveKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cObjectiveAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cObjectiveExpressionParserRuleCall_10_1_0 = (RuleCall)cObjectiveAssignment_10_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cBreakdownKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cWeightingAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cWeightingWeightingStatementParserRuleCall_11_2_0 = (RuleCall)cWeightingAssignment_11_2.eContents().get(0);
		private final Assignment cBreakdownAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cBreakdownBreakdownElementParserRuleCall_11_3_0 = (RuleCall)cBreakdownAssignment_11_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Assignment cPostAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPostRuleElementParserRuleCall_12_0 = (RuleCall)cPostAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//StrategyDeclaration:
		//	{StrategyDeclaration} "strategy" name=Identifier "(" paramList=ParameterList? ")" "=" conditions=RuleConditions? "{"
		//	varDecls+=VariableDeclaration* ("objective" objective=Expression ";")? ("breakdown" "{" weighting=WeightingStatement?
		//	breakdown+=BreakdownElement+ "}") post+=RuleElement* "}" ";"?;
		public ParserRule getRule() { return rule; }

		//{StrategyDeclaration} "strategy" name=Identifier "(" paramList=ParameterList? ")" "=" conditions=RuleConditions? "{"
		//varDecls+=VariableDeclaration* ("objective" objective=Expression ";")? ("breakdown" "{" weighting=WeightingStatement?
		//breakdown+=BreakdownElement+ "}") post+=RuleElement* "}" ";"?
		public Group getGroup() { return cGroup; }

		//{StrategyDeclaration}
		public Action getStrategyDeclarationAction_0() { return cStrategyDeclarationAction_0; }

		//"strategy"
		public Keyword getStrategyKeyword_1() { return cStrategyKeyword_1; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//paramList=ParameterList?
		public Assignment getParamListAssignment_4() { return cParamListAssignment_4; }

		//ParameterList
		public RuleCall getParamListParameterListParserRuleCall_4_0() { return cParamListParameterListParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//conditions=RuleConditions?
		public Assignment getConditionsAssignment_7() { return cConditionsAssignment_7; }

		//RuleConditions
		public RuleCall getConditionsRuleConditionsParserRuleCall_7_0() { return cConditionsRuleConditionsParserRuleCall_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//varDecls+=VariableDeclaration*
		public Assignment getVarDeclsAssignment_9() { return cVarDeclsAssignment_9; }

		//VariableDeclaration
		public RuleCall getVarDeclsVariableDeclarationParserRuleCall_9_0() { return cVarDeclsVariableDeclarationParserRuleCall_9_0; }

		//("objective" objective=Expression ";")?
		public Group getGroup_10() { return cGroup_10; }

		//"objective"
		public Keyword getObjectiveKeyword_10_0() { return cObjectiveKeyword_10_0; }

		//objective=Expression
		public Assignment getObjectiveAssignment_10_1() { return cObjectiveAssignment_10_1; }

		//Expression
		public RuleCall getObjectiveExpressionParserRuleCall_10_1_0() { return cObjectiveExpressionParserRuleCall_10_1_0; }

		//";"
		public Keyword getSemicolonKeyword_10_2() { return cSemicolonKeyword_10_2; }

		//"breakdown" "{" weighting=WeightingStatement? breakdown+=BreakdownElement+ "}"
		public Group getGroup_11() { return cGroup_11; }

		//"breakdown"
		public Keyword getBreakdownKeyword_11_0() { return cBreakdownKeyword_11_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11_1() { return cLeftCurlyBracketKeyword_11_1; }

		//weighting=WeightingStatement?
		public Assignment getWeightingAssignment_11_2() { return cWeightingAssignment_11_2; }

		//WeightingStatement
		public RuleCall getWeightingWeightingStatementParserRuleCall_11_2_0() { return cWeightingWeightingStatementParserRuleCall_11_2_0; }

		//breakdown+=BreakdownElement+
		public Assignment getBreakdownAssignment_11_3() { return cBreakdownAssignment_11_3; }

		//BreakdownElement
		public RuleCall getBreakdownBreakdownElementParserRuleCall_11_3_0() { return cBreakdownBreakdownElementParserRuleCall_11_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11_4() { return cRightCurlyBracketKeyword_11_4; }

		//post+=RuleElement*
		public Assignment getPostAssignment_12() { return cPostAssignment_12; }

		//RuleElement
		public RuleCall getPostRuleElementParserRuleCall_12_0() { return cPostRuleElementParserRuleCall_12_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }

		//";"?
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
	}

	public class BreakdownElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakdownElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarDeclAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarDeclVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVarDeclAssignment_0.eContents().get(0);
		private final Assignment cExprStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprStmtExpressionStatementParserRuleCall_1_0 = (RuleCall)cExprStmtAssignment_1.eContents().get(0);
		private final Assignment cBreakdownStmtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBreakdownStmtBreakdownStatementParserRuleCall_2_0 = (RuleCall)cBreakdownStmtAssignment_2.eContents().get(0);
		
		//BreakdownElement:
		//	varDecl=VariableDeclaration | exprStmt=ExpressionStatement | breakdownStmt=BreakdownStatement;
		public ParserRule getRule() { return rule; }

		//varDecl=VariableDeclaration | exprStmt=ExpressionStatement | breakdownStmt=BreakdownStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//varDecl=VariableDeclaration
		public Assignment getVarDeclAssignment_0() { return cVarDeclAssignment_0; }

		//VariableDeclaration
		public RuleCall getVarDeclVariableDeclarationParserRuleCall_0_0() { return cVarDeclVariableDeclarationParserRuleCall_0_0; }

		//exprStmt=ExpressionStatement
		public Assignment getExprStmtAssignment_1() { return cExprStmtAssignment_1; }

		//ExpressionStatement
		public RuleCall getExprStmtExpressionStatementParserRuleCall_1_0() { return cExprStmtExpressionStatementParserRuleCall_1_0; }

		//breakdownStmt=BreakdownStatement
		public Assignment getBreakdownStmtAssignment_2() { return cBreakdownStmtAssignment_2; }

		//BreakdownStatement
		public RuleCall getBreakdownStmtBreakdownStatementParserRuleCall_2_0() { return cBreakdownStmtBreakdownStatementParserRuleCall_2_0; }
	}

	public class WeightingStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeightingStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeightingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExpressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WeightingStatement:
		//	"weighting" "(" name=Identifier ":" expr=Expression ")" ";";
		public ParserRule getRule() { return rule; }

		//"weighting" "(" name=Identifier ":" expr=Expression ")" ";"
		public Group getGroup() { return cGroup; }

		//"weighting"
		public Keyword getWeightingKeyword_0() { return cWeightingKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//expr=Expression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_4_0() { return cExprExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class BreakdownStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakdownStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeStrategyKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeTacticKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGuardAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGuardLogicalExpressionParserRuleCall_1_1_0 = (RuleCall)cGuardAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedPrefixParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamArgumentListParserRuleCall_4_0 = (RuleCall)cParamAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cPartAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cPartBreakdownWithPartParserRuleCall_6_2_0 = (RuleCall)cPartAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cPartAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cPartBreakdownWithPartParserRuleCall_6_3_1_0 = (RuleCall)cPartAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommercialAtKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cTimeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cTimeExpressionParserRuleCall_7_1_0 = (RuleCall)cTimeAssignment_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BreakdownStatement:
		//	type=("strategy" | "tactic") ("(" guard=LogicalExpression ")")? name=QualifiedPrefix "(" param=ArgumentList? ")"
		//	("with" "(" part+=BreakdownWithPart ("," part+=BreakdownWithPart) ")")? ("@" time=Expression)? ";";
		public ParserRule getRule() { return rule; }

		//type=("strategy" | "tactic") ("(" guard=LogicalExpression ")")? name=QualifiedPrefix "(" param=ArgumentList? ")" ("with"
		//"(" part+=BreakdownWithPart ("," part+=BreakdownWithPart) ")")? ("@" time=Expression)? ";"
		public Group getGroup() { return cGroup; }

		//type=("strategy" | "tactic")
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"strategy" | "tactic"
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }

		//"strategy"
		public Keyword getTypeStrategyKeyword_0_0_0() { return cTypeStrategyKeyword_0_0_0; }

		//"tactic"
		public Keyword getTypeTacticKeyword_0_0_1() { return cTypeTacticKeyword_0_0_1; }

		//("(" guard=LogicalExpression ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//guard=LogicalExpression
		public Assignment getGuardAssignment_1_1() { return cGuardAssignment_1_1; }

		//LogicalExpression
		public RuleCall getGuardLogicalExpressionParserRuleCall_1_1_0() { return cGuardLogicalExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//name=QualifiedPrefix
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedPrefix
		public RuleCall getNameQualifiedPrefixParserRuleCall_2_0() { return cNameQualifiedPrefixParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//param=ArgumentList?
		public Assignment getParamAssignment_4() { return cParamAssignment_4; }

		//ArgumentList
		public RuleCall getParamArgumentListParserRuleCall_4_0() { return cParamArgumentListParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("with" "(" part+=BreakdownWithPart ("," part+=BreakdownWithPart) ")")?
		public Group getGroup_6() { return cGroup_6; }

		//"with"
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//part+=BreakdownWithPart
		public Assignment getPartAssignment_6_2() { return cPartAssignment_6_2; }

		//BreakdownWithPart
		public RuleCall getPartBreakdownWithPartParserRuleCall_6_2_0() { return cPartBreakdownWithPartParserRuleCall_6_2_0; }

		//"," part+=BreakdownWithPart
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//part+=BreakdownWithPart
		public Assignment getPartAssignment_6_3_1() { return cPartAssignment_6_3_1; }

		//BreakdownWithPart
		public RuleCall getPartBreakdownWithPartParserRuleCall_6_3_1_0() { return cPartBreakdownWithPartParserRuleCall_6_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }

		//("@" time=Expression)?
		public Group getGroup_7() { return cGroup_7; }

		//"@"
		public Keyword getCommercialAtKeyword_7_0() { return cCommercialAtKeyword_7_0; }

		//time=Expression
		public Assignment getTimeAssignment_7_1() { return cTimeAssignment_7_1; }

		//Expression
		public RuleCall getTimeExpressionParserRuleCall_7_1_0() { return cTimeExpressionParserRuleCall_7_1_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class BreakdownWithPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakdownWithPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//BreakdownWithPart:
		//	name=Identifier "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//name=Identifier "=" value=Expression
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class TacticDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TacticDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTacticDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTacticKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamListParameterListParserRuleCall_4_0 = (RuleCall)cParamListAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConditionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConditionsRuleConditionsParserRuleCall_7_0 = (RuleCall)cConditionsAssignment_7.eContents().get(0);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockRuleElementBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//TacticDeclaration:
		//	{TacticDeclaration} "tactic" name=Identifier "(" paramList=ParameterList? ")" "=" conditions=RuleConditions?
		//	block=RuleElementBlock ";"?;
		public ParserRule getRule() { return rule; }

		//{TacticDeclaration} "tactic" name=Identifier "(" paramList=ParameterList? ")" "=" conditions=RuleConditions?
		//block=RuleElementBlock ";"?
		public Group getGroup() { return cGroup; }

		//{TacticDeclaration}
		public Action getTacticDeclarationAction_0() { return cTacticDeclarationAction_0; }

		//"tactic"
		public Keyword getTacticKeyword_1() { return cTacticKeyword_1; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//paramList=ParameterList?
		public Assignment getParamListAssignment_4() { return cParamListAssignment_4; }

		//ParameterList
		public RuleCall getParamListParameterListParserRuleCall_4_0() { return cParamListParameterListParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//conditions=RuleConditions?
		public Assignment getConditionsAssignment_7() { return cConditionsAssignment_7; }

		//RuleConditions
		public RuleCall getConditionsRuleConditionsParserRuleCall_7_0() { return cConditionsRuleConditionsParserRuleCall_7_0; }

		//block=RuleElementBlock
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }

		//RuleElementBlock
		public RuleCall getBlockRuleElementBlockParserRuleCall_8_0() { return cBlockRuleElementBlockParserRuleCall_8_0; }

		//";"?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	
	
	private ImplementationUnitElements pImplementationUnit;
	private LanguageUnitElements pLanguageUnit;
	private RtContentsElements pRtContents;
	private GlobalVariableDeclarationElements pGlobalVariableDeclaration;
	private StrategyDeclarationElements pStrategyDeclaration;
	private BreakdownElementElements pBreakdownElement;
	private WeightingStatementElements pWeightingStatement;
	private BreakdownStatementElements pBreakdownStatement;
	private BreakdownWithPartElements pBreakdownWithPart;
	private TacticDeclarationElements pTacticDeclaration;
	
	private final Grammar grammar;

	private VilBuildLanguageGrammarAccess gaVilBuildLanguage;

	@Inject
	public RtVilGrammarAccess(GrammarProvider grammarProvider,
		VilBuildLanguageGrammarAccess gaVilBuildLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaVilBuildLanguage = gaVilBuildLanguage;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_hildesheim.sse.vil.rt.RtVil".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public VilBuildLanguageGrammarAccess getVilBuildLanguageGrammarAccess() {
		return gaVilBuildLanguage;
	}

	
	//ImplementationUnit:
	//	{ImplementationUnit} imports+=Import* requires+=Require* scripts+=LanguageUnit*;
	public ImplementationUnitElements getImplementationUnitAccess() {
		return (pImplementationUnit != null) ? pImplementationUnit : (pImplementationUnit = new ImplementationUnitElements());
	}
	
	public ParserRule getImplementationUnitRule() {
		return getImplementationUnitAccess().getRule();
	}

	//// do not rename - required for reuse
	//LanguageUnit:
	//	advices+=Advice* "rtVilScript" name=Identifier "(" param=ParameterList? ")" parent=ScriptParentDecl? "{"
	//	version=VersionStmt? rtContents=rtContents "}" ";"?;
	public LanguageUnitElements getLanguageUnitAccess() {
		return (pLanguageUnit != null) ? pLanguageUnit : (pLanguageUnit = new LanguageUnitElements());
	}
	
	public ParserRule getLanguageUnitRule() {
		return getLanguageUnitAccess().getRule();
	}

	//rtContents: // ensure object creation
	//	{rtContents} (elements+=GlobalVariableDeclaration | elements+=RuleDeclaration | elements+=StrategyDeclaration |
	//	elements+=TacticDeclaration | elements+=TypeDef)*;
	public RtContentsElements getRtContentsAccess() {
		return (pRtContents != null) ? pRtContents : (pRtContents = new RtContentsElements());
	}
	
	public ParserRule getRtContentsRule() {
		return getRtContentsAccess().getRule();
	}

	//GlobalVariableDeclaration:
	//	persistent="persistent"? varDecl=VariableDeclaration;
	public GlobalVariableDeclarationElements getGlobalVariableDeclarationAccess() {
		return (pGlobalVariableDeclaration != null) ? pGlobalVariableDeclaration : (pGlobalVariableDeclaration = new GlobalVariableDeclarationElements());
	}
	
	public ParserRule getGlobalVariableDeclarationRule() {
		return getGlobalVariableDeclarationAccess().getRule();
	}

	//StrategyDeclaration:
	//	{StrategyDeclaration} "strategy" name=Identifier "(" paramList=ParameterList? ")" "=" conditions=RuleConditions? "{"
	//	varDecls+=VariableDeclaration* ("objective" objective=Expression ";")? ("breakdown" "{" weighting=WeightingStatement?
	//	breakdown+=BreakdownElement+ "}") post+=RuleElement* "}" ";"?;
	public StrategyDeclarationElements getStrategyDeclarationAccess() {
		return (pStrategyDeclaration != null) ? pStrategyDeclaration : (pStrategyDeclaration = new StrategyDeclarationElements());
	}
	
	public ParserRule getStrategyDeclarationRule() {
		return getStrategyDeclarationAccess().getRule();
	}

	//BreakdownElement:
	//	varDecl=VariableDeclaration | exprStmt=ExpressionStatement | breakdownStmt=BreakdownStatement;
	public BreakdownElementElements getBreakdownElementAccess() {
		return (pBreakdownElement != null) ? pBreakdownElement : (pBreakdownElement = new BreakdownElementElements());
	}
	
	public ParserRule getBreakdownElementRule() {
		return getBreakdownElementAccess().getRule();
	}

	//WeightingStatement:
	//	"weighting" "(" name=Identifier ":" expr=Expression ")" ";";
	public WeightingStatementElements getWeightingStatementAccess() {
		return (pWeightingStatement != null) ? pWeightingStatement : (pWeightingStatement = new WeightingStatementElements());
	}
	
	public ParserRule getWeightingStatementRule() {
		return getWeightingStatementAccess().getRule();
	}

	//BreakdownStatement:
	//	type=("strategy" | "tactic") ("(" guard=LogicalExpression ")")? name=QualifiedPrefix "(" param=ArgumentList? ")"
	//	("with" "(" part+=BreakdownWithPart ("," part+=BreakdownWithPart) ")")? ("@" time=Expression)? ";";
	public BreakdownStatementElements getBreakdownStatementAccess() {
		return (pBreakdownStatement != null) ? pBreakdownStatement : (pBreakdownStatement = new BreakdownStatementElements());
	}
	
	public ParserRule getBreakdownStatementRule() {
		return getBreakdownStatementAccess().getRule();
	}

	//BreakdownWithPart:
	//	name=Identifier "=" value=Expression;
	public BreakdownWithPartElements getBreakdownWithPartAccess() {
		return (pBreakdownWithPart != null) ? pBreakdownWithPart : (pBreakdownWithPart = new BreakdownWithPartElements());
	}
	
	public ParserRule getBreakdownWithPartRule() {
		return getBreakdownWithPartAccess().getRule();
	}

	//TacticDeclaration:
	//	{TacticDeclaration} "tactic" name=Identifier "(" paramList=ParameterList? ")" "=" conditions=RuleConditions?
	//	block=RuleElementBlock ";"?;
	public TacticDeclarationElements getTacticDeclarationAccess() {
		return (pTacticDeclaration != null) ? pTacticDeclaration : (pTacticDeclaration = new TacticDeclarationElements());
	}
	
	public ParserRule getTacticDeclarationRule() {
		return getTacticDeclarationAccess().getRule();
	}

	//Require: //here fqn because this may reference a specific project (of an external project)
	//	"requireVTL" name=STRING versionSpec=VersionSpec ";";
	public VilBuildLanguageGrammarAccess.RequireElements getRequireAccess() {
		return gaVilBuildLanguage.getRequireAccess();
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}

	//ScriptParentDecl:
	//	"extends" name= //here identifier because this references a complete project
	//	Identifier;
	public VilBuildLanguageGrammarAccess.ScriptParentDeclElements getScriptParentDeclAccess() {
		return gaVilBuildLanguage.getScriptParentDeclAccess();
	}
	
	public ParserRule getScriptParentDeclRule() {
		return getScriptParentDeclAccess().getRule();
	}

	//LoadProperties:
	//	"load" "properties" path= // here string because this references a file
	//	STRING ";";
	public VilBuildLanguageGrammarAccess.LoadPropertiesElements getLoadPropertiesAccess() {
		return gaVilBuildLanguage.getLoadPropertiesAccess();
	}
	
	public ParserRule getLoadPropertiesRule() {
		return getLoadPropertiesAccess().getRule();
	}

	//ScriptContents: // ensure object creation
	//	{ScriptContents} (elements+=VariableDeclaration | elements+=TypeDef | elements+=RuleDeclaration)*;
	public VilBuildLanguageGrammarAccess.ScriptContentsElements getScriptContentsAccess() {
		return gaVilBuildLanguage.getScriptContentsAccess();
	}
	
	public ParserRule getScriptContentsRule() {
		return getScriptContentsAccess().getRule();
	}

	//// ---------------- rules
	//RuleDeclaration:
	//	{RuleDeclaration} (type=Type? modifier=RuleModifier? name=Identifier "(" paramList=ParameterList? ")" "=")?
	//	conditions=RuleConditions? block=RuleElementBlock ";"?;
	public VilBuildLanguageGrammarAccess.RuleDeclarationElements getRuleDeclarationAccess() {
		return gaVilBuildLanguage.getRuleDeclarationAccess();
	}
	
	public ParserRule getRuleDeclarationRule() {
		return getRuleDeclarationAccess().getRule();
	}

	//RuleConditions:
	//	{RuleConditions} postcondition+=LogicalExpression? ":" (preconditions+=LogicalExpression (","
	//	preconditions+=LogicalExpression)*)?;
	public VilBuildLanguageGrammarAccess.RuleConditionsElements getRuleConditionsAccess() {
		return gaVilBuildLanguage.getRuleConditionsAccess();
	}
	
	public ParserRule getRuleConditionsRule() {
		return getRuleConditionsAccess().getRule();
	}

	//RuleElementBlock:
	//	{RuleElementBlock} "{" elements+=RuleElement* "}";
	public VilBuildLanguageGrammarAccess.RuleElementBlockElements getRuleElementBlockAccess() {
		return gaVilBuildLanguage.getRuleElementBlockAccess();
	}
	
	public ParserRule getRuleElementBlockRule() {
		return getRuleElementBlockAccess().getRule();
	}

	//RuleElement:
	//	varDecl=VariableDeclaration | exprStmt=ExpressionStatement;
	public VilBuildLanguageGrammarAccess.RuleElementElements getRuleElementAccess() {
		return gaVilBuildLanguage.getRuleElementAccess();
	}
	
	public ParserRule getRuleElementRule() {
		return getRuleElementAccess().getRule();
	}

	//RuleModifier:
	//	protected="protected";
	public VilBuildLanguageGrammarAccess.RuleModifierElements getRuleModifierAccess() {
		return gaVilBuildLanguage.getRuleModifierAccess();
	}
	
	public ParserRule getRuleModifierRule() {
		return getRuleModifierAccess().getRule();
	}

	//// ----------------------- overriding and extending parts of the expression grammar -------------------
	//ExpressionStatement:
	//	(var=Identifier ("." field=Identifier)? "=")? expr=Expression ";" | alt=Alternative ";"?;
	public VilBuildLanguageGrammarAccess.ExpressionStatementElements getExpressionStatementAccess() {
		return gaVilBuildLanguage.getExpressionStatementAccess();
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//PrimaryExpression:
	//	otherEx=ExpressionOrQualifiedExecution | unqEx=UnqualifiedExecution | superEx=SuperExecution | sysEx=SystemExecution
	//	| map=Map | join=Join | instantiate=Instantiate | newEx=ConstructorExecution;
	public VilBuildLanguageGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaVilBuildLanguage.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Instantiate:
	//	"instantiate" (project=Identifier | ruleName=STRING) "(" param=ArgumentList? ")" versionSpec=VersionSpec?;
	public VilBuildLanguageGrammarAccess.InstantiateElements getInstantiateAccess() {
		return gaVilBuildLanguage.getInstantiateAccess();
	}
	
	public ParserRule getInstantiateRule() {
		return getInstantiateAccess().getRule();
	}

	//MapVariable:
	//	type=Type? var=Identifier;
	public VilBuildLanguageGrammarAccess.MapVariableElements getMapVariableAccess() {
		return gaVilBuildLanguage.getMapVariableAccess();
	}
	
	public ParserRule getMapVariableRule() {
		return getMapVariableAccess().getRule();
	}

	//Map:
	//	"map" "(" var+=MapVariable ("," var+=MapVariable)* separator=("=" | ":") expr=Expression ")" block=RuleElementBlock;
	public VilBuildLanguageGrammarAccess.MapElements getMapAccess() {
		return gaVilBuildLanguage.getMapAccess();
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}

	//Alternative:
	//	"if" "(" expr=Expression ")" if=StatementOrBlock ("else" else=StatementOrBlock)?;
	public VilBuildLanguageGrammarAccess.AlternativeElements getAlternativeAccess() {
		return gaVilBuildLanguage.getAlternativeAccess();
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}

	//StatementOrBlock:
	//	exStmt=ExpressionStatement | block=RuleElementBlock;
	public VilBuildLanguageGrammarAccess.StatementOrBlockElements getStatementOrBlockAccess() {
		return gaVilBuildLanguage.getStatementOrBlockAccess();
	}
	
	public ParserRule getStatementOrBlockRule() {
		return getStatementOrBlockAccess().getRule();
	}

	//Join:
	//	"join" "(" var1=JoinVariable "," var2=JoinVariable ")" ("with" "(" condition=Expression ")")?;
	public VilBuildLanguageGrammarAccess.JoinElements getJoinAccess() {
		return gaVilBuildLanguage.getJoinAccess();
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}

	//JoinVariable:
	//	excl="exclude"? var=Identifier ":" expr=Expression;
	public VilBuildLanguageGrammarAccess.JoinVariableElements getJoinVariableAccess() {
		return gaVilBuildLanguage.getJoinVariableAccess();
	}
	
	public ParserRule getJoinVariableRule() {
		return getJoinVariableAccess().getRule();
	}

	//SystemExecution:
	//	"execute" call=Call calls+=SubCall*;
	public VilBuildLanguageGrammarAccess.SystemExecutionElements getSystemExecutionAccess() {
		return gaVilBuildLanguage.getSystemExecutionAccess();
	}
	
	public ParserRule getSystemExecutionRule() {
		return getSystemExecutionAccess().getRule();
	}

	//VariableDeclaration:
	//	const="const"? type=Type name=Identifier ("=" expression=Expression)? ";";
	public ExpressionDslGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaVilBuildLanguage.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//TypeDef:
	//	"typedef" name=Identifier type=Type ";";
	public ExpressionDslGrammarAccess.TypeDefElements getTypeDefAccess() {
		return gaVilBuildLanguage.getTypeDefAccess();
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//// used in extending languages
	//Advice:
	//	"@advice" "(" name=QualifiedName ")" versionSpec=VersionSpec?;
	public ExpressionDslGrammarAccess.AdviceElements getAdviceAccess() {
		return gaVilBuildLanguage.getAdviceAccess();
	}
	
	public ParserRule getAdviceRule() {
		return getAdviceAccess().getRule();
	}

	//VersionSpec:
	//	"with" restriction=Expression;
	public ExpressionDslGrammarAccess.VersionSpecElements getVersionSpecAccess() {
		return gaVilBuildLanguage.getVersionSpecAccess();
	}
	
	public ParserRule getVersionSpecRule() {
		return getVersionSpecAccess().getRule();
	}

	//ParameterList:
	//	param+=Parameter ("," param+=Parameter)*;
	public ExpressionDslGrammarAccess.ParameterListElements getParameterListAccess() {
		return gaVilBuildLanguage.getParameterListAccess();
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//	type=Type name=Identifier;
	public ExpressionDslGrammarAccess.ParameterElements getParameterAccess() {
		return gaVilBuildLanguage.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//VersionStmt:
	//	"version" version=VERSION ";";
	public ExpressionDslGrammarAccess.VersionStmtElements getVersionStmtAccess() {
		return gaVilBuildLanguage.getVersionStmtAccess();
	}
	
	public ParserRule getVersionStmtRule() {
		return getVersionStmtAccess().getRule();
	}

	//Import: //here fqn because this may reference a specific project (of an external project)
	//	"import" name=Identifier versionSpec=VersionSpec? ";";
	public ExpressionDslGrammarAccess.ImportElements getImportAccess() {
		return gaVilBuildLanguage.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Expression:
	//	expr=LogicalExpression | init=ContainerInitializer;
	public ExpressionDslGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaVilBuildLanguage.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//LogicalExpression:
	//	left=EqualityExpression right+=LogicalExpressionPart*;
	public ExpressionDslGrammarAccess.LogicalExpressionElements getLogicalExpressionAccess() {
		return gaVilBuildLanguage.getLogicalExpressionAccess();
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//LogicalExpressionPart:
	//	op=LogicalOperator ex=EqualityExpression;
	public ExpressionDslGrammarAccess.LogicalExpressionPartElements getLogicalExpressionPartAccess() {
		return gaVilBuildLanguage.getLogicalExpressionPartAccess();
	}
	
	public ParserRule getLogicalExpressionPartRule() {
		return getLogicalExpressionPartAccess().getRule();
	}

	//LogicalOperator:
	//	"and" | "or" | "xor";
	public ExpressionDslGrammarAccess.LogicalOperatorElements getLogicalOperatorAccess() {
		return gaVilBuildLanguage.getLogicalOperatorAccess();
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}

	//EqualityExpression:
	//	left=RelationalExpression right=EqualityExpressionPart?;
	public ExpressionDslGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaVilBuildLanguage.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//EqualityExpressionPart:
	//	op=EqualityOperator ex=RelationalExpression;
	public ExpressionDslGrammarAccess.EqualityExpressionPartElements getEqualityExpressionPartAccess() {
		return gaVilBuildLanguage.getEqualityExpressionPartAccess();
	}
	
	public ParserRule getEqualityExpressionPartRule() {
		return getEqualityExpressionPartAccess().getRule();
	}

	//EqualityOperator:
	//	"==" | "<>" | "!=";
	public ExpressionDslGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaVilBuildLanguage.getEqualityOperatorAccess();
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression:
	//	left=AdditiveExpression right=RelationalExpressionPart?;
	public ExpressionDslGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaVilBuildLanguage.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//RelationalExpressionPart:
	//	op=RelationalOperator ex=AdditiveExpression;
	public ExpressionDslGrammarAccess.RelationalExpressionPartElements getRelationalExpressionPartAccess() {
		return gaVilBuildLanguage.getRelationalExpressionPartAccess();
	}
	
	public ParserRule getRelationalExpressionPartRule() {
		return getRelationalExpressionPartAccess().getRule();
	}

	//RelationalOperator:
	//	">" | "<" | ">=" | "<=";
	public ExpressionDslGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaVilBuildLanguage.getRelationalOperatorAccess();
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AdditiveExpression:
	//	left=MultiplicativeExpression right+=AdditiveExpressionPart*;
	public ExpressionDslGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaVilBuildLanguage.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//AdditiveExpressionPart:
	//	op=AdditiveOperator ex=MultiplicativeExpression;
	public ExpressionDslGrammarAccess.AdditiveExpressionPartElements getAdditiveExpressionPartAccess() {
		return gaVilBuildLanguage.getAdditiveExpressionPartAccess();
	}
	
	public ParserRule getAdditiveExpressionPartRule() {
		return getAdditiveExpressionPartAccess().getRule();
	}

	//AdditiveOperator:
	//	"+" | "-";
	public ExpressionDslGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaVilBuildLanguage.getAdditiveOperatorAccess();
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression:
	//	left=UnaryExpression right=MultiplicativeExpressionPart?;
	public ExpressionDslGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaVilBuildLanguage.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//MultiplicativeExpressionPart:
	//	op=MultiplicativeOperator expr=UnaryExpression;
	public ExpressionDslGrammarAccess.MultiplicativeExpressionPartElements getMultiplicativeExpressionPartAccess() {
		return gaVilBuildLanguage.getMultiplicativeExpressionPartAccess();
	}
	
	public ParserRule getMultiplicativeExpressionPartRule() {
		return getMultiplicativeExpressionPartAccess().getRule();
	}

	//MultiplicativeOperator:
	//	"*" | "/";
	public ExpressionDslGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaVilBuildLanguage.getMultiplicativeOperatorAccess();
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//UnaryExpression:
	//	op=UnaryOperator? expr=PostfixExpression;
	public ExpressionDslGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaVilBuildLanguage.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//UnaryOperator:
	//	"not" | "!" | "-";
	public ExpressionDslGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaVilBuildLanguage.getUnaryOperatorAccess();
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//PostfixExpression:
	//	left= // left here for extensions
	//	PrimaryExpression;
	public ExpressionDslGrammarAccess.PostfixExpressionElements getPostfixExpressionAccess() {
		return gaVilBuildLanguage.getPostfixExpressionAccess();
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}

	//ExpressionOrQualifiedExecution:
	//	(val=Constant | "(" parenthesis=Expression ")") calls+=SubCall*;
	public ExpressionDslGrammarAccess.ExpressionOrQualifiedExecutionElements getExpressionOrQualifiedExecutionAccess() {
		return gaVilBuildLanguage.getExpressionOrQualifiedExecutionAccess();
	}
	
	public ParserRule getExpressionOrQualifiedExecutionRule() {
		return getExpressionOrQualifiedExecutionAccess().getRule();
	}

	//UnqualifiedExecution:
	//	call=Call calls+=SubCall*;
	public ExpressionDslGrammarAccess.UnqualifiedExecutionElements getUnqualifiedExecutionAccess() {
		return gaVilBuildLanguage.getUnqualifiedExecutionAccess();
	}
	
	public ParserRule getUnqualifiedExecutionRule() {
		return getUnqualifiedExecutionAccess().getRule();
	}

	//SuperExecution:
	//	"super" "." call=Call calls+=SubCall*;
	public ExpressionDslGrammarAccess.SuperExecutionElements getSuperExecutionAccess() {
		return gaVilBuildLanguage.getSuperExecutionAccess();
	}
	
	public ParserRule getSuperExecutionRule() {
		return getSuperExecutionAccess().getRule();
	}

	//ConstructorExecution:
	//	"new" type=Type "(" param=ArgumentList? ")" calls+=SubCall*;
	public ExpressionDslGrammarAccess.ConstructorExecutionElements getConstructorExecutionAccess() {
		return gaVilBuildLanguage.getConstructorExecutionAccess();
	}
	
	public ParserRule getConstructorExecutionRule() {
		return getConstructorExecutionAccess().getRule();
	}

	//SubCall:
	//	type=("." | "->") call=Call | "[" arrayEx=Expression // IVML addition to OCL
	//	"]";
	public ExpressionDslGrammarAccess.SubCallElements getSubCallAccess() {
		return gaVilBuildLanguage.getSubCallAccess();
	}
	
	public ParserRule getSubCallRule() {
		return getSubCallAccess().getRule();
	}

	//Declarator:
	//	decl+=Declaration (";" decl+=Declaration)* "|";
	public ExpressionDslGrammarAccess.DeclaratorElements getDeclaratorAccess() {
		return gaVilBuildLanguage.getDeclaratorAccess();
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}

	//Declaration:
	//	type=Type? units+=DeclarationUnit ("," units+=DeclarationUnit)*;
	public ExpressionDslGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaVilBuildLanguage.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//DeclarationUnit:
	//	id=Identifier ("=" deflt=Expression)?;
	public ExpressionDslGrammarAccess.DeclarationUnitElements getDeclarationUnitAccess() {
		return gaVilBuildLanguage.getDeclarationUnitAccess();
	}
	
	public ParserRule getDeclarationUnitRule() {
		return getDeclarationUnitAccess().getRule();
	}

	//Call:
	//	name=QualifiedPrefix "(" decl=Declarator? param=ArgumentList? ")";
	public ExpressionDslGrammarAccess.CallElements getCallAccess() {
		return gaVilBuildLanguage.getCallAccess();
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//ArgumentList:
	//	param+=NamedArgument ("," param+=NamedArgument)*;
	public ExpressionDslGrammarAccess.ArgumentListElements getArgumentListAccess() {
		return gaVilBuildLanguage.getArgumentListAccess();
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	//NamedArgument:
	//	(name=Identifier "=")? ex=Expression;
	public ExpressionDslGrammarAccess.NamedArgumentElements getNamedArgumentAccess() {
		return gaVilBuildLanguage.getNamedArgumentAccess();
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}

	//QualifiedPrefix:
	//	qname+=Identifier (qname+="::" qname+=Identifier)*;
	public ExpressionDslGrammarAccess.QualifiedPrefixElements getQualifiedPrefixAccess() {
		return gaVilBuildLanguage.getQualifiedPrefixAccess();
	}
	
	public ParserRule getQualifiedPrefixRule() {
		return getQualifiedPrefixAccess().getRule();
	}

	//QualifiedName:
	//	prefix=QualifiedPrefix (qname+="." qname+=Identifier)*;
	public ExpressionDslGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaVilBuildLanguage.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Constant:
	//	nValue=NumValue | sValue=STRING | qValue=QualifiedName | bValue=("true" | "false") | null="null" | =>
	//	version=VERSION;
	public ExpressionDslGrammarAccess.ConstantElements getConstantAccess() {
		return gaVilBuildLanguage.getConstantAccess();
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//NumValue:
	//	val=NUMBER;
	public ExpressionDslGrammarAccess.NumValueElements getNumValueAccess() {
		return gaVilBuildLanguage.getNumValueAccess();
	}
	
	public ParserRule getNumValueRule() {
		return getNumValueAccess().getRule();
	}

	//Identifier:
	//	ID | VERSION | EXPONENT | "version";
	public ExpressionDslGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaVilBuildLanguage.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//Type:
	//	name= // specific types will be dynamically loaded at start-up
	//	QualifiedPrefix | set="setOf" param=TypeParameters | seq="sequenceOf" param=TypeParameters | map="mapOf"
	//	param=TypeParameters | call="callOf" return=Type? param=TypeParameters;
	public ExpressionDslGrammarAccess.TypeElements getTypeAccess() {
		return gaVilBuildLanguage.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//TypeParameters:
	//	"(" param+=Type ("," param+=Type)* ")";
	public ExpressionDslGrammarAccess.TypeParametersElements getTypeParametersAccess() {
		return gaVilBuildLanguage.getTypeParametersAccess();
	}
	
	public ParserRule getTypeParametersRule() {
		return getTypeParametersAccess().getRule();
	}

	//ContainerInitializer:
	//	{ContainerInitializer} "{" (exprs+=ContainerInitializerExpression ("," exprs+=ContainerInitializerExpression)*)? "}";
	public ExpressionDslGrammarAccess.ContainerInitializerElements getContainerInitializerAccess() {
		return gaVilBuildLanguage.getContainerInitializerAccess();
	}
	
	public ParserRule getContainerInitializerRule() {
		return getContainerInitializerAccess().getRule();
	}

	//ContainerInitializerExpression:
	//	logical=LogicalExpression | container=ContainerInitializer;
	public ExpressionDslGrammarAccess.ContainerInitializerExpressionElements getContainerInitializerExpressionAccess() {
		return gaVilBuildLanguage.getContainerInitializerExpressionAccess();
	}
	
	public ParserRule getContainerInitializerExpressionRule() {
		return getContainerInitializerExpressionAccess().getRule();
	}

	//// --------------------- Terminals (from IVML)----------------------------------
	//// otherwise we would have to write 0 . 5 instead of 0.5
	//terminal VERSION:
	//	"v" "0".."9"+ ("." "0".."9"+)*;
	public TerminalRule getVERSIONRule() {
		return gaVilBuildLanguage.getVERSIONRule();
	} 

	//// adjust de.uni_hildesheim.sse.model.validation.IvmlIdentifierCheck
	//// never allow identifiers starting with $ -> Reasoner name prefixes
	//// here $ goes for meta names in dynamic IVML types
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "$") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaVilBuildLanguage.getIDRule();
	} 

	//terminal NUMBER:
	//	"-"? ("0".."9"+ ("." "0".."9"* EXPONENT?)? | "." "0".."9"+ EXPONENT? | "0".."9"+ EXPONENT);
	public TerminalRule getNUMBERRule() {
		return gaVilBuildLanguage.getNUMBERRule();
	} 

	//// just return a string
	//terminal EXPONENT:
	//	("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getEXPONENTRule() {
		return gaVilBuildLanguage.getEXPONENTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaVilBuildLanguage.getSTRINGRule();
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaVilBuildLanguage.getML_COMMENTRule();
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaVilBuildLanguage.getSL_COMMENTRule();
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaVilBuildLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaVilBuildLanguage.getANY_OTHERRule();
	} 
}
