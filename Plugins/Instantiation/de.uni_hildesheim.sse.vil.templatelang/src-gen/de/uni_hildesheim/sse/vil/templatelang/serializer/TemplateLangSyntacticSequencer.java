/*
 * generated by Xtext
 */
package de.uni_hildesheim.sse.vil.templatelang.serializer;

import com.google.inject.Inject;
import de.uni_hildesheim.sse.vil.templatelang.services.TemplateLangGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class TemplateLangSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TemplateLangGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Content_CRKeyword_1_0_1_q;
	protected AbstractElementAlias match_Content___CRKeyword_1_0_1_q_SemicolonKeyword_1_2__q;
	protected AbstractElementAlias match_VilDef_SemicolonKeyword_8_q;
	protected AbstractElementAlias match_userMultiselect_SemicolonKeyword_4_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TemplateLangGrammarAccess) access;
		match_Content_CRKeyword_1_0_1_q = new TokenAlias(false, true, grammarAccess.getContentAccess().getCRKeyword_1_0_1());
		match_Content___CRKeyword_1_0_1_q_SemicolonKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, true, grammarAccess.getContentAccess().getCRKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getContentAccess().getSemicolonKeyword_1_2()));
		match_VilDef_SemicolonKeyword_8_q = new TokenAlias(false, true, grammarAccess.getVilDefAccess().getSemicolonKeyword_8());
		match_userMultiselect_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getUserMultiselectAccess().getSemicolonKeyword_4());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Content_CRKeyword_1_0_1_q.equals(syntax))
				emit_Content_CRKeyword_1_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Content___CRKeyword_1_0_1_q_SemicolonKeyword_1_2__q.equals(syntax))
				emit_Content___CRKeyword_1_0_1_q_SemicolonKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VilDef_SemicolonKeyword_8_q.equals(syntax))
				emit_VilDef_SemicolonKeyword_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_userMultiselect_SemicolonKeyword_4_q.equals(syntax))
				emit_userMultiselect_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '<CR>'?
	 *
	 * This ambiguous syntax occurs at:
	 *     ctn=STRING (ambiguity) '|' indent=Expression
	 */
	protected void emit_Content_CRKeyword_1_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('<CR>'? ';')?
	 *
	 * This ambiguous syntax occurs at:
	 *     ctn=STRING (ambiguity) (rule end)
	 */
	protected void emit_Content___CRKeyword_1_0_1_q_SemicolonKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     stmts=StmtBlock (ambiguity) (rule end)
	 */
	protected void emit_VilDef_SemicolonKeyword_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     stmt=StmtBlock (ambiguity) (rule end)
	 */
	protected void emit_userMultiselect_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
