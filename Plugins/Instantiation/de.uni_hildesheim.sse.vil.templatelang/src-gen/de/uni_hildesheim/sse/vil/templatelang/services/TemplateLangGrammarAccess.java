/*
* generated by Xtext
*/
package de.uni_hildesheim.sse.vil.templatelang.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.uni_hildesheim.sse.vil.expressions.services.ExpressionDslGrammarAccess;

@Singleton
public class TemplateLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LanguageUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cJavaExtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJavaExtsExtensionParserRuleCall_1_0 = (RuleCall)cJavaExtsAssignment_1.eContents().get(0);
		private final Assignment cAdvicesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdvicesAdviceParserRuleCall_2_0 = (RuleCall)cAdvicesAssignment_2.eContents().get(0);
		private final Assignment cIndentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndentIndentationHintParserRuleCall_3_0 = (RuleCall)cIndentAssignment_3.eContents().get(0);
		private final Keyword cTemplateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIdentifierParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParamAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cParamParameterListParserRuleCall_7_0 = (RuleCall)cParamAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cExtendsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cExtAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cExtIdentifierParserRuleCall_9_1_0 = (RuleCall)cExtAssignment_9_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cVersionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cVersionVersionStmtParserRuleCall_11_0 = (RuleCall)cVersionAssignment_11.eContents().get(0);
		private final Assignment cVarsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cVarsVariableDeclarationParserRuleCall_12_0 = (RuleCall)cVarsAssignment_12.eContents().get(0);
		private final Assignment cDefsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cDefsVilDefParserRuleCall_13_0 = (RuleCall)cDefsAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//// do not rename - required for reuse
		//LanguageUnit:
		//	imports+=Import* javaExts+=Extension* advices+=Advice* indent=IndentationHint? "template" name=Identifier "("
		//	param=ParameterList? ")" ("extends" ext=Identifier)? "{" version=VersionStmt? vars+=VariableDeclaration*
		//	defs+=VilDef* "}";
		public ParserRule getRule() { return rule; }

		//imports+=Import* javaExts+=Extension* advices+=Advice* indent=IndentationHint? "template" name=Identifier "("
		//param=ParameterList? ")" ("extends" ext=Identifier)? "{" version=VersionStmt? vars+=VariableDeclaration* defs+=VilDef*
		//"}"
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//javaExts+=Extension*
		public Assignment getJavaExtsAssignment_1() { return cJavaExtsAssignment_1; }

		//Extension
		public RuleCall getJavaExtsExtensionParserRuleCall_1_0() { return cJavaExtsExtensionParserRuleCall_1_0; }

		//advices+=Advice*
		public Assignment getAdvicesAssignment_2() { return cAdvicesAssignment_2; }

		//Advice
		public RuleCall getAdvicesAdviceParserRuleCall_2_0() { return cAdvicesAdviceParserRuleCall_2_0; }

		//indent=IndentationHint?
		public Assignment getIndentAssignment_3() { return cIndentAssignment_3; }

		//IndentationHint
		public RuleCall getIndentIndentationHintParserRuleCall_3_0() { return cIndentIndentationHintParserRuleCall_3_0; }

		//"template"
		public Keyword getTemplateKeyword_4() { return cTemplateKeyword_4; }

		//name=Identifier
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_5_0() { return cNameIdentifierParserRuleCall_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//param=ParameterList?
		public Assignment getParamAssignment_7() { return cParamAssignment_7; }

		//ParameterList
		public RuleCall getParamParameterListParserRuleCall_7_0() { return cParamParameterListParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//("extends" ext=Identifier)?
		public Group getGroup_9() { return cGroup_9; }

		//"extends"
		public Keyword getExtendsKeyword_9_0() { return cExtendsKeyword_9_0; }

		//ext=Identifier
		public Assignment getExtAssignment_9_1() { return cExtAssignment_9_1; }

		//Identifier
		public RuleCall getExtIdentifierParserRuleCall_9_1_0() { return cExtIdentifierParserRuleCall_9_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }

		//version=VersionStmt?
		public Assignment getVersionAssignment_11() { return cVersionAssignment_11; }

		//VersionStmt
		public RuleCall getVersionVersionStmtParserRuleCall_11_0() { return cVersionVersionStmtParserRuleCall_11_0; }

		//vars+=VariableDeclaration*
		public Assignment getVarsAssignment_12() { return cVarsAssignment_12; }

		//VariableDeclaration
		public RuleCall getVarsVariableDeclarationParserRuleCall_12_0() { return cVarsVariableDeclarationParserRuleCall_12_0; }

		//defs+=VilDef*
		public Assignment getDefsAssignment_13() { return cDefsAssignment_13; }

		//VilDef
		public RuleCall getDefsVilDefParserRuleCall_13_0() { return cDefsVilDefParserRuleCall_13_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class IndentationHintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndentationHint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartsIndentationHintPartParserRuleCall_2_0 = (RuleCall)cPartsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPartsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPartsIndentationHintPartParserRuleCall_3_1_0 = (RuleCall)cPartsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IndentationHint:
		//	"@indent" "(" parts+=IndentationHintPart ("," parts+=IndentationHintPart)* ")";
		public ParserRule getRule() { return rule; }

		//"@indent" "(" parts+=IndentationHintPart ("," parts+=IndentationHintPart)* ")"
		public Group getGroup() { return cGroup; }

		//"@indent"
		public Keyword getIndentKeyword_0() { return cIndentKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parts+=IndentationHintPart
		public Assignment getPartsAssignment_2() { return cPartsAssignment_2; }

		//IndentationHintPart
		public RuleCall getPartsIndentationHintPartParserRuleCall_2_0() { return cPartsIndentationHintPartParserRuleCall_2_0; }

		//("," parts+=IndentationHintPart)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//parts+=IndentationHintPart
		public Assignment getPartsAssignment_3_1() { return cPartsAssignment_3_1; }

		//IndentationHintPart
		public RuleCall getPartsIndentationHintPartParserRuleCall_3_1_0() { return cPartsIndentationHintPartParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class IndentationHintPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndentationHintPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueNUMBERTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IndentationHintPart:
		//	name=Identifier "=" value=NUMBER;
		public ParserRule getRule() { return rule; }

		//name=Identifier "=" value=NUMBER
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=NUMBER
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_2_0() { return cValueNUMBERTerminalRuleCall_2_0; }
	}

	public class VilDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VilDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIdentifierParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamParameterListParserRuleCall_4_0 = (RuleCall)cParamAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStmtsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStmtsStmtBlockParserRuleCall_6_0 = (RuleCall)cStmtsAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//VilDef:
		//	"def" type=Type? id=Identifier "(" param=ParameterList? ")" stmts=StmtBlock ";"?;
		public ParserRule getRule() { return rule; }

		//"def" type=Type? id=Identifier "(" param=ParameterList? ")" stmts=StmtBlock ";"?
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//type=Type?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//id=Identifier
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_2_0() { return cIdIdentifierParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//param=ParameterList?
		public Assignment getParamAssignment_4() { return cParamAssignment_4; }

		//ParameterList
		public RuleCall getParamParameterListParserRuleCall_4_0() { return cParamParameterListParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//stmts=StmtBlock
		public Assignment getStmtsAssignment_6() { return cStmtsAssignment_6; }

		//StmtBlock
		public RuleCall getStmtsStmtBlockParserRuleCall_6_0() { return cStmtsStmtBlockParserRuleCall_6_0; }

		//";"?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class StmtBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStmtBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtsStmtParserRuleCall_2_0 = (RuleCall)cStmtsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StmtBlock:
		//	{StmtBlock} "{" stmts+=Stmt* "}";
		public ParserRule getRule() { return rule; }

		//{StmtBlock} "{" stmts+=Stmt* "}"
		public Group getGroup() { return cGroup; }

		//{StmtBlock}
		public Action getStmtBlockAction_0() { return cStmtBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//stmts+=Stmt*
		public Assignment getStmtsAssignment_2() { return cStmtsAssignment_2; }

		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_0() { return cStmtsStmtParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cAltAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAltAlternativeParserRuleCall_1_0 = (RuleCall)cAltAssignment_1.eContents().get(0);
		private final Assignment cSwitchAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSwitchSwitchParserRuleCall_2_0 = (RuleCall)cSwitchAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBlockStmtBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Assignment cMultiAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMultiMultiselectParserRuleCall_4_0 = (RuleCall)cMultiAssignment_4.eContents().get(0);
		private final Assignment cLoopAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cLoopLoopParserRuleCall_5_0 = (RuleCall)cLoopAssignment_5.eContents().get(0);
		private final Assignment cExprStmtAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cExprStmtExpressionStatementParserRuleCall_6_0 = (RuleCall)cExprStmtAssignment_6.eContents().get(0);
		private final Assignment cCtnAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cCtnContentParserRuleCall_7_0 = (RuleCall)cCtnAssignment_7.eContents().get(0);
		
		//Stmt:
		//	var=VariableDeclaration | alt=Alternative | switch=Switch | block=StmtBlock | multi=multiselect | loop=Loop |
		//	exprStmt=ExpressionStatement | ctn=Content;
		public ParserRule getRule() { return rule; }

		//var=VariableDeclaration | alt=Alternative | switch=Switch | block=StmtBlock | multi=multiselect | loop=Loop |
		//exprStmt=ExpressionStatement | ctn=Content
		public Alternatives getAlternatives() { return cAlternatives; }

		//var=VariableDeclaration
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//VariableDeclaration
		public RuleCall getVarVariableDeclarationParserRuleCall_0_0() { return cVarVariableDeclarationParserRuleCall_0_0; }

		//alt=Alternative
		public Assignment getAltAssignment_1() { return cAltAssignment_1; }

		//Alternative
		public RuleCall getAltAlternativeParserRuleCall_1_0() { return cAltAlternativeParserRuleCall_1_0; }

		//switch=Switch
		public Assignment getSwitchAssignment_2() { return cSwitchAssignment_2; }

		//Switch
		public RuleCall getSwitchSwitchParserRuleCall_2_0() { return cSwitchSwitchParserRuleCall_2_0; }

		//block=StmtBlock
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }

		//StmtBlock
		public RuleCall getBlockStmtBlockParserRuleCall_3_0() { return cBlockStmtBlockParserRuleCall_3_0; }

		//multi=multiselect
		public Assignment getMultiAssignment_4() { return cMultiAssignment_4; }

		//multiselect
		public RuleCall getMultiMultiselectParserRuleCall_4_0() { return cMultiMultiselectParserRuleCall_4_0; }

		//loop=Loop
		public Assignment getLoopAssignment_5() { return cLoopAssignment_5; }

		//Loop
		public RuleCall getLoopLoopParserRuleCall_5_0() { return cLoopLoopParserRuleCall_5_0; }

		//exprStmt=ExpressionStatement
		public Assignment getExprStmtAssignment_6() { return cExprStmtAssignment_6; }

		//ExpressionStatement
		public RuleCall getExprStmtExpressionStatementParserRuleCall_6_0() { return cExprStmtExpressionStatementParserRuleCall_6_0; }

		//ctn=Content
		public Assignment getCtnAssignment_7() { return cCtnAssignment_7; }

		//Content
		public RuleCall getCtnContentParserRuleCall_7_0() { return cCtnContentParserRuleCall_7_0; }
	}

	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIfAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfStmtParserRuleCall_4_0 = (RuleCall)cIfAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStmtParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//Alternative:
		//	"if" "(" expr=Expression ")" if=Stmt ("else" else=Stmt)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" expr=Expression ")" if=Stmt ("else" else=Stmt)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//if=Stmt
		public Assignment getIfAssignment_4() { return cIfAssignment_4; }

		//Stmt
		public RuleCall getIfStmtParserRuleCall_4_0() { return cIfStmtParserRuleCall_4_0; }

		//(=> "else" else=Stmt)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//else=Stmt
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }

		//Stmt
		public RuleCall getElseStmtParserRuleCall_5_1_0() { return cElseStmtParserRuleCall_5_1_0; }
	}

	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrintAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPrintPrintKeyword_0_0 = (Keyword)cPrintAssignment_0.eContents().get(0);
		private final Assignment cCtnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCtnSTRINGTerminalRuleCall_1_0 = (RuleCall)cCtnAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndentExpressionParserRuleCall_2_1_0 = (RuleCall)cIndentAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Content:
		//	print="print"? ctn=STRING ("|" indent=Expression ";")?;
		public ParserRule getRule() { return rule; }

		//print="print"? ctn=STRING ("|" indent=Expression ";")?
		public Group getGroup() { return cGroup; }

		//print="print"?
		public Assignment getPrintAssignment_0() { return cPrintAssignment_0; }

		//"print"
		public Keyword getPrintPrintKeyword_0_0() { return cPrintPrintKeyword_0_0; }

		//ctn=STRING
		public Assignment getCtnAssignment_1() { return cCtnAssignment_1; }

		//STRING
		public RuleCall getCtnSTRINGTerminalRuleCall_1_0() { return cCtnSTRINGTerminalRuleCall_1_0; }

		//("|" indent=Expression ";")?
		public Group getGroup_2() { return cGroup_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//indent=Expression
		public Assignment getIndentAssignment_2_1() { return cIndentAssignment_2_1; }

		//Expression
		public RuleCall getIndentExpressionParserRuleCall_2_1_0() { return cIndentExpressionParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }
	}

	public class SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cPartsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cPartsSwitchPartParserRuleCall_5_0_0 = (RuleCall)cPartsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cPartsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cPartsSwitchPartParserRuleCall_5_1_1_0 = (RuleCall)cPartsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Keyword cDefaultKeyword_5_2_1 = (Keyword)cGroup_5_2.eContents().get(1);
		private final Keyword cColonKeyword_5_2_2 = (Keyword)cGroup_5_2.eContents().get(2);
		private final Assignment cDfltAssignment_5_2_3 = (Assignment)cGroup_5_2.eContents().get(3);
		private final RuleCall cDfltExpressionParserRuleCall_5_2_3_0 = (RuleCall)cDfltAssignment_5_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Switch:
		//	"switch" "(" expr=Expression ")" "{" (parts+=SwitchPart ("," parts+=SwitchPart)* ("," "default" ":"
		//	dflt=Expression)?) "}";
		public ParserRule getRule() { return rule; }

		//"switch" "(" expr=Expression ")" "{" (parts+=SwitchPart ("," parts+=SwitchPart)* ("," "default" ":" dflt=Expression)?)
		//"}"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//parts+=SwitchPart ("," parts+=SwitchPart)* ("," "default" ":" dflt=Expression)?
		public Group getGroup_5() { return cGroup_5; }

		//parts+=SwitchPart
		public Assignment getPartsAssignment_5_0() { return cPartsAssignment_5_0; }

		//SwitchPart
		public RuleCall getPartsSwitchPartParserRuleCall_5_0_0() { return cPartsSwitchPartParserRuleCall_5_0_0; }

		//("," parts+=SwitchPart)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parts+=SwitchPart
		public Assignment getPartsAssignment_5_1_1() { return cPartsAssignment_5_1_1; }

		//SwitchPart
		public RuleCall getPartsSwitchPartParserRuleCall_5_1_1_0() { return cPartsSwitchPartParserRuleCall_5_1_1_0; }

		//("," "default" ":" dflt=Expression)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//"default"
		public Keyword getDefaultKeyword_5_2_1() { return cDefaultKeyword_5_2_1; }

		//":"
		public Keyword getColonKeyword_5_2_2() { return cColonKeyword_5_2_2; }

		//dflt=Expression
		public Assignment getDfltAssignment_5_2_3() { return cDfltAssignment_5_2_3; }

		//Expression
		public RuleCall getDfltExpressionParserRuleCall_5_2_3_0() { return cDfltExpressionParserRuleCall_5_2_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class SwitchPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//SwitchPart:
		//	left=Expression ":" right=Expression;
		public ParserRule getRule() { return rule; }

		//left=Expression ":" right=Expression
		public Group getGroup() { return cGroup; }

		//left=Expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//right=Expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }
	}

	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIdentifierParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExpressionParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSeparatorAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSeparatorPrimaryExpressionParserRuleCall_6_1_0 = (RuleCall)cSeparatorAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cFinalSeparatorAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cFinalSeparatorPrimaryExpressionParserRuleCall_6_2_1_0 = (RuleCall)cFinalSeparatorAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStmtAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStmtStmtParserRuleCall_8_0 = (RuleCall)cStmtAssignment_8.eContents().get(0);
		
		//Loop:
		//	"for" "(" type=Type id=Identifier ":" expr=Expression ("," separator=PrimaryExpression (","
		//	finalSeparator=PrimaryExpression)?)? ")" stmt=Stmt;
		public ParserRule getRule() { return rule; }

		//"for" "(" type=Type id=Identifier ":" expr=Expression ("," separator=PrimaryExpression (","
		//finalSeparator=PrimaryExpression)?)? ")" stmt=Stmt
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//id=Identifier
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_3_0() { return cIdIdentifierParserRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//expr=Expression
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_5_0() { return cExprExpressionParserRuleCall_5_0; }

		//("," separator=PrimaryExpression ("," finalSeparator=PrimaryExpression)?)?
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//separator=PrimaryExpression
		public Assignment getSeparatorAssignment_6_1() { return cSeparatorAssignment_6_1; }

		//PrimaryExpression
		public RuleCall getSeparatorPrimaryExpressionParserRuleCall_6_1_0() { return cSeparatorPrimaryExpressionParserRuleCall_6_1_0; }

		//("," finalSeparator=PrimaryExpression)?
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//finalSeparator=PrimaryExpression
		public Assignment getFinalSeparatorAssignment_6_2_1() { return cFinalSeparatorAssignment_6_2_1; }

		//PrimaryExpression
		public RuleCall getFinalSeparatorPrimaryExpressionParserRuleCall_6_2_1_0() { return cFinalSeparatorPrimaryExpressionParserRuleCall_6_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//stmt=Stmt
		public Assignment getStmtAssignment_8() { return cStmtAssignment_8; }

		//Stmt
		public RuleCall getStmtStmtParserRuleCall_8_0() { return cStmtStmtParserRuleCall_8_0; }
	}

	public class MultiselectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "multiselect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGenAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGenGenericMultiselectParserRuleCall_0_0 = (RuleCall)cGenAssignment_0.eContents().get(0);
		private final Assignment cUserAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUserUserMultiselectParserRuleCall_1_0 = (RuleCall)cUserAssignment_1.eContents().get(0);
		
		//multiselect:
		//	gen=genericMultiselect | user=userMultiselect;
		public ParserRule getRule() { return rule; }

		//gen=genericMultiselect | user=userMultiselect
		public Alternatives getAlternatives() { return cAlternatives; }

		//gen=genericMultiselect
		public Assignment getGenAssignment_0() { return cGenAssignment_0; }

		//genericMultiselect
		public RuleCall getGenGenericMultiselectParserRuleCall_0_0() { return cGenGenericMultiselectParserRuleCall_0_0; }

		//user=userMultiselect
		public Assignment getUserAssignment_1() { return cUserAssignment_1; }

		//userMultiselect
		public RuleCall getUserUserMultiselectParserRuleCall_1_0() { return cUserUserMultiselectParserRuleCall_1_0; }
	}

	public class GenericMultiselectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "genericMultiselect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPreambleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPreambleStmtBlockParserRuleCall_1_0 = (RuleCall)cPreambleAssignment_1.eContents().get(0);
		private final Assignment cSelectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectorStmtBlockParserRuleCall_2_0 = (RuleCall)cSelectorAssignment_2.eContents().get(0);
		private final Assignment cPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartMultiSelectPartParserRuleCall_3_0 = (RuleCall)cPartAssignment_3.eContents().get(0);
		private final Assignment cTrailerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrailerStmtBlockParserRuleCall_4_0 = (RuleCall)cTrailerAssignment_4.eContents().get(0);
		
		//// a kind of macro
		//genericMultiselect:
		//	"multiSelect" preamble=StmtBlock selector=StmtBlock part+=multiSelectPart+ trailer=StmtBlock;
		public ParserRule getRule() { return rule; }

		//"multiSelect" preamble=StmtBlock selector=StmtBlock part+=multiSelectPart+ trailer=StmtBlock
		public Group getGroup() { return cGroup; }

		//"multiSelect"
		public Keyword getMultiSelectKeyword_0() { return cMultiSelectKeyword_0; }

		//preamble=StmtBlock
		public Assignment getPreambleAssignment_1() { return cPreambleAssignment_1; }

		//StmtBlock
		public RuleCall getPreambleStmtBlockParserRuleCall_1_0() { return cPreambleStmtBlockParserRuleCall_1_0; }

		//selector=StmtBlock
		public Assignment getSelectorAssignment_2() { return cSelectorAssignment_2; }

		//StmtBlock
		public RuleCall getSelectorStmtBlockParserRuleCall_2_0() { return cSelectorStmtBlockParserRuleCall_2_0; }

		//part+=multiSelectPart+
		public Assignment getPartAssignment_3() { return cPartAssignment_3; }

		//multiSelectPart
		public RuleCall getPartMultiSelectPartParserRuleCall_3_0() { return cPartMultiSelectPartParserRuleCall_3_0; }

		//trailer=StmtBlock
		public Assignment getTrailerAssignment_4() { return cTrailerAssignment_4; }

		//StmtBlock
		public RuleCall getTrailerStmtBlockParserRuleCall_4_0() { return cTrailerStmtBlockParserRuleCall_4_0; }
	}

	public class MultiSelectPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "multiSelectPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseExpressionParserRuleCall_1_0 = (RuleCall)cCaseAssignment_1.eContents().get(0);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeStmtBlockParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Assignment cSelectorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelectorStmtBlockParserRuleCall_3_0 = (RuleCall)cSelectorAssignment_3.eContents().get(0);
		
		//multiSelectPart:
		//	"case" case=Expression code=StmtBlock selector=StmtBlock;
		public ParserRule getRule() { return rule; }

		//"case" case=Expression code=StmtBlock selector=StmtBlock
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//case=Expression
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//Expression
		public RuleCall getCaseExpressionParserRuleCall_1_0() { return cCaseExpressionParserRuleCall_1_0; }

		//code=StmtBlock
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }

		//StmtBlock
		public RuleCall getCodeStmtBlockParserRuleCall_2_0() { return cCodeStmtBlockParserRuleCall_2_0; }

		//selector=StmtBlock
		public Assignment getSelectorAssignment_3() { return cSelectorAssignment_3; }

		//StmtBlock
		public RuleCall getSelectorStmtBlockParserRuleCall_3_0() { return cSelectorStmtBlockParserRuleCall_3_0; }
	}

	public class UserMultiselectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "userMultiselect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentifierParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGenericMultiSelectKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtStmtBlockParserRuleCall_3_0 = (RuleCall)cStmtAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// a kind of pre-instantiated 
		//userMultiselect:
		//	id=Identifier ":=" "generic-multiSelect" stmt=StmtBlock ";"?;
		public ParserRule getRule() { return rule; }

		//id=Identifier ":=" "generic-multiSelect" stmt=StmtBlock ";"?
		public Group getGroup() { return cGroup; }

		//id=Identifier
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_0_0() { return cIdIdentifierParserRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//"generic-multiSelect"
		public Keyword getGenericMultiSelectKeyword_2() { return cGenericMultiSelectKeyword_2; }

		//stmt=StmtBlock
		public Assignment getStmtAssignment_3() { return cStmtAssignment_3; }

		//StmtBlock
		public RuleCall getStmtStmtBlockParserRuleCall_3_0() { return cStmtStmtBlockParserRuleCall_3_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Extension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameJavaQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// multiple alternatives missing at the moment
		//Extension:
		//	"extension" name=JavaQualifiedName ";";
		public ParserRule getRule() { return rule; }

		//"extension" name=JavaQualifiedName ";"
		public Group getGroup() { return cGroup; }

		//"extension"
		public Keyword getExtensionKeyword_0() { return cExtensionKeyword_0; }

		//name=JavaQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//JavaQualifiedName
		public RuleCall getNameJavaQualifiedNameParserRuleCall_1_0() { return cNameJavaQualifiedNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class JavaQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQnameIdentifierParserRuleCall_0_0 = (RuleCall)cQnameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cQnameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cQnameFullStopKeyword_1_0_0 = (Keyword)cQnameAssignment_1_0.eContents().get(0);
		private final Assignment cQnameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQnameIdentifierParserRuleCall_1_1_0 = (RuleCall)cQnameAssignment_1_1.eContents().get(0);
		
		//JavaQualifiedName:
		//	qname+=Identifier (qname+="." qname+=Identifier)*;
		public ParserRule getRule() { return rule; }

		//qname+=Identifier (qname+="." qname+=Identifier)*
		public Group getGroup() { return cGroup; }

		//qname+=Identifier
		public Assignment getQnameAssignment_0() { return cQnameAssignment_0; }

		//Identifier
		public RuleCall getQnameIdentifierParserRuleCall_0_0() { return cQnameIdentifierParserRuleCall_0_0; }

		//(qname+="." qname+=Identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//qname+="."
		public Assignment getQnameAssignment_1_0() { return cQnameAssignment_1_0; }

		//"."
		public Keyword getQnameFullStopKeyword_1_0_0() { return cQnameFullStopKeyword_1_0_0; }

		//qname+=Identifier
		public Assignment getQnameAssignment_1_1() { return cQnameAssignment_1_1; }

		//Identifier
		public RuleCall getQnameIdentifierParserRuleCall_1_1_0() { return cQnameIdentifierParserRuleCall_1_1_0; }
	}
	
	
	private LanguageUnitElements pLanguageUnit;
	private IndentationHintElements pIndentationHint;
	private IndentationHintPartElements pIndentationHintPart;
	private VilDefElements pVilDef;
	private StmtBlockElements pStmtBlock;
	private StmtElements pStmt;
	private AlternativeElements pAlternative;
	private ContentElements pContent;
	private SwitchElements pSwitch;
	private SwitchPartElements pSwitchPart;
	private LoopElements pLoop;
	private MultiselectElements pMultiselect;
	private GenericMultiselectElements pGenericMultiselect;
	private MultiSelectPartElements pMultiSelectPart;
	private UserMultiselectElements pUserMultiselect;
	private ExtensionElements pExtension;
	private JavaQualifiedNameElements pJavaQualifiedName;
	
	private final Grammar grammar;

	private ExpressionDslGrammarAccess gaExpressionDsl;

	@Inject
	public TemplateLangGrammarAccess(GrammarProvider grammarProvider,
		ExpressionDslGrammarAccess gaExpressionDsl) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaExpressionDsl = gaExpressionDsl;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_hildesheim.sse.vil.templatelang.TemplateLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ExpressionDslGrammarAccess getExpressionDslGrammarAccess() {
		return gaExpressionDsl;
	}

	
	//// do not rename - required for reuse
	//LanguageUnit:
	//	imports+=Import* javaExts+=Extension* advices+=Advice* indent=IndentationHint? "template" name=Identifier "("
	//	param=ParameterList? ")" ("extends" ext=Identifier)? "{" version=VersionStmt? vars+=VariableDeclaration*
	//	defs+=VilDef* "}";
	public LanguageUnitElements getLanguageUnitAccess() {
		return (pLanguageUnit != null) ? pLanguageUnit : (pLanguageUnit = new LanguageUnitElements());
	}
	
	public ParserRule getLanguageUnitRule() {
		return getLanguageUnitAccess().getRule();
	}

	//IndentationHint:
	//	"@indent" "(" parts+=IndentationHintPart ("," parts+=IndentationHintPart)* ")";
	public IndentationHintElements getIndentationHintAccess() {
		return (pIndentationHint != null) ? pIndentationHint : (pIndentationHint = new IndentationHintElements());
	}
	
	public ParserRule getIndentationHintRule() {
		return getIndentationHintAccess().getRule();
	}

	//IndentationHintPart:
	//	name=Identifier "=" value=NUMBER;
	public IndentationHintPartElements getIndentationHintPartAccess() {
		return (pIndentationHintPart != null) ? pIndentationHintPart : (pIndentationHintPart = new IndentationHintPartElements());
	}
	
	public ParserRule getIndentationHintPartRule() {
		return getIndentationHintPartAccess().getRule();
	}

	//VilDef:
	//	"def" type=Type? id=Identifier "(" param=ParameterList? ")" stmts=StmtBlock ";"?;
	public VilDefElements getVilDefAccess() {
		return (pVilDef != null) ? pVilDef : (pVilDef = new VilDefElements());
	}
	
	public ParserRule getVilDefRule() {
		return getVilDefAccess().getRule();
	}

	//StmtBlock:
	//	{StmtBlock} "{" stmts+=Stmt* "}";
	public StmtBlockElements getStmtBlockAccess() {
		return (pStmtBlock != null) ? pStmtBlock : (pStmtBlock = new StmtBlockElements());
	}
	
	public ParserRule getStmtBlockRule() {
		return getStmtBlockAccess().getRule();
	}

	//Stmt:
	//	var=VariableDeclaration | alt=Alternative | switch=Switch | block=StmtBlock | multi=multiselect | loop=Loop |
	//	exprStmt=ExpressionStatement | ctn=Content;
	public StmtElements getStmtAccess() {
		return (pStmt != null) ? pStmt : (pStmt = new StmtElements());
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}

	//Alternative:
	//	"if" "(" expr=Expression ")" if=Stmt ("else" else=Stmt)?;
	public AlternativeElements getAlternativeAccess() {
		return (pAlternative != null) ? pAlternative : (pAlternative = new AlternativeElements());
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}

	//Content:
	//	print="print"? ctn=STRING ("|" indent=Expression ";")?;
	public ContentElements getContentAccess() {
		return (pContent != null) ? pContent : (pContent = new ContentElements());
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}

	//Switch:
	//	"switch" "(" expr=Expression ")" "{" (parts+=SwitchPart ("," parts+=SwitchPart)* ("," "default" ":"
	//	dflt=Expression)?) "}";
	public SwitchElements getSwitchAccess() {
		return (pSwitch != null) ? pSwitch : (pSwitch = new SwitchElements());
	}
	
	public ParserRule getSwitchRule() {
		return getSwitchAccess().getRule();
	}

	//SwitchPart:
	//	left=Expression ":" right=Expression;
	public SwitchPartElements getSwitchPartAccess() {
		return (pSwitchPart != null) ? pSwitchPart : (pSwitchPart = new SwitchPartElements());
	}
	
	public ParserRule getSwitchPartRule() {
		return getSwitchPartAccess().getRule();
	}

	//Loop:
	//	"for" "(" type=Type id=Identifier ":" expr=Expression ("," separator=PrimaryExpression (","
	//	finalSeparator=PrimaryExpression)?)? ")" stmt=Stmt;
	public LoopElements getLoopAccess() {
		return (pLoop != null) ? pLoop : (pLoop = new LoopElements());
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//multiselect:
	//	gen=genericMultiselect | user=userMultiselect;
	public MultiselectElements getMultiselectAccess() {
		return (pMultiselect != null) ? pMultiselect : (pMultiselect = new MultiselectElements());
	}
	
	public ParserRule getMultiselectRule() {
		return getMultiselectAccess().getRule();
	}

	//// a kind of macro
	//genericMultiselect:
	//	"multiSelect" preamble=StmtBlock selector=StmtBlock part+=multiSelectPart+ trailer=StmtBlock;
	public GenericMultiselectElements getGenericMultiselectAccess() {
		return (pGenericMultiselect != null) ? pGenericMultiselect : (pGenericMultiselect = new GenericMultiselectElements());
	}
	
	public ParserRule getGenericMultiselectRule() {
		return getGenericMultiselectAccess().getRule();
	}

	//multiSelectPart:
	//	"case" case=Expression code=StmtBlock selector=StmtBlock;
	public MultiSelectPartElements getMultiSelectPartAccess() {
		return (pMultiSelectPart != null) ? pMultiSelectPart : (pMultiSelectPart = new MultiSelectPartElements());
	}
	
	public ParserRule getMultiSelectPartRule() {
		return getMultiSelectPartAccess().getRule();
	}

	//// a kind of pre-instantiated 
	//userMultiselect:
	//	id=Identifier ":=" "generic-multiSelect" stmt=StmtBlock ";"?;
	public UserMultiselectElements getUserMultiselectAccess() {
		return (pUserMultiselect != null) ? pUserMultiselect : (pUserMultiselect = new UserMultiselectElements());
	}
	
	public ParserRule getUserMultiselectRule() {
		return getUserMultiselectAccess().getRule();
	}

	//// multiple alternatives missing at the moment
	//Extension:
	//	"extension" name=JavaQualifiedName ";";
	public ExtensionElements getExtensionAccess() {
		return (pExtension != null) ? pExtension : (pExtension = new ExtensionElements());
	}
	
	public ParserRule getExtensionRule() {
		return getExtensionAccess().getRule();
	}

	//JavaQualifiedName:
	//	qname+=Identifier (qname+="." qname+=Identifier)*;
	public JavaQualifiedNameElements getJavaQualifiedNameAccess() {
		return (pJavaQualifiedName != null) ? pJavaQualifiedName : (pJavaQualifiedName = new JavaQualifiedNameElements());
	}
	
	public ParserRule getJavaQualifiedNameRule() {
		return getJavaQualifiedNameAccess().getRule();
	}

	//VariableDeclaration:
	//	const="const"? type=Type name=Identifier ("=" expression=Expression)? ";";
	public ExpressionDslGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaExpressionDsl.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//// used in extending languages
	//Advice:
	//	"@advice" "(" name=QualifiedName ")" versionSpec=VersionSpec?;
	public ExpressionDslGrammarAccess.AdviceElements getAdviceAccess() {
		return gaExpressionDsl.getAdviceAccess();
	}
	
	public ParserRule getAdviceRule() {
		return getAdviceAccess().getRule();
	}

	//VersionSpec:
	//	"with" restriction=Expression;
	public ExpressionDslGrammarAccess.VersionSpecElements getVersionSpecAccess() {
		return gaExpressionDsl.getVersionSpecAccess();
	}
	
	public ParserRule getVersionSpecRule() {
		return getVersionSpecAccess().getRule();
	}

	//ParameterList:
	//	param+=Parameter ("," param+=Parameter)*;
	public ExpressionDslGrammarAccess.ParameterListElements getParameterListAccess() {
		return gaExpressionDsl.getParameterListAccess();
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//	type=Type name=Identifier;
	public ExpressionDslGrammarAccess.ParameterElements getParameterAccess() {
		return gaExpressionDsl.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//VersionStmt:
	//	"version" version=VERSION ";";
	public ExpressionDslGrammarAccess.VersionStmtElements getVersionStmtAccess() {
		return gaExpressionDsl.getVersionStmtAccess();
	}
	
	public ParserRule getVersionStmtRule() {
		return getVersionStmtAccess().getRule();
	}

	//Import: //here fqn because this may reference a specific project (of an external project)
	//	"import" name=Identifier versionSpec=VersionSpec? ";";
	public ExpressionDslGrammarAccess.ImportElements getImportAccess() {
		return gaExpressionDsl.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// ------------------------------------- expressions -----------------------
	//// used in extending languages
	//ExpressionStatement:
	//	(var=Identifier "=")? expr=Expression ";";
	public ExpressionDslGrammarAccess.ExpressionStatementElements getExpressionStatementAccess() {
		return gaExpressionDsl.getExpressionStatementAccess();
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//Expression:
	//	expr=LogicalExpression | init=ContainerInitializer;
	public ExpressionDslGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpressionDsl.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//LogicalExpression:
	//	left=EqualityExpression right+=LogicalExpressionPart*;
	public ExpressionDslGrammarAccess.LogicalExpressionElements getLogicalExpressionAccess() {
		return gaExpressionDsl.getLogicalExpressionAccess();
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//LogicalExpressionPart:
	//	op=LogicalOperator ex=EqualityExpression;
	public ExpressionDslGrammarAccess.LogicalExpressionPartElements getLogicalExpressionPartAccess() {
		return gaExpressionDsl.getLogicalExpressionPartAccess();
	}
	
	public ParserRule getLogicalExpressionPartRule() {
		return getLogicalExpressionPartAccess().getRule();
	}

	//LogicalOperator:
	//	"and" | "or" | "xor";
	public ExpressionDslGrammarAccess.LogicalOperatorElements getLogicalOperatorAccess() {
		return gaExpressionDsl.getLogicalOperatorAccess();
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}

	//EqualityExpression:
	//	left=RelationalExpression right=EqualityExpressionPart?;
	public ExpressionDslGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaExpressionDsl.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//EqualityExpressionPart:
	//	op=EqualityOperator ex=RelationalExpression;
	public ExpressionDslGrammarAccess.EqualityExpressionPartElements getEqualityExpressionPartAccess() {
		return gaExpressionDsl.getEqualityExpressionPartAccess();
	}
	
	public ParserRule getEqualityExpressionPartRule() {
		return getEqualityExpressionPartAccess().getRule();
	}

	//EqualityOperator:
	//	"==" | "<>" | "!=";
	public ExpressionDslGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaExpressionDsl.getEqualityOperatorAccess();
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression:
	//	left=AdditiveExpression right=RelationalExpressionPart?;
	public ExpressionDslGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaExpressionDsl.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//RelationalExpressionPart:
	//	op=RelationalOperator ex=AdditiveExpression;
	public ExpressionDslGrammarAccess.RelationalExpressionPartElements getRelationalExpressionPartAccess() {
		return gaExpressionDsl.getRelationalExpressionPartAccess();
	}
	
	public ParserRule getRelationalExpressionPartRule() {
		return getRelationalExpressionPartAccess().getRule();
	}

	//RelationalOperator:
	//	">" | "<" | ">=" | "<=";
	public ExpressionDslGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaExpressionDsl.getRelationalOperatorAccess();
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AdditiveExpression:
	//	left=MultiplicativeExpression right+=AdditiveExpressionPart*;
	public ExpressionDslGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaExpressionDsl.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//AdditiveExpressionPart:
	//	op=AdditiveOperator ex=MultiplicativeExpression;
	public ExpressionDslGrammarAccess.AdditiveExpressionPartElements getAdditiveExpressionPartAccess() {
		return gaExpressionDsl.getAdditiveExpressionPartAccess();
	}
	
	public ParserRule getAdditiveExpressionPartRule() {
		return getAdditiveExpressionPartAccess().getRule();
	}

	//AdditiveOperator:
	//	"+" | "-";
	public ExpressionDslGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaExpressionDsl.getAdditiveOperatorAccess();
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression:
	//	left=UnaryExpression right=MultiplicativeExpressionPart?;
	public ExpressionDslGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaExpressionDsl.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//MultiplicativeExpressionPart:
	//	op=MultiplicativeOperator expr=UnaryExpression;
	public ExpressionDslGrammarAccess.MultiplicativeExpressionPartElements getMultiplicativeExpressionPartAccess() {
		return gaExpressionDsl.getMultiplicativeExpressionPartAccess();
	}
	
	public ParserRule getMultiplicativeExpressionPartRule() {
		return getMultiplicativeExpressionPartAccess().getRule();
	}

	//MultiplicativeOperator:
	//	"*" | "/";
	public ExpressionDslGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaExpressionDsl.getMultiplicativeOperatorAccess();
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//UnaryExpression:
	//	op=UnaryOperator? expr=PostfixExpression;
	public ExpressionDslGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaExpressionDsl.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//UnaryOperator:
	//	"not" | "!" | "-";
	public ExpressionDslGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaExpressionDsl.getUnaryOperatorAccess();
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//PostfixExpression:
	//	left= // left here for extensions
	//	PrimaryExpression;
	public ExpressionDslGrammarAccess.PostfixExpressionElements getPostfixExpressionAccess() {
		return gaExpressionDsl.getPostfixExpressionAccess();
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}

	//PrimaryExpression:
	//	otherEx=ExpressionOrQualifiedExecution | unqEx=UnqualifiedExecution | superEx=SuperExecution |
	//	newEx=ConstructorExecution;
	public ExpressionDslGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaExpressionDsl.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//ExpressionOrQualifiedExecution:
	//	(val=Constant | "(" parenthesis=Expression ")") calls+=SubCall*;
	public ExpressionDslGrammarAccess.ExpressionOrQualifiedExecutionElements getExpressionOrQualifiedExecutionAccess() {
		return gaExpressionDsl.getExpressionOrQualifiedExecutionAccess();
	}
	
	public ParserRule getExpressionOrQualifiedExecutionRule() {
		return getExpressionOrQualifiedExecutionAccess().getRule();
	}

	//UnqualifiedExecution:
	//	call=Call calls+=SubCall*;
	public ExpressionDslGrammarAccess.UnqualifiedExecutionElements getUnqualifiedExecutionAccess() {
		return gaExpressionDsl.getUnqualifiedExecutionAccess();
	}
	
	public ParserRule getUnqualifiedExecutionRule() {
		return getUnqualifiedExecutionAccess().getRule();
	}

	//SuperExecution:
	//	"super" "." call=Call calls+=SubCall*;
	public ExpressionDslGrammarAccess.SuperExecutionElements getSuperExecutionAccess() {
		return gaExpressionDsl.getSuperExecutionAccess();
	}
	
	public ParserRule getSuperExecutionRule() {
		return getSuperExecutionAccess().getRule();
	}

	//ConstructorExecution:
	//	"new" type=Type "(" param=ArgumentList? ")" calls+=SubCall*;
	public ExpressionDslGrammarAccess.ConstructorExecutionElements getConstructorExecutionAccess() {
		return gaExpressionDsl.getConstructorExecutionAccess();
	}
	
	public ParserRule getConstructorExecutionRule() {
		return getConstructorExecutionAccess().getRule();
	}

	//SubCall:
	//	type=("." | "->") call=Call | "[" arrayEx=Expression // IVML addition to OCL
	//	"]";
	public ExpressionDslGrammarAccess.SubCallElements getSubCallAccess() {
		return gaExpressionDsl.getSubCallAccess();
	}
	
	public ParserRule getSubCallRule() {
		return getSubCallAccess().getRule();
	}

	//Declarator:
	//	decl+=Declaration (";" decl+=Declaration)* "|";
	public ExpressionDslGrammarAccess.DeclaratorElements getDeclaratorAccess() {
		return gaExpressionDsl.getDeclaratorAccess();
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}

	//Declaration:
	//	type=Type? id+=Identifier ("," id+=Identifier)*;
	public ExpressionDslGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaExpressionDsl.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Call:
	//	name=QualifiedPrefix "(" decl=Declarator? param=ArgumentList? ")";
	public ExpressionDslGrammarAccess.CallElements getCallAccess() {
		return gaExpressionDsl.getCallAccess();
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//ArgumentList:
	//	param+=NamedArgument ("," param+=NamedArgument)*;
	public ExpressionDslGrammarAccess.ArgumentListElements getArgumentListAccess() {
		return gaExpressionDsl.getArgumentListAccess();
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	//NamedArgument:
	//	(name=Identifier "=")? ex=Expression;
	public ExpressionDslGrammarAccess.NamedArgumentElements getNamedArgumentAccess() {
		return gaExpressionDsl.getNamedArgumentAccess();
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}

	//QualifiedPrefix:
	//	qname+=Identifier (qname+="::" qname+=Identifier)*;
	public ExpressionDslGrammarAccess.QualifiedPrefixElements getQualifiedPrefixAccess() {
		return gaExpressionDsl.getQualifiedPrefixAccess();
	}
	
	public ParserRule getQualifiedPrefixRule() {
		return getQualifiedPrefixAccess().getRule();
	}

	//QualifiedName:
	//	prefix=QualifiedPrefix (qname+="." qname+=Identifier)?;
	public ExpressionDslGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaExpressionDsl.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Constant:
	//	nValue=NumValue | sValue=STRING | qValue=QualifiedName | bValue=("true" | "false") | null="null" | =>
	//	version=VERSION;
	public ExpressionDslGrammarAccess.ConstantElements getConstantAccess() {
		return gaExpressionDsl.getConstantAccess();
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//NumValue:
	//	val=NUMBER;
	public ExpressionDslGrammarAccess.NumValueElements getNumValueAccess() {
		return gaExpressionDsl.getNumValueAccess();
	}
	
	public ParserRule getNumValueRule() {
		return getNumValueAccess().getRule();
	}

	//Identifier:
	//	ID | VERSION | EXPONENT | "version";
	public ExpressionDslGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaExpressionDsl.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//Type:
	//	name= // specific types will be dynamically loaded at start-up
	//	QualifiedPrefix | set="setOf" param=TypeParameters | seq="sequenceOf" param=TypeParameters | map="mapOf"
	//	param=TypeParameters;
	public ExpressionDslGrammarAccess.TypeElements getTypeAccess() {
		return gaExpressionDsl.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//TypeParameters:
	//	"(" param+=Type ("," param+=Type)* ")";
	public ExpressionDslGrammarAccess.TypeParametersElements getTypeParametersAccess() {
		return gaExpressionDsl.getTypeParametersAccess();
	}
	
	public ParserRule getTypeParametersRule() {
		return getTypeParametersAccess().getRule();
	}

	//ContainerInitializer:
	//	{ContainerInitializer} "{" (exprs+=ContainerInitializerExpression ("," exprs+=ContainerInitializerExpression)*)? "}";
	public ExpressionDslGrammarAccess.ContainerInitializerElements getContainerInitializerAccess() {
		return gaExpressionDsl.getContainerInitializerAccess();
	}
	
	public ParserRule getContainerInitializerRule() {
		return getContainerInitializerAccess().getRule();
	}

	//ContainerInitializerExpression:
	//	logical=LogicalExpression | container=ContainerInitializer;
	public ExpressionDslGrammarAccess.ContainerInitializerExpressionElements getContainerInitializerExpressionAccess() {
		return gaExpressionDsl.getContainerInitializerExpressionAccess();
	}
	
	public ParserRule getContainerInitializerExpressionRule() {
		return getContainerInitializerExpressionAccess().getRule();
	}

	//// --------------------- Terminals (from IVML)----------------------------------
	//// otherwise we would have to write 0 . 5 instead of 0.5
	//terminal VERSION:
	//	"v" "0".."9"+ ("." "0".."9"+)*;
	public TerminalRule getVERSIONRule() {
		return gaExpressionDsl.getVERSIONRule();
	} 

	//// adjust de.uni_hildesheim.sse.model.validation.IvmlIdentifierCheck
	//// never allow identifiers starting with $ -> Reasoner name prefixes
	//// here $ goes for meta names in dynamic IVML types
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "$") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaExpressionDsl.getIDRule();
	} 

	//terminal NUMBER:
	//	"-"? ("0".."9"+ ("." "0".."9"* EXPONENT?)? | "." "0".."9"+ EXPONENT? | "0".."9"+ EXPONENT);
	public TerminalRule getNUMBERRule() {
		return gaExpressionDsl.getNUMBERRule();
	} 

	//// just return a string
	//terminal EXPONENT:
	//	("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getEXPONENTRule() {
		return gaExpressionDsl.getEXPONENTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaExpressionDsl.getSTRINGRule();
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaExpressionDsl.getML_COMMENTRule();
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaExpressionDsl.getSL_COMMENTRule();
	} 

	//// do not change the name of this terminal!!! -> comment recognition
	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaExpressionDsl.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaExpressionDsl.getANY_OTHERRule();
	} 
}
