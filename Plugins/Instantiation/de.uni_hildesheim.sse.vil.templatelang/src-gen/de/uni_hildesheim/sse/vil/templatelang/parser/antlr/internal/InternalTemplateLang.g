/*
* generated by Xtext
*/
grammar InternalTemplateLang;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.uni_hildesheim.sse.vil.templatelang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_hildesheim.sse.vil.templatelang.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_hildesheim.sse.vil.templatelang.services.TemplateLangGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private TemplateLangGrammarAccess grammarAccess;
 	
    public InternalTemplateLangParser(TokenStream input, TemplateLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LanguageUnit";	
   	}
   	
   	@Override
   	protected TemplateLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLanguageUnit
entryRuleLanguageUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLanguageUnitRule()); }
	 iv_ruleLanguageUnit=ruleLanguageUnit 
	 { $current=$iv_ruleLanguageUnit.current; } 
	 EOF 
;

// Rule LanguageUnit
ruleLanguageUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getJavaExtsExtensionParserRuleCall_1_0()); 
	    }
		lv_javaExts_1_0=ruleExtension		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		add(
       			$current, 
       			"javaExts",
        		lv_javaExts_1_0, 
        		"Extension");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getAdvicesAdviceParserRuleCall_2_0()); 
	    }
		lv_advices_2_0=ruleAdvice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		add(
       			$current, 
       			"advices",
        		lv_advices_2_0, 
        		"Advice");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getIndentIndentationHintParserRuleCall_3_0()); 
	    }
		lv_indent_3_0=ruleIndentationHint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		set(
       			$current, 
       			"indent",
        		lv_indent_3_0, 
        		"IndentationHint");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='template' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLanguageUnitAccess().getTemplateKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getNameIdentifierParserRuleCall_5_0()); 
	    }
		lv_name_5_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLanguageUnitAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getParamParameterListParserRuleCall_7_0()); 
	    }
		lv_param_7_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_7_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLanguageUnitAccess().getRightParenthesisKeyword_8());
    }
(	otherlv_9='extends' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getLanguageUnitAccess().getExtendsKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getExtIdentifierParserRuleCall_9_1_0()); 
	    }
		lv_ext_10_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		set(
       			$current, 
       			"ext",
        		lv_ext_10_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getLanguageUnitAccess().getLeftCurlyBracketKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getVersionVersionStmtParserRuleCall_11_0()); 
	    }
		lv_version_12_0=ruleVersionStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		set(
       			$current, 
       			"version",
        		lv_version_12_0, 
        		"VersionStmt");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getTypeDefsTypeDefParserRuleCall_12_0()); 
	    }
		lv_typeDefs_13_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		add(
       			$current, 
       			"typeDefs",
        		lv_typeDefs_13_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getVarsVariableDeclarationParserRuleCall_13_0()); 
	    }
		lv_vars_14_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_14_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getDefsVilDefParserRuleCall_14_0()); 
	    }
		lv_defs_15_0=ruleVilDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		add(
       			$current, 
       			"defs",
        		lv_defs_15_0, 
        		"VilDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getLanguageUnitAccess().getRightCurlyBracketKeyword_15());
    }
)
;





// Entry rule entryRuleIndentationHint
entryRuleIndentationHint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndentationHintRule()); }
	 iv_ruleIndentationHint=ruleIndentationHint 
	 { $current=$iv_ruleIndentationHint.current; } 
	 EOF 
;

// Rule IndentationHint
ruleIndentationHint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@indent' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIndentationHintAccess().getIndentKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIndentationHintAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIndentationHintAccess().getPartsIndentationHintPartParserRuleCall_2_0()); 
	    }
		lv_parts_2_0=ruleIndentationHintPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndentationHintRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_2_0, 
        		"IndentationHintPart");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIndentationHintAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIndentationHintAccess().getPartsIndentationHintPartParserRuleCall_3_1_0()); 
	    }
		lv_parts_4_0=ruleIndentationHintPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndentationHintRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_4_0, 
        		"IndentationHintPart");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIndentationHintAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleIndentationHintPart
entryRuleIndentationHintPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndentationHintPartRule()); }
	 iv_ruleIndentationHintPart=ruleIndentationHintPart 
	 { $current=$iv_ruleIndentationHintPart.current; } 
	 EOF 
;

// Rule IndentationHintPart
ruleIndentationHintPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIndentationHintPartAccess().getNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndentationHintPartRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIndentationHintPartAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_NUMBER
		{
			newLeafNode(lv_value_2_0, grammarAccess.getIndentationHintPartAccess().getValueNUMBERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndentationHintPartRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"NUMBER");
	    }

)
))
;





// Entry rule entryRuleVilDef
entryRuleVilDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVilDefRule()); }
	 iv_ruleVilDef=ruleVilDef 
	 { $current=$iv_ruleVilDef.current; } 
	 EOF 
;

// Rule VilDef
ruleVilDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='def' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVilDefAccess().getDefKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVilDefAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVilDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVilDefAccess().getIdIdentifierParserRuleCall_2_0()); 
	    }
		lv_id_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVilDefRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVilDefAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVilDefAccess().getParamParameterListParserRuleCall_4_0()); 
	    }
		lv_param_4_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVilDefRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_4_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVilDefAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVilDefAccess().getStmtsStmtBlockParserRuleCall_6_0()); 
	    }
		lv_stmts_6_0=ruleStmtBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVilDefRule());
	        }
       		set(
       			$current, 
       			"stmts",
        		lv_stmts_6_0, 
        		"StmtBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getVilDefAccess().getSemicolonKeyword_7());
    }
)?)
;





// Entry rule entryRuleStmtBlock
entryRuleStmtBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStmtBlockRule()); }
	 iv_ruleStmtBlock=ruleStmtBlock 
	 { $current=$iv_ruleStmtBlock.current; } 
	 EOF 
;

// Rule StmtBlock
ruleStmtBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStmtBlockAccess().getStmtBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStmtBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtBlockAccess().getStmtsStmtParserRuleCall_2_0()); 
	    }
		lv_stmts_2_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtBlockRule());
	        }
       		add(
       			$current, 
       			"stmts",
        		lv_stmts_2_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStmtBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	 iv_ruleStmt=ruleStmt 
	 { $current=$iv_ruleStmt.current; } 
	 EOF 
;

// Rule Stmt
ruleStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getVarVariableDeclarationParserRuleCall_0_0()); 
	    }
		lv_var_0_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getAltAlternativeParserRuleCall_1_0()); 
	    }
		lv_alt_1_0=ruleAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"alt",
        		lv_alt_1_0, 
        		"Alternative");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getSwitchSwitchParserRuleCall_2_0()); 
	    }
		lv_switch_2_0=ruleSwitch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_2_0, 
        		"Switch");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getBlockStmtBlockParserRuleCall_3_0()); 
	    }
		lv_block_3_0=ruleStmtBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_3_0, 
        		"StmtBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getMultiMultiselectParserRuleCall_4_0()); 
	    }
		lv_multi_4_0=rulemultiselect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"multi",
        		lv_multi_4_0, 
        		"multiselect");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getLoopLoopParserRuleCall_5_0()); 
	    }
		lv_loop_5_0=ruleLoop		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"loop",
        		lv_loop_5_0, 
        		"Loop");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getExprStmtExpressionStatementParserRuleCall_6_0()); 
	    }
		lv_exprStmt_6_0=ruleExpressionStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"exprStmt",
        		lv_exprStmt_6_0, 
        		"ExpressionStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtAccess().getCtnContentParserRuleCall_7_0()); 
	    }
		lv_ctn_7_0=ruleContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtRule());
	        }
       		set(
       			$current, 
       			"ctn",
        		lv_ctn_7_0, 
        		"Content");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAlternative
entryRuleAlternative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativeRule()); }
	 iv_ruleAlternative=ruleAlternative 
	 { $current=$iv_ruleAlternative.current; } 
	 EOF 
;

// Rule Alternative
ruleAlternative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlternativeAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAlternativeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAlternativeAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeAccess().getIfStmtParserRuleCall_4_0()); 
	    }
		lv_if_4_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_4_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAlternativeAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeAccess().getElseStmtParserRuleCall_5_1_0()); 
	    }
		lv_else_6_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_6_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleContent
entryRuleContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContentRule()); }
	 iv_ruleContent=ruleContent 
	 { $current=$iv_ruleContent.current; } 
	 EOF 
;

// Rule Content
ruleContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_print_0_0=	'print' 
    {
        newLeafNode(lv_print_0_0, grammarAccess.getContentAccess().getPrintPrintKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContentRule());
	        }
       		setWithLastConsumed($current, "print", lv_print_0_0, "print");
	    }

)
)?(
(
		lv_ctn_1_0=RULE_STRING
		{
			newLeafNode(lv_ctn_1_0, grammarAccess.getContentAccess().getCtnSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ctn",
        		lv_ctn_1_0, 
        		"STRING");
	    }

)
)(	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getContentAccess().getVerticalLineKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContentAccess().getIndentExpressionParserRuleCall_2_1_0()); 
	    }
		lv_indent_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContentRule());
	        }
       		set(
       			$current, 
       			"indent",
        		lv_indent_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getContentAccess().getSemicolonKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleSwitch
entryRuleSwitch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchRule()); }
	 iv_ruleSwitch=ruleSwitch 
	 { $current=$iv_ruleSwitch.current; } 
	 EOF 
;

// Rule Switch
ruleSwitch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchAccess().getSwitchKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchAccess().getLeftCurlyBracketKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getPartsSwitchPartParserRuleCall_5_0_0()); 
	    }
		lv_parts_5_0=ruleSwitchPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_5_0, 
        		"SwitchPart");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSwitchAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getPartsSwitchPartParserRuleCall_5_1_1_0()); 
	    }
		lv_parts_7_0=ruleSwitchPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_7_0, 
        		"SwitchPart");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSwitchAccess().getCommaKeyword_5_2_0());
    }
	otherlv_9='default' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSwitchAccess().getDefaultKeyword_5_2_1());
    }
	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSwitchAccess().getColonKeyword_5_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getDfltExpressionParserRuleCall_5_2_3_0()); 
	    }
		lv_dflt_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"dflt",
        		lv_dflt_11_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSwitchAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleSwitchPart
entryRuleSwitchPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchPartRule()); }
	 iv_ruleSwitchPart=ruleSwitchPart 
	 { $current=$iv_ruleSwitchPart.current; } 
	 EOF 
;

// Rule SwitchPart
ruleSwitchPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchPartAccess().getLeftExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchPartRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchPartAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchPartAccess().getRightExpressionParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchPartRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	 iv_ruleLoop=ruleLoop 
	 { $current=$iv_ruleLoop.current; } 
	 EOF 
;

// Rule Loop
ruleLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getIdIdentifierParserRuleCall_3_0()); 
	    }
		lv_id_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoopAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getExprExpressionParserRuleCall_5_0()); 
	    }
		lv_expr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLoopAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getSeparatorPrimaryExpressionParserRuleCall_6_1_0()); 
	    }
		lv_separator_7_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"separator",
        		lv_separator_7_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLoopAccess().getCommaKeyword_6_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getFinalSeparatorPrimaryExpressionParserRuleCall_6_2_1_0()); 
	    }
		lv_finalSeparator_9_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"finalSeparator",
        		lv_finalSeparator_9_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLoopAccess().getRightParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getStmtStmtParserRuleCall_8_0()); 
	    }
		lv_stmt_11_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_11_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulemultiselect
entryRulemultiselect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiselectRule()); }
	 iv_rulemultiselect=rulemultiselect 
	 { $current=$iv_rulemultiselect.current; } 
	 EOF 
;

// Rule multiselect
rulemultiselect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiselectAccess().getGenGenericMultiselectParserRuleCall_0_0()); 
	    }
		lv_gen_0_0=rulegenericMultiselect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiselectRule());
	        }
       		set(
       			$current, 
       			"gen",
        		lv_gen_0_0, 
        		"genericMultiselect");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiselectAccess().getUserUserMultiselectParserRuleCall_1_0()); 
	    }
		lv_user_1_0=ruleuserMultiselect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiselectRule());
	        }
       		set(
       			$current, 
       			"user",
        		lv_user_1_0, 
        		"userMultiselect");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulegenericMultiselect
entryRulegenericMultiselect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericMultiselectRule()); }
	 iv_rulegenericMultiselect=rulegenericMultiselect 
	 { $current=$iv_rulegenericMultiselect.current; } 
	 EOF 
;

// Rule genericMultiselect
rulegenericMultiselect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='multiSelect' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGenericMultiselectAccess().getMultiSelectKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMultiselectAccess().getPreambleStmtBlockParserRuleCall_1_0()); 
	    }
		lv_preamble_1_0=ruleStmtBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMultiselectRule());
	        }
       		set(
       			$current, 
       			"preamble",
        		lv_preamble_1_0, 
        		"StmtBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMultiselectAccess().getSelectorStmtBlockParserRuleCall_2_0()); 
	    }
		lv_selector_2_0=ruleStmtBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMultiselectRule());
	        }
       		set(
       			$current, 
       			"selector",
        		lv_selector_2_0, 
        		"StmtBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMultiselectAccess().getPartMultiSelectPartParserRuleCall_3_0()); 
	    }
		lv_part_3_0=rulemultiSelectPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMultiselectRule());
	        }
       		add(
       			$current, 
       			"part",
        		lv_part_3_0, 
        		"multiSelectPart");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMultiselectAccess().getTrailerStmtBlockParserRuleCall_4_0()); 
	    }
		lv_trailer_4_0=ruleStmtBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMultiselectRule());
	        }
       		set(
       			$current, 
       			"trailer",
        		lv_trailer_4_0, 
        		"StmtBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulemultiSelectPart
entryRulemultiSelectPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiSelectPartRule()); }
	 iv_rulemultiSelectPart=rulemultiSelectPart 
	 { $current=$iv_rulemultiSelectPart.current; } 
	 EOF 
;

// Rule multiSelectPart
rulemultiSelectPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultiSelectPartAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiSelectPartAccess().getCaseExpressionParserRuleCall_1_0()); 
	    }
		lv_case_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiSelectPartRule());
	        }
       		set(
       			$current, 
       			"case",
        		lv_case_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiSelectPartAccess().getCodeStmtBlockParserRuleCall_2_0()); 
	    }
		lv_code_2_0=ruleStmtBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiSelectPartRule());
	        }
       		set(
       			$current, 
       			"code",
        		lv_code_2_0, 
        		"StmtBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiSelectPartAccess().getSelectorStmtBlockParserRuleCall_3_0()); 
	    }
		lv_selector_3_0=ruleStmtBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiSelectPartRule());
	        }
       		set(
       			$current, 
       			"selector",
        		lv_selector_3_0, 
        		"StmtBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleuserMultiselect
entryRuleuserMultiselect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUserMultiselectRule()); }
	 iv_ruleuserMultiselect=ruleuserMultiselect 
	 { $current=$iv_ruleuserMultiselect.current; } 
	 EOF 
;

// Rule userMultiselect
ruleuserMultiselect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUserMultiselectAccess().getIdIdentifierParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUserMultiselectRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUserMultiselectAccess().getColonEqualsSignKeyword_1());
    }
	otherlv_2='generic-multiSelect' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUserMultiselectAccess().getGenericMultiSelectKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUserMultiselectAccess().getStmtStmtBlockParserRuleCall_3_0()); 
	    }
		lv_stmt_3_0=ruleStmtBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUserMultiselectRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_3_0, 
        		"StmtBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUserMultiselectAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleExtension
entryRuleExtension returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtensionRule()); }
	 iv_ruleExtension=ruleExtension 
	 { $current=$iv_ruleExtension.current; } 
	 EOF 
;

// Rule Extension
ruleExtension returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extension' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtensionAccess().getExtensionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtensionAccess().getNameJavaQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleJavaQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtensionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"JavaQualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtensionAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleJavaQualifiedName
entryRuleJavaQualifiedName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaQualifiedNameRule()); }
	 iv_ruleJavaQualifiedName=ruleJavaQualifiedName 
	 { $current=$iv_ruleJavaQualifiedName.current; } 
	 EOF 
;

// Rule JavaQualifiedName
ruleJavaQualifiedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJavaQualifiedNameAccess().getQnameIdentifierParserRuleCall_0_0()); 
	    }
		lv_qname_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaQualifiedNameRule());
	        }
       		add(
       			$current, 
       			"qname",
        		lv_qname_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_qname_1_0=	'.' 
    {
        newLeafNode(lv_qname_1_0, grammarAccess.getJavaQualifiedNameAccess().getQnameFullStopKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJavaQualifiedNameRule());
	        }
       		addWithLastConsumed($current, "qname", lv_qname_1_0, ".");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); 
	    }
		lv_qname_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaQualifiedNameRule());
	        }
       		add(
       			$current, 
       			"qname",
        		lv_qname_2_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_const_0_0=	'const' 
    {
        newLeafNode(lv_const_0_0, grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "const", lv_const_0_0, "const");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameIdentifierParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='typedef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDefAccess().getTypedefKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDefAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAdvice
entryRuleAdvice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdviceRule()); }
	 iv_ruleAdvice=ruleAdvice 
	 { $current=$iv_ruleAdvice.current; } 
	 EOF 
;

// Rule Advice
ruleAdvice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@advice' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAdviceAccess().getAdviceKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdviceAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdviceAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdviceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAdviceAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdviceAccess().getVersionSpecVersionSpecParserRuleCall_4_0()); 
	    }
		lv_versionSpec_4_0=ruleVersionSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdviceRule());
	        }
       		set(
       			$current, 
       			"versionSpec",
        		lv_versionSpec_4_0, 
        		"VersionSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleVersionSpec
entryRuleVersionSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVersionSpecRule()); }
	 iv_ruleVersionSpec=ruleVersionSpec 
	 { $current=$iv_ruleVersionSpec.current; } 
	 EOF 
;

// Rule VersionSpec
ruleVersionSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='with' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVersionSpecAccess().getWithKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVersionSpecAccess().getRestrictionExpressionParserRuleCall_1_0()); 
	    }
		lv_restriction_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVersionSpecRule());
	        }
       		set(
       			$current, 
       			"restriction",
        		lv_restriction_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_0_0()); 
	    }
		lv_param_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_1_1_0()); 
	    }
		lv_param_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVersionStmt
entryRuleVersionStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVersionStmtRule()); }
	 iv_ruleVersionStmt=ruleVersionStmt 
	 { $current=$iv_ruleVersionStmt.current; } 
	 EOF 
;

// Rule VersionStmt
ruleVersionStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='version' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVersionStmtAccess().getVersionKeyword_0());
    }
(
(
		lv_version_1_0=RULE_VERSION
		{
			newLeafNode(lv_version_1_0, grammarAccess.getVersionStmtAccess().getVersionVERSIONTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVersionStmtRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"version",
        		lv_version_1_0, 
        		"VERSION");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVersionStmtAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getVersionSpecVersionSpecParserRuleCall_2_0()); 
	    }
		lv_versionSpec_2_0=ruleVersionSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"versionSpec",
        		lv_versionSpec_2_0, 
        		"VersionSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current; } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getVarIdentifierParserRuleCall_0_0_0()); 
	    }
		lv_var_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionStatementAccess().getFullStopKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getFieldIdentifierParserRuleCall_0_1_1_0()); 
	    }
		lv_field_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_2_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionStatementAccess().getEqualsSignKeyword_0_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprLogicalExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleLogicalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"LogicalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getInitContainerInitializerParserRuleCall_1_0()); 
	    }
		lv_init_1_0=ruleContainerInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_1_0, 
        		"ContainerInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	 iv_ruleLogicalExpression=ruleLogicalExpression 
	 { $current=$iv_ruleLogicalExpression.current; } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getLeftEqualityExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionPartParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleLogicalExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"LogicalExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleLogicalExpressionPart
entryRuleLogicalExpressionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpressionPartRule()); }
	 iv_ruleLogicalExpressionPart=ruleLogicalExpressionPart 
	 { $current=$iv_ruleLogicalExpressionPart.current; } 
	 EOF 
;

// Rule LogicalExpressionPart
ruleLogicalExpressionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionPartAccess().getOpLogicalOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleLogicalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionPartRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"LogicalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionPartAccess().getExEqualityExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionPartRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOperatorRule()); } 
	 iv_ruleLogicalOperator=ruleLogicalOperator 
	 { $current=$iv_ruleLogicalOperator.current.getText(); }  
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); 
    }

    |
	kw='xor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getXorKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionPartParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleEqualityExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"EqualityExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEqualityExpressionPart
entryRuleEqualityExpressionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionPartRule()); }
	 iv_ruleEqualityExpressionPart=ruleEqualityExpressionPart 
	 { $current=$iv_ruleEqualityExpressionPart.current; } 
	 EOF 
;

// Rule EqualityExpressionPart
ruleEqualityExpressionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionPartAccess().getOpEqualityOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleEqualityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionPartRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"EqualityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionPartAccess().getExRelationalExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionPartRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEqualityOperator
entryRuleEqualityOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityOperatorRule()); } 
	 iv_ruleEqualityOperator=ruleEqualityOperator 
	 { $current=$iv_ruleEqualityOperator.current.getText(); }  
	 EOF 
;

// Rule EqualityOperator
ruleEqualityOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getLeftAdditiveExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionPartParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleRelationalExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"RelationalExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleRelationalExpressionPart
entryRuleRelationalExpressionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionPartRule()); }
	 iv_ruleRelationalExpressionPart=ruleRelationalExpressionPart 
	 { $current=$iv_ruleRelationalExpressionPart.current; } 
	 EOF 
;

// Rule RelationalExpressionPart
ruleRelationalExpressionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionPartAccess().getOpRelationalOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionPartRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionPartAccess().getExAdditiveExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionPartRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOperatorRule()); } 
	 iv_ruleRelationalOperator=ruleRelationalOperator 
	 { $current=$iv_ruleRelationalOperator.current.getText(); }  
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getLeftMultiplicativeExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionPartParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleAdditiveExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"AdditiveExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAdditiveExpressionPart
entryRuleAdditiveExpressionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionPartRule()); }
	 iv_ruleAdditiveExpressionPart=ruleAdditiveExpressionPart 
	 { $current=$iv_ruleAdditiveExpressionPart.current; } 
	 EOF 
;

// Rule AdditiveExpressionPart
ruleAdditiveExpressionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionPartAccess().getOpAdditiveOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionPartRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"AdditiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionPartAccess().getExMultiplicativeExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionPartRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAdditiveOperator
entryRuleAdditiveOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveOperatorRule()); } 
	 iv_ruleAdditiveOperator=ruleAdditiveOperator 
	 { $current=$iv_ruleAdditiveOperator.current.getText(); }  
	 EOF 
;

// Rule AdditiveOperator
ruleAdditiveOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionPartParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleMultiplicativeExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"MultiplicativeExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleMultiplicativeExpressionPart
entryRuleMultiplicativeExpressionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionPartRule()); }
	 iv_ruleMultiplicativeExpressionPart=ruleMultiplicativeExpressionPart 
	 { $current=$iv_ruleMultiplicativeExpressionPart.current; } 
	 EOF 
;

// Rule MultiplicativeExpressionPart
ruleMultiplicativeExpressionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionPartAccess().getOpMultiplicativeOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleMultiplicativeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionPartRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"MultiplicativeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionPartAccess().getExprUnaryExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionPartRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeOperatorRule()); } 
	 iv_ruleMultiplicativeOperator=ruleMultiplicativeOperator 
	 { $current=$iv_ruleMultiplicativeOperator.current.getText(); }  
	 EOF 
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=rulePostfixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"PostfixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); } 
	 iv_ruleUnaryOperator=ruleUnaryOperator 
	 { $current=$iv_ruleUnaryOperator.current.getText(); }  
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getNotKeyword_0()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_1()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_2()); 
    }
)
    ;





// Entry rule entryRulePostfixExpression
entryRulePostfixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixExpressionRule()); }
	 iv_rulePostfixExpression=rulePostfixExpression 
	 { $current=$iv_rulePostfixExpression.current; } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftPrimaryExpressionParserRuleCall_0()); 
	    }
		lv_left_0_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0()); 
	    }
		lv_otherEx_0_0=ruleExpressionOrQualifiedExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"otherEx",
        		lv_otherEx_0_0, 
        		"ExpressionOrQualifiedExecution");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getUnqExUnqualifiedExecutionParserRuleCall_1_0()); 
	    }
		lv_unqEx_1_0=ruleUnqualifiedExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"unqEx",
        		lv_unqEx_1_0, 
        		"UnqualifiedExecution");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperExSuperExecutionParserRuleCall_2_0()); 
	    }
		lv_superEx_2_0=ruleSuperExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"superEx",
        		lv_superEx_2_0, 
        		"SuperExecution");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNewExConstructorExecutionParserRuleCall_3_0()); 
	    }
		lv_newEx_3_0=ruleConstructorExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"newEx",
        		lv_newEx_3_0, 
        		"ConstructorExecution");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpressionOrQualifiedExecution
entryRuleExpressionOrQualifiedExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionOrQualifiedExecutionRule()); }
	 iv_ruleExpressionOrQualifiedExecution=ruleExpressionOrQualifiedExecution 
	 { $current=$iv_ruleExpressionOrQualifiedExecution.current; } 
	 EOF 
;

// Rule ExpressionOrQualifiedExecution
ruleExpressionOrQualifiedExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValConstantParserRuleCall_0_0_0()); 
	    }
		lv_val_0_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionOrQualifiedExecutionRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionOrQualifiedExecutionAccess().getLeftParenthesisKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisExpressionParserRuleCall_0_1_1_0()); 
	    }
		lv_parenthesis_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionOrQualifiedExecutionRule());
	        }
       		set(
       			$current, 
       			"parenthesis",
        		lv_parenthesis_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionOrQualifiedExecutionAccess().getRightParenthesisKeyword_0_1_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); 
	    }
		lv_calls_4_0=ruleSubCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionOrQualifiedExecutionRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_4_0, 
        		"SubCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleUnqualifiedExecution
entryRuleUnqualifiedExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnqualifiedExecutionRule()); }
	 iv_ruleUnqualifiedExecution=ruleUnqualifiedExecution 
	 { $current=$iv_ruleUnqualifiedExecution.current; } 
	 EOF 
;

// Rule UnqualifiedExecution
ruleUnqualifiedExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnqualifiedExecutionAccess().getCallCallParserRuleCall_0_0()); 
	    }
		lv_call_0_0=ruleCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnqualifiedExecutionRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_0_0, 
        		"Call");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnqualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); 
	    }
		lv_calls_1_0=ruleSubCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnqualifiedExecutionRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_1_0, 
        		"SubCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSuperExecution
entryRuleSuperExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuperExecutionRule()); }
	 iv_ruleSuperExecution=ruleSuperExecution 
	 { $current=$iv_ruleSuperExecution.current; } 
	 EOF 
;

// Rule SuperExecution
ruleSuperExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='super' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSuperExecutionAccess().getSuperKeyword_0());
    }
	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSuperExecutionAccess().getFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuperExecutionAccess().getCallCallParserRuleCall_2_0()); 
	    }
		lv_call_2_0=ruleCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuperExecutionRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_2_0, 
        		"Call");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSuperExecutionAccess().getCallsSubCallParserRuleCall_3_0()); 
	    }
		lv_calls_3_0=ruleSubCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuperExecutionRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_3_0, 
        		"SubCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleConstructorExecution
entryRuleConstructorExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorExecutionRule()); }
	 iv_ruleConstructorExecution=ruleConstructorExecution 
	 { $current=$iv_ruleConstructorExecution.current; } 
	 EOF 
;

// Rule ConstructorExecution
ruleConstructorExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstructorExecutionAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorExecutionAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorExecutionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstructorExecutionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorExecutionAccess().getParamArgumentListParserRuleCall_3_0()); 
	    }
		lv_param_3_0=ruleArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorExecutionRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"ArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstructorExecutionAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorExecutionAccess().getCallsSubCallParserRuleCall_5_0()); 
	    }
		lv_calls_5_0=ruleSubCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorExecutionRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_5_0, 
        		"SubCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSubCall
entryRuleSubCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubCallRule()); }
	 iv_ruleSubCall=ruleSubCall 
	 { $current=$iv_ruleSubCall.current; } 
	 EOF 
;

// Rule SubCall
ruleSubCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
		lv_type_0_1=	'.' 
    {
        newLeafNode(lv_type_0_1, grammarAccess.getSubCallAccess().getTypeFullStopKeyword_0_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubCallRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_1, null);
	    }

    |		lv_type_0_2=	'->' 
    {
        newLeafNode(lv_type_0_2, grammarAccess.getSubCallAccess().getTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubCallRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubCallAccess().getCallCallParserRuleCall_0_1_0()); 
	    }
		lv_call_1_0=ruleCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubCallRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_1_0, 
        		"Call");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubCallAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubCallAccess().getArrayExExpressionParserRuleCall_1_1_0()); 
	    }
		lv_arrayEx_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubCallRule());
	        }
       		set(
       			$current, 
       			"arrayEx",
        		lv_arrayEx_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubCallAccess().getRightSquareBracketKeyword_1_2());
    }
))
;





// Entry rule entryRuleDeclarator
entryRuleDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaratorRule()); }
	 iv_ruleDeclarator=ruleDeclarator 
	 { $current=$iv_ruleDeclarator.current; } 
	 EOF 
;

// Rule Declarator
ruleDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_0_0()); 
	    }
		lv_decl_0_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaratorRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_0_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclaratorAccess().getSemicolonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_1_1_0()); 
	    }
		lv_decl_2_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaratorRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_2_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_2());
    }
)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getIdIdentifierParserRuleCall_1_0()); 
	    }
		lv_id_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeclarationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getIdIdentifierParserRuleCall_2_1_0()); 
	    }
		lv_id_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	 iv_ruleCall=ruleCall 
	 { $current=$iv_ruleCall.current; } 
	 EOF 
;

// Rule Call
ruleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getNameQualifiedPrefixParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleQualifiedPrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"QualifiedPrefix");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getDeclDeclaratorParserRuleCall_2_0()); 
	    }
		lv_decl_2_0=ruleDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"decl",
        		lv_decl_2_0, 
        		"Declarator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getParamArgumentListParserRuleCall_3_0()); 
	    }
		lv_param_3_0=ruleArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"ArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCallAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleArgumentList
entryRuleArgumentList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentListRule()); }
	 iv_ruleArgumentList=ruleArgumentList 
	 { $current=$iv_ruleArgumentList.current; } 
	 EOF 
;

// Rule ArgumentList
ruleArgumentList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_0_0()); 
	    }
		lv_param_0_0=ruleNamedArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentListRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"NamedArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_1_1_0()); 
	    }
		lv_param_2_0=ruleNamedArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentListRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_2_0, 
        		"NamedArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNamedArgument
entryRuleNamedArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedArgumentRule()); }
	 iv_ruleNamedArgument=ruleNamedArgument 
	 { $current=$iv_ruleNamedArgument.current; } 
	 EOF 
;

// Rule NamedArgument
ruleNamedArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getNamedArgumentAccess().getNameIdentifierParserRuleCall_0_0_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedArgumentRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamedArgumentAccess().getEqualsSignKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedArgumentAccess().getExExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedArgumentRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedPrefix
entryRuleQualifiedPrefix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedPrefixRule()); }
	 iv_ruleQualifiedPrefix=ruleQualifiedPrefix 
	 { $current=$iv_ruleQualifiedPrefix.current; } 
	 EOF 
;

// Rule QualifiedPrefix
ruleQualifiedPrefix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_0_0()); 
	    }
		lv_qname_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedPrefixRule());
	        }
       		add(
       			$current, 
       			"qname",
        		lv_qname_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_qname_1_0=	'::' 
    {
        newLeafNode(lv_qname_1_0, grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedPrefixRule());
	        }
       		addWithLastConsumed($current, "qname", lv_qname_1_0, "::");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_1_1_0()); 
	    }
		lv_qname_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedPrefixRule());
	        }
       		add(
       			$current, 
       			"qname",
        		lv_qname_2_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current; } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameAccess().getPrefixQualifiedPrefixParserRuleCall_0_0()); 
	    }
		lv_prefix_0_0=ruleQualifiedPrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameRule());
	        }
       		set(
       			$current, 
       			"prefix",
        		lv_prefix_0_0, 
        		"QualifiedPrefix");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_qname_1_0=	'.' 
    {
        newLeafNode(lv_qname_1_0, grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedNameRule());
	        }
       		addWithLastConsumed($current, "qname", lv_qname_1_0, ".");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); 
	    }
		lv_qname_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameRule());
	        }
       		add(
       			$current, 
       			"qname",
        		lv_qname_2_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getNValueNumValueParserRuleCall_0_0()); 
	    }
		lv_nValue_0_0=ruleNumValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"nValue",
        		lv_nValue_0_0, 
        		"NumValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_sValue_1_0=RULE_STRING
		{
			newLeafNode(lv_sValue_1_0, grammarAccess.getConstantAccess().getSValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sValue",
        		lv_sValue_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getQValueQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_qValue_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"qValue",
        		lv_qValue_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
(
		lv_bValue_3_1=	'true' 
    {
        newLeafNode(lv_bValue_3_1, grammarAccess.getConstantAccess().getBValueTrueKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed($current, "bValue", lv_bValue_3_1, null);
	    }

    |		lv_bValue_3_2=	'false' 
    {
        newLeafNode(lv_bValue_3_2, grammarAccess.getConstantAccess().getBValueFalseKeyword_3_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed($current, "bValue", lv_bValue_3_2, null);
	    }

)

)
)
    |(
(
		lv_null_4_0=	'null' 
    {
        newLeafNode(lv_null_4_0, grammarAccess.getConstantAccess().getNullNullKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed($current, "null", lv_null_4_0, "null");
	    }

)
)
    |((
(
RULE_VERSION

)
)=>
(
		lv_version_5_0=RULE_VERSION
		{
			newLeafNode(lv_version_5_0, grammarAccess.getConstantAccess().getVersionVERSIONTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"version",
        		lv_version_5_0, 
        		"VERSION");
	    }

)
))
;





// Entry rule entryRuleNumValue
entryRuleNumValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumValueRule()); }
	 iv_ruleNumValue=ruleNumValue 
	 { $current=$iv_ruleNumValue.current; } 
	 EOF 
;

// Rule NumValue
ruleNumValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_NUMBER
		{
			newLeafNode(lv_val_0_0, grammarAccess.getNumValueAccess().getValNUMBERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"NUMBER");
	    }

)
)
;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_VERSION_1=RULE_VERSION    {
		$current.merge(this_VERSION_1);
    }

    { 
    newLeafNode(this_VERSION_1, grammarAccess.getIdentifierAccess().getVERSIONTerminalRuleCall_1()); 
    }

    |    this_EXPONENT_2=RULE_EXPONENT    {
		$current.merge(this_EXPONENT_2);
    }

    { 
    newLeafNode(this_EXPONENT_2, grammarAccess.getIdentifierAccess().getEXPONENTTerminalRuleCall_2()); 
    }

    |
	kw='version' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdentifierAccess().getVersionKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getNameQualifiedPrefixParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleQualifiedPrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"QualifiedPrefix");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_set_1_0=	'setOf' 
    {
        newLeafNode(lv_set_1_0, grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "set", lv_set_1_0, "setOf");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_1_1_0()); 
	    }
		lv_param_2_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_2_0, 
        		"TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_seq_3_0=	'sequenceOf' 
    {
        newLeafNode(lv_seq_3_0, grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "seq", lv_seq_3_0, "sequenceOf");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_2_1_0()); 
	    }
		lv_param_4_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_4_0, 
        		"TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_map_5_0=	'mapOf' 
    {
        newLeafNode(lv_map_5_0, grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "map", lv_map_5_0, "mapOf");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_3_1_0()); 
	    }
		lv_param_6_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_6_0, 
        		"TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_call_7_0=	'callOf' 
    {
        newLeafNode(lv_call_7_0, grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "call", lv_call_7_0, "callOf");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getReturnTypeParserRuleCall_4_1_0()); 
	    }
		lv_return_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_8_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_4_2_0()); 
	    }
		lv_param_9_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_9_0, 
        		"TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleTypeParameters
entryRuleTypeParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParametersRule()); }
	 iv_ruleTypeParameters=ruleTypeParameters 
	 { $current=$iv_ruleTypeParameters.current; } 
	 EOF 
;

// Rule TypeParameters
ruleTypeParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeParametersAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_1_0()); 
	    }
		lv_param_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParametersRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_2_1_0()); 
	    }
		lv_param_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParametersRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeParametersAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleContainerInitializer
entryRuleContainerInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainerInitializerRule()); }
	 iv_ruleContainerInitializer=ruleContainerInitializer 
	 { $current=$iv_ruleContainerInitializer.current; } 
	 EOF 
;

// Rule ContainerInitializer
ruleContainerInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getContainerInitializerAccess().getContainerInitializerAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContainerInitializerAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_0_0()); 
	    }
		lv_exprs_2_0=ruleContainerInitializerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerInitializerRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"ContainerInitializerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getContainerInitializerAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_exprs_4_0=ruleContainerInitializerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerInitializerRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_4_0, 
        		"ContainerInitializerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getContainerInitializerAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleContainerInitializerExpression
entryRuleContainerInitializerExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainerInitializerExpressionRule()); }
	 iv_ruleContainerInitializerExpression=ruleContainerInitializerExpression 
	 { $current=$iv_ruleContainerInitializerExpression.current; } 
	 EOF 
;

// Rule ContainerInitializerExpression
ruleContainerInitializerExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getContainerInitializerExpressionAccess().getLogicalLogicalExpressionParserRuleCall_0_0()); 
	    }
		lv_logical_0_0=ruleLogicalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerInitializerExpressionRule());
	        }
       		set(
       			$current, 
       			"logical",
        		lv_logical_0_0, 
        		"LogicalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerInitializerExpressionAccess().getContainerContainerInitializerParserRuleCall_1_0()); 
	    }
		lv_container_1_0=ruleContainerInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerInitializerExpressionRule());
	        }
       		set(
       			$current, 
       			"container",
        		lv_container_1_0, 
        		"ContainerInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_VERSION : 'v' ('0'..'9')+ ('.' ('0'..'9')+)*;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NUMBER : '-'? (('0'..'9')+ ('.' ('0'..'9')* RULE_EXPONENT?)?|'.' ('0'..'9')+ RULE_EXPONENT?|('0'..'9')+ RULE_EXPONENT);

RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


