project setFunctions {

    compound Cmp {
        sequenceOf(refTo(Cmp)) next;
    }

    setOf(Integer) var = {1, 2, 3};
    setOf(refTo(Cmp)) cmps;
    setOf(Cmp) c;
    sequenceOf(Integer) seq;
    String s;
    Integer i;
    var == {1, 2, 3};
    var <> {1, 2, 3};
    isDefined(var);
    //* isDefined(var);
    var.isDefined();
    isKindOf(var, setOf(Integer));
    //* isKindOf(var, setOf(Integer));
    var.isKindOf(setOf(Integer));
    isTypeOf(var, setOf(Integer));
    //* isTypeOf(var, setOf(Integer));
    var.isTypeOf(setOf(Integer));
    s = locale(var);
    //* s = locale(var);
    s = var.locale();
    isKindOf(var, typeOf(var));
    //* isKindOf(var, typeOf(var));
    var.isKindOf(var.typeOf());
    s = asType(var, String);
    //* s = asType(var, String);
    s = var.asType(String);
    i = var->any(a|a > 0);
    i = avg(var);
    //* i = avg(var);
    i = var.avg();
    //* i = avg(var);
    i = var->avg();
    var = var->collect(a|a + 1);
    var = var->collectNested(a|a + 1);
    c = cmps->closure(c|c.next);
    i = count(var, 1);
    //* i = count(var, 1);
    i = var.count(1);
    //* i = count(var, 1);
    i = var->count(1);
    excludes(var, 1);
    //* excludes(var, 1);
    var.excludes(1);
    //* excludes(var, 1);
    var->excludes(1);
    excludesAll(var, var);
    //* excludesAll(var, var);
    var.excludesAll(var);
    //* excludesAll(var, var);
    var->excludesAll(var);
    var->exists(a|a > 0);
    var->forAll(a|a > 0);
    includes(var, 1);
    //* includes(var, 1);
    var.includes(1);
    //* includes(var, 1);
    var->includes(1);
    includesAll(var, var);
    //* includesAll(var, var);
    var.includesAll(var);
    //* includesAll(var, var);
    var->includesAll(var);
    cmps->isAcyclic(c|c.next);
    isEmpty(var);
    //* isEmpty(var);
    var.isEmpty();
    isDefined(var);
    //* isDefined(var);
    var.isDefined();
    var->isUnique(a|a);
    i = var->apply(a;Integer r = 1|r = r * a);
    i = var->iterate(a;Integer r = 1|r = r * a);
    i = min(var);
    //* i = min(var);
    i = var.min();
    //* i = min(var);
    i = var->min();
    i = var->min(a|a * 10);
    i = max(var);
    //* i = max(var);
    i = var.max();
    //* i = max(var);
    i = var->max();
    i = var->max(a|a * 10);
    notEmpty(var);
    //* notEmpty(var);
    var.notEmpty();
    //* notEmpty(var);
    var->notEmpty();
    var->one(a|a > 10);
    i = product(var);
    //* i = product(var);
    i = var.product();
    //* i = product(var);
    i = var->product();
    var = var->reject(a|a < 10);
    var = var->select(a|a < 10);
    i = size(var);
    //* i = size(var);
    i = var.size();
    //* i = size(var);
    i = var->size();
    var = var->sortedBy(a|a);
    i = sum(var);
    //* i = sum(var);
    i = var.sum();
    //* i = sum(var);
    i = var->sum();
    var = var;
    var == var;
    //* var == var;
    var .==(var);
    var <> var;
    //* var <> var;
    var .<>(var);
    //* var <> var;
    var != var;
    //* var != var;
    var .!=(var);
    var = var - var;
    //* var = var - var;
    var = var .- (var);
    i = add(var, 1);
    //* i = add(var, 1);
    i = var.add(1);
    //* i = add(var, 1);
    i = var->add(1);
    var = excluding(var, 7);
    //* var = excluding(var, 7);
    var = var.excluding(7);
    //* var = excluding(var, 7);
    var = var->excluding(7);
    var = flatten(var);
    //* var = flatten(var);
    var = var.flatten();
    //* var = flatten(var);
    var = var->flatten();
    var = including(var, 7);
    //* var = including(var, 7);
    var = var.including(7);
    //* var = including(var, 7);
    var = var->including(7);
    var = intersection(var, var);
    //* var = intersection(var, var);
    var = var.intersection(var);
    //* var = intersection(var, var);
    var = var->intersection(var);
    var = symmetricDifference(var, var);
    //* var = symmetricDifference(var, var);
    var = var.symmetricDifference(var);
    //* var = symmetricDifference(var, var);
    var = var->symmetricDifference(var);
    var = selectByKind(var, Integer);
    //* var = selectByKind(var, Integer);
    var = var.selectByKind(Integer);
    //* var = selectByKind(var, Integer);
    var = var->selectByKind(Integer);
    var = typeSelect(var, Integer);
    //* var = typeSelect(var, Integer);
    var = var.typeSelect(Integer);
    //* var = typeSelect(var, Integer);
    var = var->typeSelect(Integer);
    var = selectByType(var, Integer);
    //* var = selectByType(var, Integer);
    var = var.selectByType(Integer);
    //* var = selectByType(var, Integer);
    var = var->selectByType(Integer);
    seq = toSequence(var);
    //* seq = toSequence(var);
    seq = var.toSequence();
    //* seq = toSequence(var);
    seq = var->toSequence();
    seq = asSequence(var);
    //* seq = asSequence(var);
    seq = var.asSequence();
    //* seq = asSequence(var);
    seq = var->asSequence();
    var = toSet(var);
    //* var = toSet(var);
    var = var.toSet();
    //* var = toSet(var);
    var = var->toSet();
    var = asSet(var);
    //* var = asSet(var);
    var = var.asSet();
    //* var = asSet(var);
    var = var->asSet();
    var = typeReject(var, Integer);
    //* var = typeReject(var, Integer);
    var = var.typeReject(Integer);
    //* var = typeReject(var, Integer);
    var = var->typeReject(Integer);
    var = union(var, var);
    //* var = union(var, var);
    var = var.union(var);
    //* var = union(var, var);
    var = var->union(var);
}