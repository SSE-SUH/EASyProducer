/*
 * generated by Xtext
 */
package de.uni_hildesheim.sse.ui.contentassist;


/**see
 * Customization for contentassist.
 * @author Dernek
 */
public class IvmlProposalProvider extends AbstractIvmlProposalProvider {
	
	// CK: clarify problems with Bartu before this goes online!
	
//    private final String namedefinition = "<name>";
//    private final String implExpr = "<implicationExpression>";
//
//    @Inject
//    private IImageHelper imageHelper;
//
//    /**
//     * Get the project.
//     * @param node ProjectNode
//     * @return ProjectObject
//     */
//    private Project findProject(INode node) {
//        Project result = null;
//        if (null != node) {
//            if (node.getSemanticElement() != null && node.getSemanticElement() instanceof Project) {
//                result = (Project) node.getSemanticElement();
//            } else {
//                result = findProject(node.getParent());
//            }
//        }
//        return result;
//    }
//
//    /**
//     * Auto-complete a version-number.
//     * 
//     * @param model the current model
//     * @param ruleCall the current rule call
//     * @param context the current context
//     * @param acceptor the completion proposal acceptor
//     */
//    @Override
//    public void complete_VERSION(EObject model, RuleCall ruleCall,
//            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//        acceptor.accept(createCompletionProposal("v1.0", "version number",
//                imageHelper.getImage(Images.NAME_VERSION), context));
//    }
//    
//    /**
//     * Suggest an Import.
//     * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//     */
//    @Override
//    public void completeProject_Imports(EObject model, Assignment assignment, 
//            ContentAssistContext context, 
//            ICompletionProposalAcceptor acceptor) {
//        acceptor.accept(createCompletionProposal("import ", "import", 
//            imageHelper.getImage(Images.NAME_IMPORT), context));
//     
//    }
//
//    /**
//     * Complete name for an ImportStatement.
//     * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//     */
//    @Override
//    public void completeImportStmt_Name(EObject model, Assignment assignment,
//            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//        acceptor.accept(createCompletionProposal("", "choose a name", 
//                imageHelper.getImage(Images.NAME_IMPORT), context));
//    }
//    
//    /**
//     * Suggest a conflict.
//     * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//     */
//    @Override
//    public void completeProject_Conflicts(EObject model, Assignment assignment, 
//            ContentAssistContext context, 
//            ICompletionProposalAcceptor acceptor) {
//        acceptor.accept(createCompletionProposal("conflict ",
//                "conflict", imageHelper.getImage(Images.NAME_CONFLICTS), context));
//     
//    }
//
//
//    /**
//     * Complete name for a ConflictStatement.
//     * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//     */
//    @Override
//    public void completeConflictStmt_Name(EObject model, Assignment assignment,
//           ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//        acceptor.accept(createCompletionProposal("", "choose a name",
//               imageHelper.getImage(Images.NAME_CONFLICTS), context));
//    }
//    
//    /**
//     * Suggest an Interface.
//     * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//     */
//    @Override
//    public void completeProject_Interfaces(EObject model, Assignment assignment, 
//            ContentAssistContext context, 
//            ICompletionProposalAcceptor acceptor) {
//        acceptor.accept(createCompletionProposal("interface ", "interface",
//                imageHelper.getImage(Images.NAME_INTERFACE), context));
//    }
//
//
//    /**
//     * Complete name for an Interface.
//     * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//     */
//    @Override
//    public void completeInterfaceDeclaration_Name(EObject model,
//           Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//        String proposalString = namedefinition + " {";
//        acceptor.accept(createCompletionProposal(proposalString,
//                "interfacename", imageHelper.getImage(Images.NAME_INTERFACE), context));
//    }
//
//    /**
//     * Complete the export Statement.
//     * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//     */
//    @Override
//    public void completeInterfaceDeclaration_Exports(EObject model,
//            Assignment assignment, ContentAssistContext context,
//            ICompletionProposalAcceptor acceptor) {
//        acceptor.accept(createCompletionProposal("export ", "export", 
//               imageHelper.getImage(Images.NAME_INTERFACE), context));
//    }
//    
//    /**
//     * Suggest all DecisionVariables to export.
//     * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//     */
//    @Override
//    public void completeExport_Names(EObject model, 
//            Assignment assignment, ContentAssistContext context, 
//            ICompletionProposalAcceptor acceptor) {
//        List<VariableDeclaration> dvList = getDecisionVars(context);
//        if (dvList != null) {
//            for (VariableDeclaration var : dvList) {
//                for (int i = 0; i < var.getDecls().size(); i++) {
//                    StyledString displayName = new StyledString();
//                    String varType = ModelUtility.stringValue(var.getType());
//                    String varName = var.getDecls().get(i).getName();
//                    displayName.append(var.getDecls().get(i).getName());
//                    displayName.append(" : " + varType, StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName, displayName,
//                        imageHelper.getImage(Images.NAME_VARIABLE), context));
//                }
//            }
//        }
//    }
//
//    /**
//     * Suggest everything that could be in the ProjectContent.
//     * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeProjectContents_Elements(EObject model,
//			Assignment assignment, ContentAssistContext context,
//			ICompletionProposalAcceptor acceptor) {
//		/**
//		 * extract from the ivml.xtext,
//		 * 
//		 * elements+=Typedef | elements+=VariableDeclaration //#> EvalFreeze |
//		 * elements+=Freeze | elements+=Eval //#< EvalFreeze |
//		 * elements+=ExpressionStatement //#> Compounds | elements+=AttributeTo
//		 * //#< Compounds | elements+=OpDefStatement | elements+=AttrAssignment
//		 */
//
//		// suggest a Typdef (could be an Enum, Compound or a typedefinition)
//    	String enumString = "enum " + namedefinition + "  { };";
//    	String compoundString = "compound " + namedefinition + " {";
//    	String typedefString = "typedef " + namedefinition + " ";
//
//    	acceptor.accept(createCompletionProposal(enumString, "enumeration",
//				imageHelper.getImage(Images.NAME_ENUM), context));
//    	acceptor.accept(createCompletionProposal(compoundString, "compound",
//				imageHelper.getImage(Images.NAME_COMPOUND), context));
//    	acceptor.accept(createCompletionProposal(typedefString,
//				"typedefinition", imageHelper.getImage(Images.NAME_TYPEDEF),
//				context));
//
//		// suggest a Variabledeclaration
//		// var: BasicTypes
//    	acceptor.accept(createCompletionProposal("Integer " + namedefinition
//				+ ";", "Integer", imageHelper.getImage(Images.NAME_VARIABLE),
//				context));
//    	acceptor.accept(createCompletionProposal(
//				"Real " + namedefinition + ";", "Real",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Boolean " + namedefinition
//				+ ";", "Boolean", imageHelper.getImage(Images.NAME_VARIABLE),
//				context));
//    	acceptor.accept(createCompletionProposal("String " + namedefinition
//				+ ";", "String", imageHelper.getImage(Images.NAME_VARIABLE),
//				context));
//    	acceptor.accept(createCompletionProposal("Constraint " + namedefinition
//				+ ";", "Constraint",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//
//		// var: DerivedType
//    	acceptor.accept(createCompletionProposal("setOf(", "SetOf",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("sequenceOf(", "SequenceOf",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("refOf(", "RefOf",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//
//		// suggest a Freeze
//    	acceptor.accept(createCompletionProposal("freeze {", "Freeze",
//				imageHelper.getImage(Images.NAME_FREEZE), context));
//		// suggest an Eval
//    	acceptor.accept(createCompletionProposal("eval {" + implExpr + ";};",
//				"Eval", imageHelper.getImage(Images.NAME_EVAL), context));
//		// suggest an AttributeTo
//    	acceptor.accept(createCompletionProposal("attribute ", "AttributeTo",
//				imageHelper.getImage(Images.NAME_ATTRIBUTE), context));
//		// suggest an OpDefStatement
//    	acceptor.accept(createCompletionProposal("def ", "OpDefStatement",
//				imageHelper.getImage(Images.NAME_OPERATIONDEFINITION), context));
//		// suggest AttributeAssignment
//    	acceptor.accept(createCompletionProposal("assign (",
//				"AttributeAssignment",
//				imageHelper.getImage(Images.NAME_ATTACHMENT), context));
//    }
//
//	/**
//	 * list all DecisionVariables to complete a freeze.
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeFreeze_Names(EObject model, Assignment assignment,
//			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//    	List<VariableDeclaration> dvList = getDecisionVars(context);
//    	if (dvList != null) {
//            for (VariableDeclaration var : dvList) {
//                for (int i = 0; i < var.getDecls().size(); i++) {
//                    StyledString displayName = new StyledString();
//                    String varType = ModelUtility.stringValue(var.getType());
//                    String varName = var.getDecls().get(i).getName();
//                    displayName.append(var.getDecls().get(i).getName());
//                    displayName.append(" : " + varType,
//							StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName + ";",
//							displayName,
//							imageHelper.getImage(Images.NAME_VARIABLE), context));
//                }
//            }
//    	}
//    }
//
//	/**
//	 * typeselection of DerivedType (setOf,sequenceOf,refOf).
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeDerivedType_Type(EObject model, Assignment assignment,
//			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		// suggest BasicTypes
//    	acceptor.accept(createCompletionProposal("Integer)", "Integer", imageHelper.getImage(Images.NAME_VARIABLE),
//				context));
//    	acceptor.accept(createCompletionProposal("Real) ", "Real", imageHelper.getImage(Images.NAME_VARIABLE),
//				context));
//    	acceptor.accept(createCompletionProposal("Boolean) ", "Boolean", imageHelper.getImage(Images.NAME_VARIABLE),
//				context));
//    	acceptor.accept(createCompletionProposal("String) ", "String", imageHelper.getImage(Images.NAME_VARIABLE),
//				context));
//    	acceptor.accept(createCompletionProposal("Constraint) ", "Constraint",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	
//    	// suggest Typedefs (Compound, Enum, Typedef)
//    	List<Typedef> tdList = getTypeDefs(context);
//    	if (tdList != null) {
//            for (Typedef var : tdList) {
//				// If Typedef is a Compound
//            	if (var.getTCompound() != null) {
//                    StyledString displayName = new StyledString();
//                    String varType = "compound";
//                    String varName = var.getTCompound().getName();
//                    displayName.append(var.getTCompound().getName());
//                    displayName.append(" : " + varType, StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName + ") ",
//							displayName,
//							imageHelper.getImage(Images.NAME_COMPOUND), context));
//                    varName = "";
//            	}
//				// If Typedef is an Enum
//            	if (var.getTEnum() != null) {
//                    StyledString displayName = new StyledString();
//                    String varType = "enum";
//                    String varName = var.getTEnum().getName();
//                    displayName.append(var.getTEnum().getName());
//                    displayName.append(" : " + varType, StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName + ") ",
//							displayName,
//							imageHelper.getImage(Images.NAME_ENUM), context));
//                    varName = "";
//            	}
//				// If Typedef is a Typedef
//            	if (var.getTMapping() != null) {
//                    StyledString displayName = new StyledString();
//                    String varType = "typedef";
//                    String varName = var.getTMapping().getNewType();
//                    displayName.append(var.getTMapping().getNewType());
//                    displayName.append(" : " + varType, StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName + ") ",
//							displayName,
//							imageHelper.getImage(Images.NAME_TYPEDEF), context));
//                    varName = "";
//            	}
//            }
//    	}
//    }
//
//    /**
//	 * typeselection at a typedef after the variablename was written.
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeTypedefMapping_Type(EObject model,
//			Assignment assignment, ContentAssistContext context,
//			ICompletionProposalAcceptor acceptor) {
//    	acceptor.accept(createCompletionProposal("Integer;", "Integer",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Real;", "Real",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Boolean;", "Boolean",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("String;", "String",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Constraint;", "Constraint",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    }
//
//	/**
//	 * typeselection at an attributedeclaration.
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeAttributeTo_AttributeType(EObject model,
//			Assignment assignment, ContentAssistContext context,
//			ICompletionProposalAcceptor acceptor) {
//		// suggest basictypes
//    	acceptor.accept(createCompletionProposal("Integer ", "Integer",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Real ", "Real",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Boolean ", "Boolean",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("String ", "String",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Constraint ", "Constraint",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//
//		// suggest Typedefs (Compound, Enum, Typedef)
//    	List<Typedef> tdList = getTypeDefs(context);
//    	if (tdList != null) {
//            for (Typedef var : tdList) {
//				// If Typedef is a Compound
//            	if (var.getTCompound() != null) {
//                    StyledString displayName = new StyledString();
//                    String varType = "compound";
//                    String varName = var.getTCompound().getName();
//                    displayName.append(var.getTCompound().getName());
//                    displayName.append(" : " + varType, StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName + " ",
//							displayName,
//							imageHelper.getImage(Images.NAME_COMPOUND), context));
//                    varName = "";
//            	}
//				// If Typedef is an Enum
//            	if (var.getTEnum() != null) {
//                    StyledString displayName = new StyledString();
//                    String varType = "enum";
//                    String varName = var.getTEnum().getName();
//                    displayName.append(var.getTEnum().getName());
//                    displayName.append(" : " + varType,
//							StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName + " ",
//							displayName,
//							imageHelper.getImage(Images.NAME_ENUM), context));
//                    varName = "";
//            	}
//				// If Typedef is a Typedefinition
//            	if (var.getTMapping() != null) {
//                    StyledString displayName = new StyledString();
//                    String varType = "typedef";
//                    String varName = var.getTMapping().getNewType();
//                    displayName.append(var.getTMapping().getNewType());
//                    displayName.append(" : " + varType,
//							StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName + " ",
//							displayName,
//							imageHelper.getImage(Images.NAME_TYPEDEF), context));
//                    varName = "";
//            	}
//            }
//    	}
//    }
//
//    /**
//	 * complete attributeDeclaration.
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeAttributeTo_AttributeDecl(EObject model,
//			Assignment assignment, ContentAssistContext context,
//			ICompletionProposalAcceptor acceptor) {
//    	String attrdecl = namedefinition + " = ";
//    	acceptor.accept(createCompletionProposal(attrdecl, "declare attribute",
//				imageHelper.getImage(Images.NAME_ATTRIBUTE), context));
//    }
//
//	/**
//	 * complete the projectname after the 'to'.
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeAttributeTo_Names(EObject model, Assignment assignment,
//			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//    	String projectName = getProjectName(context);
//    	if (projectName != null) {
//            acceptor.accept(createCompletionProposal(projectName + ";",
//					projectName, imageHelper.getImage(Images.NAME_PROJECT),
//					context));
//    	}
//    }
//
//	/**
//	 * typeselection at an OpDefStatement.
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeOpDefStatement_Result(EObject model,
//			Assignment assignment, ContentAssistContext context,
//			ICompletionProposalAcceptor acceptor) {
//		// suggest BasicTypes
//    	acceptor.accept(createCompletionProposal("Integer ", "Integer",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Real ", "Real",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Boolean ", "Boolean",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("String ", "String",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Constraint ", "Constraint",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//		// suggest derivedTypes?
//    }
//
//	/**
//	 * namedefinition at an OpDefStatement.
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeOpDefStatement_Id(EObject model, Assignment assignment,
//			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//    	acceptor.accept(createCompletionProposal(namedefinition + " (",
//				"namedefinition",
//				imageHelper.getImage(Images.NAME_OPERATIONDEFINITION), context));
//    }
//
//	/**
//	 * complete OpDefParameterList.
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeOpDefStatement_Param(EObject model,
//			Assignment assignment, ContentAssistContext context,
//			ICompletionProposalAcceptor acceptor) {
//		// suggest Basictypes
//    	acceptor.accept(createCompletionProposal("Integer " + namedefinition
//				+ ") = ", "Integer",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("Real " + namedefinition
//				+ ") = ", "Real", imageHelper.getImage(Images.NAME_VARIABLE),
//				context));
//    	acceptor.accept(createCompletionProposal("Boolean " + namedefinition
//				+ ") = ", "Boolean",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	acceptor.accept(createCompletionProposal("String " + namedefinition
//				+ ") = ", "String", imageHelper.getImage(Images.NAME_VARIABLE),
//				context));
//    	acceptor.accept(createCompletionProposal("Constraint " + namedefinition
//				+ ") = ", "Constraint",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//
//		// suggest Typedefs (Compound, Enum, Typedef)
//    	List<Typedef> tdList = getTypeDefs(context);
//    	if (tdList != null) {
//            for (Typedef var : tdList) {
//				// If Typedef is a Compound
//            	if (var.getTCompound() != null) {
//                    StyledString displayName = new StyledString();
//                    String varType = "compound";
//                    String varName = var.getTCompound().getName();
//                    displayName.append(var.getTCompound().getName());
//                    displayName.append(" : " + varType, StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName + " ",
//							displayName,
//							imageHelper.getImage(Images.NAME_COMPOUND), context));
//                    varName = "";
//            	}
//				// If Typedef is an Enum
//            	if (var.getTEnum() != null) {
//                    StyledString displayName = new StyledString();
//                    String varType = "enum";
//                    String varName = var.getTEnum().getName();
//                    displayName.append(var.getTEnum().getName());
//                    displayName.append(" : " + varType, StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName + " ",
//							displayName,
//							imageHelper.getImage(Images.NAME_ENUM), context));
//                    varName = "";
//            	}
//				// If Typedef is a Typedef
//            	if (var.getTMapping() != null) {
//                    StyledString displayName = new StyledString();
//                    String varType = "typedef";
//                    String varName = var.getTMapping().getNewType();
//                    displayName.append(var.getTMapping().getNewType());
//                    displayName.append(" : " + varType, StyledString.QUALIFIER_STYLER);
//
//                    acceptor.accept(createCompletionProposal(varName + " ",
//							displayName,
//							imageHelper.getImage(Images.NAME_TYPEDEF), context));
//                    varName = "";
//            	}
//            }
//    	}
//    }
//
//	/**
//	 * suggest ImplicationExpression for OpDefStatement after the '='.
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeOpDefStatement_Impl(EObject model,
//			Assignment assignment, ContentAssistContext context,
//			ICompletionProposalAcceptor acceptor) {
//    	acceptor.accept(createCompletionProposal(implExpr + ";",
//				"ImplicationExpression",
//				imageHelper.getImage(Images.NAME_CONSTRAINT), context));
//    }
//
//	/**
//	 * suggest all attributes defined.
//	 * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//	 */
//    @Override
//    public void completeAttrAssignment_Parts(EObject model,
//			Assignment assignment, ContentAssistContext context,
//			ICompletionProposalAcceptor acceptor) {
//    	boolean showed = false;
//    	List<AttributeTo> attList = getAttributes(context);
//    	if (attList != null) {
//            for (AttributeTo var : attList) {
//            	if (var.getAttributeDecl().getName() != null) {
//                    StyledString displayName = new StyledString();
//                    String varType = ModelUtility.stringValue(var.getAttributeType());
//                    String varName = var.getAttributeDecl().getName();
//                    displayName.append(var.getAttributeDecl().getName());
//                    displayName.append(" : " + varType,
//							StyledString.QUALIFIER_STYLER);
//                    acceptor.accept(createCompletionProposal(varName + " = ",
//							displayName,
//							imageHelper.getImage(Images.NAME_ATTRIBUTE),
//							context));
//                    showed = true;
//            	}
//            }
//    	}
//    	if (!showed) {
//            acceptor.accept(createCompletionProposal("",
//					"define an attribute first",
//					imageHelper.getImage(Images.NAME_VARIABLE), context));
//    	}
//    }
//    
//    /**
//     * Show that the user have to declare a name.
//     * @param model Objectmodel
//     * @param assignment Assignment
//     * @param acceptor CompletionProposalAcceptor
//     * @param context ContentAssistContext
//     */
//    @Override
//    public void completeVariableDeclarationPart_Name(EObject model, Assignment assignment, 
//    		ContentAssistContext context, 
//    		ICompletionProposalAcceptor acceptor) {
//    	acceptor.accept(createCompletionProposal("",
//				"declare a name",
//				imageHelper.getImage(Images.NAME_VARIABLE), context));
//    }
//
//
//	/**
//	 * Get the projectname.
//	 * @param context ContentAssistContext
//	 * @return name of the project
//	 */
//    private String getProjectName(ContentAssistContext context) {
//    	String result = null;
//    	Project project = findProject(context.getCurrentNode());
//    	if (null != project && null != project.getName()) {
//            result = project.getName();
//    	}
//    	
//    	for (int i = 0; i < VarModel.INSTANCE.getModelCount(); i++) {
//    	    System.out.println("Project: " + VarModel.INSTANCE.getModel(i).getName());
//    	}
//    	
//    	return result;
//    }
//
//	/**
//	 * Get all Typedefs. Includes Enums, Compounds, Typedefinition
//	 * 
//	 * @param context ContentAssistContext
//	 * @return List with all Typedefs
//	 */
//    private List<Typedef> getTypeDefs(ContentAssistContext context) {
//    	List<Typedef> result = null;
//    	
//    	Project project = findProject(context.getCurrentNode());
//    	SplitResult splitRes = Utils.split(project.getContents().getElements());
//
//    	if (null != project && null != splitRes) {
//            if (!isEmpty(splitRes.getTypedefs())) {
//            	result = splitRes.getTypedefs();
//            }
//    	}
//    	return result;
//    }
//    
//
//	/**
//	 * Get all DecisionVariables.
//	 * 
//	 * @param context ContentAssistContext
//	 * @return List with all VariableDeclarations
//	 */
//    private List<VariableDeclaration> getDecisionVars(
//			ContentAssistContext context) {
//    	/*
//    	 * If we declare our variables like: Integer var1,var2,var3; we have to
//    	 * check the VariableDeclarationPart. Otherwise I would only get the
//    	 * name of the first variable. Thats why I return the complete
//    	 * VariableDeclaration.
//    	 */
//        boolean result = false;
//        Project project = findProject(context.getCurrentNode());
//        SplitResult splitRes = Utils.split(project.getContents().getElements());
//
//        if (null != project && null != splitRes) {
//            if (!isEmpty(splitRes.getVarDecls())) {
//                result = true;
//            }
//        }
//
//        if (result) {
//            return splitRes.getVarDecls();
//        } else {
//            return null;
//        }
//    }
//
//	/**
//	 * Get all AttributeTo statements to extract the names for example.
//	 * @param context ContentAssistContext
//	 * @return List with all AttributeTo-Statements
//	 */
//    private List<AttributeTo> getAttributes(ContentAssistContext context) {
//    	boolean result = false;
//    	Project project = findProject(context.getCurrentNode());
//    	SplitResult splitRes = Utils.split(project.getContents().getElements());
//
//    	if (null != project && null != splitRes) {
//            if (!isEmpty(splitRes.getAttrs())) {
//            	result = true;
//            }
//    	}
//
//    	if (result) {
//            return splitRes.getAttrs();
//    	} else {
//            return null;
//    	}
//    }
//
//	/**
//	 * Check whether a given List is <b>null</b> or empty.
//	 * 
//	 * @param list
//	 *            The list to be checked.
//	 * @return <b>True</b> if the list is <b>null</b> or has no elements.
//	 *         <b>False</b> otherwise.
//	 */
//    private static boolean isEmpty(List<?> list) {
//    	return null == list || list.isEmpty();
//    }
}