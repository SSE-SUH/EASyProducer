# Defining an enum

Color = Datatype('Color')
Color.declare('red')
Color.declare('green')
Color.declare('blue')
Color = Color.create()


# Declare a List - a compund with two integers
List = Datatype('List')

List.declare('cons', ('car', IntSort()), ('cdr', IntSort()))

#Compound with two integers and a variable with type enum - Color.
# This could be very much relevant to Christian's car example
List.declare('cons2', ('engine', IntSort()), ('transmission', IntSort()), ('some_color', Color))

x = Int('x')
y = Int('y')
z = Int('z')
w = Int('w')

List = List.create()
print is_sort(List)
cons = List.cons
car  = List.car
cdr  = List.cdr

cons2 = List.cons2
engine = List.engine
transmission = List.transmission
some_color = List.some_color

c = Const('c', Color)
#Creating instances for the compounds. And also, we can do some constraint checking on #any two instances of the same compound. For e.g. no two instances of the same compound #are equal

l1 = cons(x, y)
l2 = cons2(w, z, c)


s = Solver()


#here goes the constraints
solve(car(l1) > 5, engine(l2)  < 8, Implies (cdr(l1) > 3, transmission(l2) > 4 ), transmission(l2) +  engine(l2) > 10 )
s.push()
solve(car(l1) == 6, Implies (car(l1) == 6, some_color(l2) == Color.blue))

print s.check()
print l2

#Below, the output .................
#[w = 0, z = 11, y = 4, x = 6]
#[c = blue, x = 6]
#sat
#cons2(w, z, c)