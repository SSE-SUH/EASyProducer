project Pipelines {
   
	import Basics;
	import Families;
	import DataManagement;
	import Hardware;
	   
	annotate BindingTime bindingTime = BindingTime.compile to Pipelines;
	annotate Boolean userVisible = true to Pipelines;

    // TODO this is Storm stuff - find more abstract/adequate representation
	enum Grouping {shuffleGrouping, fieldsGrouping, globalGrouping, directGrouping, allGrouping, customGrouping, noneGrouping}; // this is very storm specific - can we infer this from the element type?
	
    // all elements in a pipeline
    abstract compound PipelineElement {
		NonEmptyString name;
		setOf(Constraint) constraints = {}; // user constraints
	} 
   
    // a flow among pipeline nodes
	compound Flow refines PipelineElement {
		refTo(PipelineNode) destination;
	    Grouping grouping;
	    Constraint destinationConst = destination.typeOf() <> Source;
	}
	
	// all nodes in a pipeline
    abstract compound PipelineNode refines PipelineElement{
    	PositiveInteger parallelism;
		assign (userVisible = false) to {
		    Tuples inputTypes; 
		    Tuples outputTypes;
		}
	}
	
	compound Source refines PipelineNode {
		setOf(refTo(Flow)) output;
  		refTo(DataSource) source;
  		inputTypes = source.input; 
  		Constraint reverseProp = if isDefined(outputTypes) and isDefined(inputTypes) then outputTypes.overlaps(inputTypes) else outputTypes == output->apply(f; Tuples r12 = {} | r12 = r12.union(f.destination.inputTypes)) endif;
		//  if isDefined(outputTypes) and isDefined(inputTypes) then outputTypes.overlaps(inputTypes) else outputTypes == inputTypes endif;
 		Constraint sourceTypeCheck = typeCheck(self, self.output);
	} 
	   
	compound Sink refines PipelineNode {
	    refTo(DataSink) sink;
	    outputTypes = sink.output;
	    inputTypes = outputTypes;
	    //if isDefined(outputTypes) and isDefined(inputTypes) then outputTypes.overlaps(inputTypes) else outputTypes == inputTypes endif;
	} 

	// inner node that processes something
	compound ProcessingElement refines PipelineNode {
		setOf(refTo(Flow)) output;
		Constraint peTypeCheck = typeCheck(self, self.output);
	}
	   
	compound FamilyElement refines ProcessingElement {
		refTo(Family) family;
		Constraint tuplesInputTypeCheck = typeCheckTuplesInput(self, self.family);
		Constraint tuplesOutputTypeCheck = typeCheckTuplesOutput(self, self.family);
	} 
	
	compound DataManagementElement refines ProcessingElement {
	    refTo(PersistentDataElement) dataManagement; 
	    inputTypes = outputTypes;
	}

	abstract compound StreamOperationElement refines ProcessingElement {
		// needs to define inputTypes <-> outputTypes
	}
	
	compound Artifact {
		NonEmptyString groupId;
		NonEmptyString artifactId;
		NonEmptyString versionNum;
	}
	
	compound Pipeline {
		NonEmptyString name;
		String description;
		setOf(refTo(Source)) sources;
		PositiveInteger numworkers;
		PositiveInteger timeout = 100;
		refTo(Artifact) artifact;
		assign(bindingTime = BindingTime.runtime) to {
			Latency latency;
			Throughput_Item throughputItem;
			Throughput_Volume throughputVolume;
            Accuracy_Confidence accuracyConfidence;
            Accuracy_ErrorRate accuracyErrorRate;
        }
		setOf(Constraint) constraints = {}; // user constraints
		Constraint sourcesCount = sources.size() > 0;
	}
	
	sequenceOf(refTo(Pipeline)) pipelines;
	Constraint pipelineNamesUnique = not(pipelines->collect(p|p.name).hasDuplicates());
	
	def Boolean typeCheck(PipelineNode src, setOf(refTo(Flow)) output) =
	    output->forAll(f|typeCheck(src, f.destination));
	    
	def Boolean typeCheck(PipelineNode src, PipelineNode dst) = 
		if isDefined(dst.inputTypes) and isDefined(src.outputTypes) then src.outputTypes.overlaps(dst.inputTypes) else dst.inputTypes == src.outputTypes endif;

    // strange constraints if written directly in compound -> if isDefined() then isDefined() else isDefined()	    
	def Boolean typeCheckTuplesInput(FamilyElement elt, Family family) =
		if isDefined(elt.inputTypes) and isDefined(family.input) then elt.inputTypes.overlaps(family.input) else elt.inputTypes == family.input endif;

	def Boolean typeCheckTuplesOutput(FamilyElement elt, Family family) =
		if isDefined(elt.outputTypes) and isDefined(family.output) then elt.outputTypes.overlaps(family.output) else elt.outputTypes == family.output endif;
	
}