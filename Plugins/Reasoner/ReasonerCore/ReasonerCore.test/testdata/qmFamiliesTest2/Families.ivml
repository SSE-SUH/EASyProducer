project Families {
	
    import Basics;
	import Algorithms;
	
	annotate BindingTime bindingTime = BindingTime.compile to Families;
	
	compound Family {
		NonEmptyString name;
		String description;
		Tuples input;
		Tuples output;
		Parameters parameters;
		setOf(refTo(Algorithm)) members; 
		assign(bindingTime = BindingTime.runtime) to {
			refTo(Algorithm) actual;
			
			Latency latency;
			Throughput_Item throughputItem;
			Throughput_Volume throughputVolume;
			UsedMemory usedMemory;
            Accuracy_Confidence accuracyConfidence;
            Accuracy_ErrorRate accuracyErrorRate;
            Believability believability;
            Relevancy relevancy;
            Completeness completeness;
            Volume volume;
            Velocity velocity;
            Variety variety;
            
            latency = actual.latency;
            throughputItem = actual.throughputItem;
            throughputVolume = actual.throughputVolume;
            usedMemory = actual.usedMemory;
            accuracyConfidence = actual.accuracyConfidence;
            accuracyErrorRate = actual.accuracyErrorRate;
            believability = actual.believability;
            relevancy = actual.relevancy;
            completeness = actual.completeness;
            volume = actual.volume;
            velocity = actual.velocity;
            variety = actual.variety;
		}

        // we go now for names + types as required by the pipeline		
		Constraint inputCheck = members->forAll(refTo(Algorithm) algorithm | input == algorithm.input);
		Constraint outputCheck = members->forAll(refTo(Algorithm) algorithm | output == algorithm.output);
		Constraint parameterCheck = members->forAll(refTo(Algorithm) algorithm | contains(parameters, algorithm.parameters));
		Constraint memberCount = members.size() > 0;
		Constraint inputGivenCheck = input != null;
		Constraint outputGivenCheck = output != null;
	}

    def Boolean contains(Parameters parameters1, Parameters parameters2) = 
        parameters2->forAll(p2 | parameters1->exists(p1 | p1.name == p2.name and p1.typeOf() == p2.typeOf()));
        	  
	setOf(refTo(Family)) families;
	
	Constraint familyNameUnqiue = families->collect(f|f.name).size() == families.size();
	
} 