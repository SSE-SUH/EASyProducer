project Pipelines {
   
	import Basics;
	import Families;
	import DataManagement;
	import Hardware;
	   
	annotate BindingTime bindingTime = BindingTime.compile to Pipelines;
	annotate Boolean userVisible = true to Pipelines;

	enum Grouping {shuffleGrouping, fieldsGrouping, globalGrouping, directGrouping, allGrouping, customGrouping, noneGrouping}; // this is very storm specific - can we infer this from the element type?
	
    // all elements in a pipeline
    abstract compound PipelineElement {
		NonEmptyString name;
		setOf(Constraint) constraints = {}; // user constraints
		
		assign(bindingTime = BindingTime.runtimeMon) to {
		    Boolean isValid = true;
		}
	} 
   
    // a flow among pipeline nodes
	compound Flow refines PipelineElement {
		refTo(PipelineNode) destination;
	    Grouping grouping;
	    Constraint destinationConst = destination.typeOf() <> Source;
	    Constraint destinationCheck = isDefined(destination);
	    Constraint groupingCheck = isDefined(grouping);
	}
	
	// all nodes in a pipeline
    abstract compound PipelineNode refines PipelineElement{
    	PositiveInteger parallelism;
		assign (userVisible = false) to {
		    Tuples inputTypes; 
		    Tuples outputTypes;
		}
		assign(bindingTime = BindingTime.runtimeMon) to {
            Capacity capacity;
            Tasks tasks;
            capacity <= capacityHighWatermark; // quality constraint -> trigger adaptation if violated
            executors > 1 implies capacity >= capacityLowWatermark; // scale down only if we can change something
		}
        assign(bindingTime = BindingTime.runtimeEnact) to {
            Executors executors;
        }
    }
	
	compound Source refines PipelineNode {
		setOf(refTo(Flow)) output;
  		refTo(DataSource) source;
  		// eval { // TODO enable eval, get rid of inputTypesAssigned/outputTypesAssigned
  		inputTypes = source.input; 
 		Constraint sourceTypeCheck = typeCheck(self, self.output);
        // }
//  		Constraint outputCheck = isDefined(output); //allow to configure one source along with the pipeline
  		Constraint sourceCheck = isDefined(source);
//  		Constraint reverseProp = if isDefined(outputTypes) and isDefined(inputTypes) then outputTypes.overlaps(inputTypes) else outputTypes == output->apply(f; Tuples r12 = {} | r12 = r12.union(f.destination.inputTypes)) endif;
//  		Constraint reverseProp = if isDefined(outputTypes) and isDefined(inputTypes) then collectFieldNames(outputTypes).overlaps(collectFieldNames(inputTypes)) and collectFieldTypes(outputTypes).overlaps(collectFieldTypes(inputTypes)) else outputTypes == output->apply(f; Tuples r12 = {} | r12 = r12.union(f.destination.inputTypes)) endif;
		Constraint reverseProp = if isDefined(outputTypes) and isDefined(inputTypes) then fieldOverlapCheck(outputTypes, inputTypes) else outputTypes == inputTypes endif;

	    assign(bindingTime = BindingTime.runtimeMon) to {
	    	setOf(refTo(DataSource)) available;
	    	refTo(DataSource) actual;
	    	Constraint actualSourceCheck = available.includes(actual);
			Velocity velocity;
			Volume volume;
			Volatility volatility;
			Accuracy_Confidence accuracyConfidence;
			Completeness completeness;
			
			velocity = actual.velocity;
			volume = actual.volume;
			volatility = actual.volatility;
			accuracyConfidence = actual.accuracyConfidence;
			completeness = actual.completeness;
		} 
	} 
	   
	compound Sink refines PipelineNode {
	    refTo(DataSink) sink;
	    // eval { // TODO enable eval, get rid of inputTypesAssigned/outputTypesAssigned
	    outputTypes = sink.output;
	    inputTypes = outputTypes;
	    // }
	    //if isDefined(outputTypes) and isDefined(inputTypes) then outputTypes.overlaps(inputTypes) else outputTypes == inputTypes endif;
		Constraint sinkCheck = isDefined(sink);
	    assign(bindingTime = BindingTime.runtimeMon) to {
	    	setOf(refTo(DataSink)) available;
	    	refTo(DataSink) actual;
	    	Constraint actualSinkCheck = available.includes(actual);
			Velocity velocity;
			Volume volume;
			Accuracy_Confidence accuracyConfidence;
			
			velocity = actual.velocity;
			volume = actual.volume;
			accuracyConfidence = actual.accuracyConfidence;
			//MPVolatility mpVolatility;
		} 
	} 

	// inner node that processes something
	compound ProcessingElement refines PipelineNode {
		setOf(refTo(Flow)) output;
		// eval { // TODO enable eval, get rid of inputTypesAssigned/outputTypesAssigned
		Constraint peTypeCheck = typeCheck(self, self.output);
		// }
		//Constraint outputCheck = isDefined(output) and output.size() > 0; //@Roman, seems to affect also the source
	}
	   
	compound FamilyElement refines ProcessingElement {
		refTo(Family) family;
		refTo(Algorithm) default = family.members.asSequence().first();
        assign(bindingTime = BindingTime.runtimeMon) to {
        	// TODO available/actual shall be runtimeEnact -> Reasoner :(
		    setOf(refTo(Algorithm)) available; 
		    // TODO actual is not evaluated by reasoner -> RepositoryHelper
		    refTo(Algorithm) actual;
		    Constraint actualAlgorithmCheck = available.includes(actual);
		    // force initialization
		    // TODO eval {
		    not(isDefined(actual)) implies if isDefined(default) then actual == default else actual == available.asSequence().first() endif;
		    //}
		
            // derived			
			Latency latency;
			Throughput_Item throughputItems;
			Throughput_Volume throughputVolume;
			UsedMemory memoryUse;
            Accuracy_Confidence accuracyConfidence;
            Accuracy_ErrorRate accuracyErrorRate;
            Believability believability;
            Relevancy relevancy;
            Completeness completeness;
            Volume volume;
            Velocity velocity;
            Variety variety;
            
            Items items;
            
            latency = actual.latency;
            throughputItems = actual.throughputItems;
            throughputVolume = actual.throughputVolume;
            memoryUse = actual.memoryUse;
            accuracyConfidence = actual.accuracyConfidence;
            accuracyErrorRate = actual.accuracyErrorRate;
            believability = actual.believability;
            relevancy = actual.relevancy;
            completeness = actual.completeness;
            volume = actual.volume;
            velocity = actual.velocity;
            variety = actual.variety;
		}
		Constraint familyCheck = isDefined(family);
		Constraint tuplesInputTypeCheck = typeCheckTuplesInput(self, self.family);
		Constraint tuplesOutputTypeCheck = typeCheckTuplesOutput(self, self.family);
		//Constraint defaultCheck = family.members.includes(default);
	} 
	
	compound DataManagementElement refines ProcessingElement {
	    refTo(PersistentDataElement) dataManagement; 
	    inputTypes == outputTypes;
	    Constraint dataManagementCheck = isDefined(dataManagement);
	}

	abstract compound StreamOperationElement refines ProcessingElement {
		// needs to define inputTypes <-> outputTypes
	}

/* 	
	compound Artifact {
		NonEmptyString groupId;
		NonEmptyString artifactId;
		NonEmptyString versionNum;
	}
*/	
	compound SubPipelineAlgorithm refines Algorithm {
		refTo(Pipeline) subPipeline;
	}
	compound Pipeline {
		NonEmptyString name;
		Description description;
		setOf(refTo(Source)) sources;
		PositiveInteger numworkers;
		PositiveInteger timeout = 100;
		ArtifactString artifact;
		Boolean debug = false;
		Boolean fastSerialization = false;
		Boolean isSubPipeline = false;
		setOf(refTo(FamilyElement)) connectors;
		refTo(Family) subPipelineFamily;
		assign(bindingTime = BindingTime.runtimeMon) to {
			Latency latency;
			Throughput_Item throughputItems;
			Throughput_Volume throughputVolume;
            Accuracy_Confidence accuracyConfidence;
            Accuracy_ErrorRate accuracyErrorRate;
            Capacity capacity;
            Executors executors;
            Tasks tasks;
            Hosts hosts;
            
            Boolean isValid = true;
        }
		setOf(Constraint) constraints = {}; // user constraints
		Constraint sourcesCount = (isSubPipeline == false implies sources.size() > 0);
		Constraint sourcesCheck = isDefined(sources);
	}
	
	sequenceOf(refTo(Pipeline)) pipelines;
	Constraint pipelineNamesUnique = not(pipelines->collect(p|p.name).hasDuplicates());

    // check the input / output types and assign the default values - used to force evaluation
    // none for DataManagementElement, handled through default case to enable propagation in typeCheck
    // replace by eval in compounds!

    def Boolean inputTypesAssigned(PipelineNode pNode) = 
        isDefined(pNode.inputTypes);

    def Boolean inputTypesAssigned(Source srcNode) = 
        if isDefined(srcNode.inputTypes) then true else srcNode.inputTypes = srcNode.source.input endif;

    def Boolean inputTypesAssigned(Sink snkNode) = 
        if isDefined(snkNode.inputTypes) then true else snkNode.inputTypes = snkNode.sink.output endif;  // only one field in sink

    def Boolean inputTypesAssigned(FamilyElement feNode) = 
        if isDefined(feNode.inputTypes) then true else feNode.inputTypes = feNode.family.input endif;

    def Boolean outputTypesAssigned(PipelineNode pipNode) = 
        isDefined(pipNode.outputTypes);

    def Boolean outputTypesAssigned(Source src2Node) = 
        if isDefined(src2Node.outputTypes) then true else src2Node.outputTypes = src2Node.source.input endif; // only one field in source

    def Boolean putputTypesAssigned(Sink snk2Node) = 
        if isDefined(snk2Node.outputTypes) then true else snk2Node.outputTypes = snk2Node.sink.output endif;

    def Boolean outputTypesAssigned(FamilyElement fe2Node) = 
        if isDefined(fe2Node.outputTypes) then true else fe2Node.outputTypes = fe2Node.family.output endif;
	
	// check types for a node and it's connected nodes
	
	def static Boolean typeCheck(PipelineNode src, setOf(refTo(Flow)) output) =
	    output->forAll(f|typeCheck(src, f.destination));
	    
	def static Boolean typeCheck(PipelineNode src, PipelineNode dst) = 
		if inputTypesAssigned(dst) and outputTypesAssigned(src) then fieldOverlapCheck(src.outputTypes, dst.inputTypes) else dst.inputTypes == src.outputTypes endif;

	def static Boolean typeCheckTuplesInput(FamilyElement elt, Family family) =
		if isDefined(elt.inputTypes) and isDefined(family.input) then fieldOverlapCheck(elt.inputTypes, family.input) else elt.inputTypes == family.input endif;

	def static Boolean typeCheckTuplesOutput(FamilyElement elt, Family family) =
		if isDefined(elt.outputTypes) and isDefined(family.output) then fieldOverlapCheck(elt.outputTypes, family.output) else elt.outputTypes == family.output endif;
	
}