project Pipelines {

	import Basics;
	import Families;
	import DataManagement;
	import Hardware;
	import CloudResources;
	annotate BindingTime bindingTime = BindingTime.compile to Pipelines;
	annotate Boolean userVisible = true to Pipelines;
	enum Grouping {shuffleGrouping, fieldsGrouping, globalGrouping, directGrouping, allGrouping, customGrouping, noneGrouping};
	abstract compound LoadShedder {
		assign (bindingTime = BindingTime.runtimeEnact) to {
			String name;
			Parameters parameters;
		}
	}

	abstract compound PipelineElement {
		NonEmptyString name;
		setOf(Constraint) constraints = {};
		assign (bindingTime = BindingTime.runtimeMon) to {
			Boolean isValid = true;
		}
		assign (bindingTime = BindingTime.runtimeEnact) to {
			LoadShedder shedder;
		}
	}

	compound Flow refines PipelineElement {
		Grouping grouping;
		refTo(Tuple) tupleType;
		Constraint destinationConst = typeOf(destination) <> Source;
		Constraint destinationCheck = isDefined(destination);
		Constraint groupingCheck = isDefined(grouping);
		refTo(PipelineNode) destination;
	}

	abstract compound PipelineNode refines PipelineElement {
		PositiveInteger parallelism;
		OptionalPositiveInteger numtasks;
		parallelism <= numtasks;
		assign (userVisible = false) to {
			Tuples outputTypes;
			Tuples inputTypes;
		}
		assign (bindingTime = BindingTime.runtimeMon) to {
			Capacity capacity;
			Tasks tasks;
			capacity <= capacityHighWatermark;
			executors > 1 implies capacity >= capacityLowWatermark;
		}
		assign (bindingTime = BindingTime.runtimeEnact) to {
			Executors executors;
			refTo(CloudResource) environment;
		}
	}

	compound Source refines PipelineNode {
		setOf(refTo(Flow)) output;
		refTo(DataSource) source;
		inputTypes = source.input;
		setOf(refTo(Parameter)) permissibleParameters;
		Constraint permissibleParametersSourceCheck = isDefined(permissibleParameters) implies includes(source.parameters, permissibleParameters);
		Constraint sourceTypeCheck = typeCheck(self, self.output);
		Constraint sourceCheck = isDefined(source);
		Constraint reverseProp = if isDefined(outputTypes) and isDefined(inputTypes) then fieldOverlapCheck(outputTypes, inputTypes) else outputTypes == inputTypes endif;
		assign (bindingTime = BindingTime.runtimeMon) to {
			setOf(refTo(DataSource)) available;
			refTo(DataSource) actual;
			Constraint actualSourceCheck = includes(available, actual);
			Velocity velocity;
			Volume volume;
			Volatility volatility;
			Accuracy_Confidence accuracyConfidence;
			Completeness completeness;
			velocity = actual.velocity;
			volume = actual.volume;
			volatility = actual.volatility;
			accuracyConfidence = actual.accuracyConfidence;
			completeness = actual.completeness;
		}
	}

	compound Sink refines PipelineNode {
		refTo(DataSink) sink;
		outputTypes = sink.output;
		inputTypes = outputTypes;
		setOf(refTo(Parameter)) permissibleParameters;
		Constraint sinkCheck = isDefined(sink);
		Constraint permissibleParametersSinkCheck = isDefined(permissibleParameters) implies includes(sink.parameters, permissibleParameters);
		assign (bindingTime = BindingTime.runtimeMon) to {
			setOf(refTo(DataSink)) available;
			refTo(DataSink) actual;
			Constraint actualSinkCheck = includes(available, actual);
			Velocity velocity;
			Volume volume;
			Accuracy_Confidence accuracyConfidence;
			velocity = actual.velocity;
			volume = actual.volume;
			accuracyConfidence = actual.accuracyConfidence;
		}
	}

	compound ReplayInfo {
		assign (bindingTime = BindingTime.runtimeEnact) to {
			Boolean active = false;
			Integer ticket;
			String start;
			String end;
			Integer speed;
			String query;
		}
	}

	compound ReplaySink refines Sink {
		assign (bindingTime = BindingTime.runtimeEnact) to {
			ReplayInfo replay;
		}
	}

	compound ProcessingElement refines PipelineNode {
		setOf(refTo(Flow)) output;
		Constraint peTypeCheck = typeCheck(self, self.output);
	}

	compound FamilyElement refines ProcessingElement {
		refTo(Family) family;
		refTo(Algorithm) default = first(asSequence(family.members));
		setOf(refTo(Parameter)) permissibleParameters;
		assign (bindingTime = BindingTime.runtimeMon) to {
			setOf(refTo(Algorithm)) available;
			refTo(Algorithm) actual;
			Constraint actualAlgorithmCheck = includes(available, actual);
			not (isDefined(actual)) implies if isDefined(default) then actual == default else actual == first(asSequence(available)) endif;
			Latency latency;
			Throughput_Item throughputItems;
			Throughput_Volume throughputVolume;
			UsedMemory memoryUse;
			Accuracy_Confidence accuracyConfidence;
			Accuracy_ErrorRate accuracyErrorRate;
			Believability believability;
			Relevancy relevancy;
			Completeness completeness;
			Volume volume;
			Velocity velocity;
			Variety variety;
			Items items;
			latency = actual.latency;
			throughputItems = actual.throughputItems;
			throughputVolume = actual.throughputVolume;
			memoryUse = actual.memoryUse;
			accuracyConfidence = actual.accuracyConfidence;
			accuracyErrorRate = actual.accuracyErrorRate;
			believability = actual.believability;
			relevancy = actual.relevancy;
			completeness = actual.completeness;
			volume = actual.volume;
			velocity = actual.velocity;
			variety = actual.variety;
		}
		Constraint familyCheck = isDefined(family);
		Constraint tuplesInputTypeCheck = typeCheckTuplesInput(self, self.family);
		Constraint tuplesOutputTypeCheck = typeCheckTuplesOutput(self, self.family);
		Constraint permissibleParametersFamilyCheck = isDefined(permissibleParameters) implies includes(family.parameters, permissibleParameters);
	}

	compound DataManagementElement refines ProcessingElement {
		refTo(PersistentDataElement) dataManagement;
		inputTypes == outputTypes;
		Constraint dataManagementCheck = isDefined(dataManagement);
	}

	abstract compound StreamOperationElement refines ProcessingElement {
	}

	compound SubPipelineAlgorithm refines Algorithm {
		ArtifactString profilingArtifact;
		refTo(Pipeline) subPipeline;
	}

	compound Pipeline {
		NonEmptyString name;
		Description description;
		setOf(refTo(Source)) sources;
		PositiveInteger numworkers;
		PositiveInteger timeout = 100;
		ArtifactString artifact;
		Boolean debug = false;
		Boolean fastSerialization = false;
		Boolean isSubPipeline = false;
		setOf(refTo(FamilyElement)) connectors;
		refTo(Family) subPipelineFamily;
		assign (bindingTime = BindingTime.runtimeMon) to {
			Latency latency;
			Throughput_Item throughputItems;
			Throughput_Volume throughputVolume;
			Accuracy_Confidence accuracyConfidence;
			Accuracy_ErrorRate accuracyErrorRate;
			Capacity capacity;
			Executors executors;
			Tasks tasks;
			Hosts hosts;
			Boolean isValid = true;
		}
		setOf(Constraint) constraints = {};
		Constraint sourcesCount = (isSubPipeline == false implies size(sources) > 0);
		Constraint sourcesCheck = isDefined(sources);
		Constraint connectorTrueCheck = (isSubPipeline == true implies isDefined(connectors) and size(connectors) > 0);
		Constraint connectorFalseCheck = (isSubPipeline == false implies size(connectors) == 0);
	}

	sequenceOf(refTo(Pipeline)) pipelines;
	Constraint pipelineNamesUnique = not (hasDuplicates(pipelines->collect(p|p.name)));
	def static Boolean inputTypesAssigned(PipelineNode node) = isDefined(node.inputTypes);
	def static Boolean inputTypesAssigned(Sink node) = if isDefined(node.inputTypes) then true else node.inputTypes = node.sink.output endif;
	def static Boolean outputTypesAssigned(Source node) = if isDefined(node.outputTypes) then true else node.outputTypes = node.source.input endif;
	def static Boolean outputTypesAssigned(PipelineNode node) = isDefined(node.outputTypes);
	def static Boolean outputTypesAssigned(FamilyElement node) = if isDefined(node.outputTypes) then true else node.outputTypes = node.family.output endif;
	def static Boolean inputTypesAssigned(Source node) = if isDefined(node.inputTypes) then true else node.inputTypes = node.source.input endif;
	def static Boolean inputTypesAssigned(FamilyElement node) = if isDefined(node.inputTypes) then true else node.inputTypes = node.family.input endif;
	def static Boolean putputTypesAssigned(Sink node) = if isDefined(node.outputTypes) then true else node.outputTypes = node.sink.output endif;
	def static Boolean typeCheckTuplesInput(FamilyElement elt, Family family) = if isDefined(elt.inputTypes) and isDefined(family.input) then fieldOverlapCheck(elt.inputTypes, family.input) else elt.inputTypes == family.input endif;
	def static Boolean typeCheckTuplesOutput(FamilyElement elt, Family family) = if isDefined(elt.outputTypes) and isDefined(family.output) then fieldOverlapCheck(elt.outputTypes, family.output) else elt.outputTypes == family.output endif;
	def static Boolean typeCheck(PipelineNode src, PipelineNode dst) = if inputTypesAssigned(dst) and outputTypesAssigned(src) then fieldOverlapCheck(src.outputTypes, dst.inputTypes) else dst.inputTypes == src.outputTypes endif;
	def static Boolean typeCheck(PipelineNode src, setOf(refTo(Flow)) output) = output->forAll(f|typeCheck(src, f.destination));
}
