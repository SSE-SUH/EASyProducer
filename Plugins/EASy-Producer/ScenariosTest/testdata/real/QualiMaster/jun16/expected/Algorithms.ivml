project Algorithms {

	import Basics;
	import Observables;
	import ReconfigurableHardware;
	annotate BindingTime bindingTime = BindingTime.compile to Algorithms;
	compound Algorithm {
		NonEmptyString name;
		ArtifactString artifact;
		Description description;
		refTo(HwNode) hwNode;
		OptionalClassString algTopologyClass = null;
		refTo(Algorithm) successor = null;
		setOf(Constraint) constraints;
		assign (bindingTime = BindingTime.runtimeMon) to {
			Latency latency;
			Throughput_Item throughputItems;
			Throughput_Volume throughputVolume;
			UsedMemory memoryUse;
			Accuracy_Confidence accuracyConfidence;
			Accuracy_ErrorRate accuracyErrorRate;
			Believability believability;
			Relevancy relevancy;
			Completeness completeness;
			Volume volume;
			Velocity velocity;
			Variety variety;
			Hosts pipeline_Hosts;
			Items family_Items;
			Boolean isValid = true;
			refTo(HwNode) actualHwNode;
		}
		Constraint inputGivenCheck = isDefined(input);
		Constraint outputGivenCheck = isDefined(output);
		Tuples output;
		Parameters parameters;
		ClassString class;
		Tuples input;
	}

	compound HardwareAlgorithm refines Algorithm {
		PositiveInteger senderParallelism;
		PositiveInteger receiverParallelism;
		OptionalPositiveInteger senderNumTasks;
		OptionalPositiveInteger receiverNumTasks;
	}

	setOf(refTo(Algorithm)) algorithms;
	Constraint algNamesUnique = size(algorithms->collect(a|substitutes(a.name, " ", ""))) == size(algorithms);
}
