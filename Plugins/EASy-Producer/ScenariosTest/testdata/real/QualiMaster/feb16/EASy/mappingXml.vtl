import commonVTLMethods;
@advice(QM)
template mappingXml(Configuration config, FileArtifact target, Pipeline pipeline) {
    def processElement(sequenceOf(DecisionVariable) output, Text text, setOf(String) nodes, setOf(Algorithm) algorithms, String pipName) {     	
        for(Flow v : output) { 
            DecisionVariable elt = v.destination;
            String nodeName = elt.varName();
            String nodeClsName = elt.varName().firstToUpperCase() + elt.type();                  	            
			appendForNode(elt, nodes, algorithms, pipName, text); 
            processElement(elt.byName("output").variables(), text, nodes, algorithms, pipName);
        } 
    }
    
    def appendForNode(DecisionVariable elt, setOf(String) nodes, setOf(Algorithm) algorithms, String pipName, Text text) {
        Boolean useThrift = not(genMonitoringProbes);
    	String nodeName = elt.varName();
    	String nodeClsName = elt.varName().firstToUpperCase() + elt.type();
    	if(elt.type() == "Source" and !isStringExisted(nodeName, nodes)) {               	
	    	Source src =elt;
	        DataSource dataSrc = src.source;
	        String srcName = src.name;                         
	        text.append('      <node name="$srcName" type="source">\n');
	        text.append('          <component name="$nodeName" container="$pipName" class="eu.qualimaster.$pipName.topology.$nodeClsName" receiver="true" thrift="${useThrift}" tasks="${src.parallelism}"/>\n');                    
	        text.append('      </node>\n');
	    }
    	if(elt.type() == "Sink" and !isStringExisted(nodeName, nodes)) {
            Sink snk = elt;
            String snkName = snk.name;
            text.append('      <node name="$snkName" type="sink">\n');
            text.append('          <component name="$nodeName" container="$pipName" class="eu.qualimaster.$pipName.topology.$nodeClsName" receiver="true" thrift="${useThrift}" tasks="${snk.parallelism}"/>\n'); 
            text.append('      </node>\n'); 
        } 
        if(elt.type() == "FamilyElement" and !isStringExisted(nodeName, nodes)) {
            FamilyElement fe = elt;
            Family fm = fe.family;
            String fmName = fe.name;
            String algs = "";
            int pos = 0;
            for(Algorithm alg : fm.members) {
                String algName = algName(alg);
                algorithms.add(alg);
                if (algs.length() > 0) {
                    algs = algs + " ";
                }
                algs = algs + 'alternative${pos} = "${algName}"';
                pos = pos + 1;
            }
            if (algs.length() > 0) {
                algs = " " + algs;
            }
            text.append('      <node name="$fmName" type="family">\n');
            text.append('          <component name="$nodeName" container="$pipName" class="eu.qualimaster.$pipName.topology.$nodeClsName" receiver="true" thrift="${useThrift}" tasks="${fe.parallelism}"$algs/>\n'); 
            text.append('      </node>\n'); 
        }
        if(elt.type() == "DataManagementElement" and !isStringExisted(nodeName, nodes)) {
            DataManagementElement fe = elt;
            String fmName = fe.name;
            text.append('      <node name="$fmName" type="data_mgt">\n');
            text.append('          <component name="$nodeName" container="$pipName" class="eu.qualimaster.$pipName.topology.$nodeClsName" receiver="true" thrift="${useThrift}"/>\n'); 
            text.append('      </node>\n'); 
        }        
		nodes.add(nodeName); 
    }
	def main(Configuration config, FileArtifact target, Pipeline pipeline) {		
		Text text = target.getText();
		text.append("<mapping>\n");
//		for(DecisionVariable vPip : activePipelines) {
//			Pipeline pipeline = vPip;
			String pipName = pipeline.name;
			String topologyClsName = "eu.qualimaster.$pipName.topology.Topology";
	        setOf(String) nodes = {};
	        setOf(Algorithm) algorithms = {};
			text.append('  <pipeline name="$pipName" class="$topologyClsName">\n');
			for(DecisionVariable v : pipeline.sources) {
				String nodeName = v.varName();
	            String nodeClsName = v.varName().firstToUpperCase() + v.type();	
	            appendForNode(v, nodes, algorithms, pipName, text);  
	            processElement(v.byName("output").variables(), text, nodes, algorithms, pipName);
	        }
	        for(DecisionVariable v : pipeline.connectors) {//considering the connectors from subpipeline
		    	appendForNode(v, nodes, algorithms, pipName, text);
		    	processElement(v.byName("output").variables(), text, nodes, algorithms, pipName);
	    	}
	        for(Algorithm alg : algorithms) {
		        String algName = algName(alg);
                String n = alg.class;
                JavaPath algPath = n;
                String implName = algPath.getName();
	        	text.append('      <algorithm name="${algName}" implName="${implName}" class="${n}"/>\n');        	        	
	        }
			text.append('  </pipeline>\n');
			text.append('\n');				        			
//		}
        

		text.append("</mapping>\n");
		target.rename("mapping.xml");
	}
	
	def String algName(Algorithm alg) {
	    // old mapping
        String n = alg.class;
        JavaPath algPath = n;
	    algPath.getName();
	    // new mapping, this is the name as defined in the configuration!
	    alg.name;
	}
    	
}