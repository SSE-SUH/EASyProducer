project AlgorithmsCfg {

	import ReconfigurableHardware;
	import ReconfigurableHardwareCfg;
	import Algorithms;
	import BasicsCfg;
	Algorithm swPreprocessor;
	Algorithm SWTopoCorrelationFinancial;
	Algorithm HWTopoCorrelationFinancial;
	Algorithm GenHWTopoCorrelationFinancial;
	Algorithm HWTopoCorrelationTwitter;
	Algorithm SWTopoCorrelationTwitter;
	Algorithm topoSentiWord;
	Algorithm topoSVM;
	Algorithm mismatchedAlg;
	Algorithm randomAlg1;
	Algorithm randomAlg2;
	Algorithm switchAlg1;
	Algorithm switchAlg2;
	Algorithm switchAlgHw;
	Algorithm preprocessorTest;
	Algorithm financialCorrelationTest;
	Algorithm sentimentAnalysisTest;
	Algorithm twitterCorrelationTest;
	Algorithm AlgorithmVar_18;
	Algorithm AlgorithmVar_19;
	Algorithm AlgorithmVar_20;
	Algorithm AlgorithmVar_21;
	Algorithm AlgorithmVar_22;
	Algorithm AlgorithmVar_23;
	Algorithm AlgorithmVar_24;
	Algorithm recommendations;
	Algorithm eventEnrichment;
	Algorithm keywordAnalyzer;
	Algorithm tweetClassifier;
	Algorithm spamRemoval;
	Algorithm spamDetection;
	Algorithm twitterStreamFiltering;
	Algorithm twitterCrawling;
	Algorithm expertSearch;
	Algorithm financialNetworkExtraction;
	Algorithm AlgorithmVar_25;
	Algorithm AlgorithmVar_26;
	Algorithm AlgorithmVar_27;
	Algorithm AlgorithmVar_28;
	algorithms = {
		refBy(swPreprocessor), refBy(SWTopoCorrelationFinancial), refBy(HWTopoCorrelationFinancial), refBy(SWTopoCorrelationTwitter), refBy(HWTopoCorrelationTwitter), refBy(topoSentiWord), refBy(topoSVM), refBy(mismatchedAlg), refBy(randomAlg1), refBy(randomAlg2), refBy(switchAlg1), refBy(switchAlg2), refBy(switchAlgHw), refBy(preprocessorTest), refBy(financialCorrelationTest), refBy(sentimentAnalysisTest), refBy(twitterCorrelationTest), refBy(AlgorithmVar_18), refBy(AlgorithmVar_19), refBy(AlgorithmVar_20), refBy(AlgorithmVar_21), refBy(AlgorithmVar_22), refBy(AlgorithmVar_23), refBy(AlgorithmVar_24), refBy(recommendations), refBy(eventEnrichment), refBy(keywordAnalyzer), refBy(tweetClassifier), refBy(spamRemoval), refBy(spamDetection), refBy(twitterStreamFiltering), refBy(twitterCrawling), refBy(expertSearch), refBy(financialNetworkExtraction), refBy(AlgorithmVar_25), refBy(AlgorithmVar_26), refBy(AlgorithmVar_27), refBy(GenHWTopoCorrelationFinancial), refBy(AlgorithmVar_28)
	};
	algorithms.bindingTime = BindingTime.compile;
	swPreprocessor = Algorithm {
		name = "Preprocessor", 
		artifact = "eu.qualimaster:hy-preprocessor:3.0-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.correlation.Preprocessor", 
		input = {
			Tuple {
				name = "springStream", 
				fields = {
					Field {
						name = "symbolTuple", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	SWTopoCorrelationFinancial = Algorithm {
		name = "TopoSoftwareCorrelationFinancial", 
		artifact = "eu.qualimaster:hy-correlation-financial-software:3.2-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.correlation.softwaresubtopology.TopoSoftwareCorrelationFinancial", 
		description = "", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		algTopologyClass = "TopoSoftwareCorrelationFinancial", 
		successor = null,
		constraints={(family_Items * family_Items) / (2 * pipeline_Hosts) < 40000}
	};
	HWTopoCorrelationFinancial = Algorithm {
		name = "TopoHardwareCorrelationFinancial", 
		artifact = "eu.qualimaster:hy-correlation-financial-hardware:3.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.correlation.hardwaresubtopology.TopoHardwareCorrelationFinancial", 
		description = "", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		algTopologyClass = "TopoHardwareCorrelationFinancial", 
		successor = null,
		constraints={(family_Items * family_Items) / (2 * pipeline_Hosts) >= 40000}
	};
	GenHWTopoCorrelationFinancial = Algorithm {
		name = "GenTopoHardwareCorrelationFinancial", 
		artifact = "eu.qualimaster:GenTopoHardwareCorrelationFinancial:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.GenTopoHardwareCorrelationFinancial.GenTopoHardwareCorrelationFinancialSubtopology", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		hwNode = refBy(cluster2), 
		algTopologyClass = "GenTopoHardwareCorrelationFinancialSubtopology", 
		successor = null
	};
	HWTopoCorrelationTwitter = Algorithm {
		name = "TopoHardwareCorrelationTwitter", 
		artifact = "eu.qualimaster:hy-correlation-twitter-hardware:3.0-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.correlation.hardwaresubtopology.TopoHardwareCorrelationTwitter", 
		input = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseTwitter", 
				fields = {
					Field {
						name = "pairwiseCorrelationTwitter", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		algTopologyClass = "TopoHardwareCorrelationTwitter", 
		successor = null
	};
	SWTopoCorrelationTwitter = Algorithm {
		name = "TopoSoftwareCorrelationTwitter", 
		artifact = "eu.qualimaster:hy-correlation-twitter-software:3.0-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.correlation.softwaresubtopology.TopoSoftwareCorrelationTwitter", 
		description = "", 
		input = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseTwitter", 
				fields = {
					Field {
						name = "pairwiseCorrelationTwitter", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		algTopologyClass = "TopoSoftwareCorrelationTwitter", 
		successor = null
	};
	topoSentiWord = Algorithm {
		name = "SentimentAnaylsisSentiWordNetTopology", 
		artifact = "eu.qualimaster:SentiWordnetSubTopology:0.0.5-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.sentiment.topology.impl.SentimentAnaylsisSentiWordNetTopology", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 60, 
				name = "timeSeriesGranularity"
			}, IntegerParameter {
				defaultValue = 10, 
				name = "sentimentClass"
			}, RealParameter {
				defaultValue = 2.5, 
				name = "classificationThreshold"
			}
		}, 
		algTopologyClass = "SentimentAnaylsisSentiWordNetTopology", 
		successor = null
	};
	topoSVM = Algorithm {
		name = "SentimentAnaylsisSVMTopology", 
		artifact = "eu.qualimaster:SVMSubTopology:0.0.5-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.sentiment.topology.impl.SentimentAnaylsisSVMTopology", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 60, 
				name = "timeSeriesGranularity"
			}, IntegerParameter {
				defaultValue = 10, 
				name = "sentimentClass"
			}, RealParameter {
				defaultValue = 2.5, 
				name = "classificationThreshold"
			}
		}, 
		algTopologyClass = "SentimentAnaylsisSVMTopology", 
		successor = null
	};
	mismatchedAlg = Algorithm {
		name = "MismatchedAlg", 
		artifact = "eu.qualimaster:MismatchedAlg:0.0.1", 
		class = "eu.qualimaster.algorithms.impl.MismatchedAlg", 
		input = {
			Tuple {
				name = "misString", 
				fields = {
					Field {
						name = "symbolTuple1", 
						type = refBy(StringType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "misString", 
				fields = {
					Field {
						name = "streamID1", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(IntegerType)
					}, Field {
						name = "quote", 
						type = refBy(RealType)
					}
				}
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	randomAlg1 = Algorithm {
		name = "RandomProcessor1", 
		artifact = "eu.qualimaster.test:RandomProcessor1:0.0.2-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.RandomProcessor1", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "proccessedData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}, BooleanParameter {
				defaultValue = false, 
				name = "flag"
			}
		}, 
		algTopologyClass = "RandomProcessor1", 
		successor = null
	};
	randomAlg2 = Algorithm {
		name = "RandomProcessor2", 
		artifact = "eu.qualimaster.test:RandomProcessor2:0.0.2-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.RandomProcessor2", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "proccessedData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}, BooleanParameter {
				defaultValue = false, 
				name = "flag"
			}
		}, 
		algTopologyClass = "RandomProcessor2", 
		successor = null
	};
	switchAlg1 = Algorithm {
		name = "SwitchProcessor1", 
		artifact = "eu.qualimaster.test:SwitchProcessor1:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.SwitchProcessor1", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "proccessedData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 0, 
				name = "aggregationFactor"
			}, IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}, BooleanParameter {
				defaultValue = true, 
				name = "flag"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	switchAlg2 = Algorithm {
		name = "SwitchProcessor2", 
		artifact = "eu.qualimaster.test:SwitchProcessor2:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.SwitchProcessor2", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "proccessedData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 0, 
				name = "aggregationFactor"
			}, IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}, BooleanParameter {
				defaultValue = true, 
				name = "flag"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	switchAlgHw = Algorithm {
		name = "HardwareAlgorithmSubTopology", 
		artifact = "eu.qualimaster.test:SwitchProcessorHardware:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.HardwareAlgorithmSubTopology.HardwareAlgorithmSubTopology", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "proccessedData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 0, 
				name = "aggregationFactor"
			}, IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}, BooleanParameter {
				defaultValue = true, 
				name = "flag"
			}
		}, 
		hwNode = refBy(cluster1), 
		algTopologyClass = "HardwareAlgorithmSubTopology", 
		successor = null
	};
	preprocessorTest = Algorithm {
		name = "PreprocessorTSI", 
		artifact = "eu.qualimaster.test:PreprocessorTSI:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.PreprocessorTSI", 
		input = {
			Tuple {
				name = "springStream", 
				fields = {
					Field {
						name = "symbolTuple", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	financialCorrelationTest = Algorithm {
		name = "FinancialCorrelationTest", 
		artifact = "eu.qualimaster.test:FinancialCorrelationTest:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.FinancialCorrelationTest", 
		description = "", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	sentimentAnalysisTest = Algorithm {
		name = "SentimentAnalysisTest", 
		artifact = "eu.qualimaster.test:SentimentAnalysisTest:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.SentimentAnalysisTest", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 60, 
				name = "timeSeriesGranularity"
			}, IntegerParameter {
				defaultValue = 10, 
				name = "sentimentClass"
			}, RealParameter {
				defaultValue = 2.5, 
				name = "classificationThreshold"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	twitterCorrelationTest = Algorithm {
		name = "TwitterCorrelationTest", 
		artifact = "eu.qualimaster.test:TwitterCorrelationTest:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.TwitterCorrelationTest", 
		input = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType)
					}, Field {
						name = "timestamp", 
						type = refBy(LongType)
					}, Field {
						name = "value", 
						type = refBy(RealType)
					}, Field {
						name = "volume", 
						type = refBy(IntegerType)
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseTwitter", 
				fields = {
					Field {
						name = "pairwiseCorrelationTwitter", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	AlgorithmVar_18 = Algorithm {
		name = "TwitterEventDetectionTopologyMovingAverage", 
		artifact = "eu.qualimaster:EventDetectionMovingaverageTopology:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.eventdetection.topology.impl.TwitterEventDetectionTopologyMovingAverage", 
		description = "", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}, Field {
						name = "stocks", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		parameters = {}, 
		algTopologyClass = null, 
		successor = null
	};
	AlgorithmVar_19 = Algorithm {
		name = "TwitterEventDetectionTopologyKleinberg", 
		artifact = "eu.qualimaster:EventDetectionKleinbergTopology:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.eventdetection.topology.impl.TwitterEventDetectionTopologyKleinberg", 
		description = "", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "symbols", 
						type = refBy(IFEventListType)
					}, Field {
						name = "timeInterval", 
						type = refBy(IFTimeIntervalType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	AlgorithmVar_20 = Algorithm {
		name = "EventPredictionFuturedatementionsTopology", 
		artifact = "eu.qualimaster:EventPredictionFuturedatementionsTopology:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.event.prediction.topology.impl.EventPredictionFuturedatementionsTopology", 
		description = "", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "symbols", 
						type = refBy(IFEventListType)
					}, Field {
						name = "timeInterval", 
						type = refBy(IFTimeIntervalType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	AlgorithmVar_21 = Algorithm {
		name = "EventPredictionCalendarTopology", 
		artifact = "eu.qualimaster:EventPredictionCalendarTopology:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.event.prediction.topology.impl.EventPredictionCalendarTopology", 
		description = "", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "symbols", 
						type = refBy(IFEventListType)
					}, Field {
						name = "timeInterval", 
						type = refBy(IFTimeIntervalType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	AlgorithmVar_22 = Algorithm {
		name = "StockParser  ", 
		artifact = "eu.qualimaster:StockParser:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stockParser.family.impl.StockParserAlgorithm", 
		description = "", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}, Field {
						name = "stocks", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	AlgorithmVar_23 = Algorithm {
		name = "SimpleRecommendations", 
		artifact = "eu.qualimaster:SimpleRecommendations:0.0.2-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.simpleRecommendations.family.impl.SimpleRecommendationsAlgorithm", 
		description = "", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "recommendations", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		algTopologyClass = "", 
		successor = null
	};
	AlgorithmVar_24 = Algorithm {
		name = "EventDetectionHardThreshold", 
		artifact = "eu.qualimaster:EventDetectionHardThresholdAlgorithm:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.eventdetection.family.impl.EventDetectionHardThresholdAlgorithm", 
		description = "", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}, Field {
						name = "stocks", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 1000, 
				name = "hardThreshold"
			}, RealParameter {
				defaultValue = 0.5, 
				name = "percentageThreshold"
			}, IntegerParameter {
				defaultValue = 86400, 
				name = "lengthOfTimeWindow"
			}, IntegerParameter {
				defaultValue = 1, 
				name = "frequenceOfCheckForEvent"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	recommendations = Algorithm {
		name = "Recommendations", 
		artifact = "eu.qualimaster:Recommendations:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.recommendations.family.impl.RecommendationsAlgorithm", 
		description = "", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "recommendationStream", 
				fields = {
					Field {
						name = "recommendations", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			RealParameter {
				defaultValue = 0.5, 
				name = "impactThreshold"
			}, RealParameter {
				defaultValue = 0.5, 
				name = "stockCooccurrenceThreshold"
			}
		}, 
		algTopologyClass = "", 
		successor = null
	};
	eventEnrichment = Algorithm {
		name = "EventEnrichment", 
		artifact = "eu.qualimaster.test:PreprocessorTSI:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.PreprocessorTSI", 
		description = "simply adds keywords to events", 
		input = {
			Tuple {
				name = "eventStream", 
				fields = {
					Field {
						name = "tweet", 
						type = refBy(ObjectType)
					}, Field {
						name = "events", 
						type = refBy(ObjectType)
					}
				}
			}, Tuple {
				name = "keywordStream", 
				fields = {
					Field {
						name = "keywords", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "enrichedEventsStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	keywordAnalyzer = Algorithm {
		name = "KeywordAnalyzer", 
		artifact = "eu.qualimaster:KeywordAnalyzer:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.keywordAnalyzer.correlation.BasicKeywordAnalyzerAlgorithm", 
		description = "deduces typical keywords for a current event", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		parameters = {
			RealParameter {
				defaultValue = 0.5, 
				name = "threshold"
			}, RealParameter {
				defaultValue = 0.5, 
				name = "decay"
			}
		}, 
		algTopologyClass = "", 
		successor = null
	};
	tweetClassifier = Algorithm {
		name = "TweetClassifier", 
		artifact = "eu.qualimaster.test:PreprocessorTSI:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.PreprocessorTSI", 
		description = "checks if tweet belongs to a certain stock", 
		input = {
			Tuple {
				name = "modifiedTwitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}, Tuple {
				name = "keywordStream", 
				fields = {
					Field {
						name = "keywords", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "modifiedTwitterStream", 
				fields = {
					Field {
						name = "tweet", 
						type = refBy(ObjectType)
					}, Field {
						name = "stocks", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	spamRemoval = Algorithm {
		name = "SpamRemoval", 
		artifact = "eu.qualimaster:SpamRemovalAlgorithm:0.1.5-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.spam.SpamRemovalBolt", 
		description = "Removes Spam from twitter stream", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}, Field {
						name = "spamPropability", 
						type = refBy(DoubleType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		parameters = {
			RealParameter {
				defaultValue = 0.5, 
				name = "spamThreshold"
			}
		}, 
		algTopologyClass = "", 
		successor = null
	};
	spamDetection = Algorithm {
		name = "SpamDetection", 
		artifact = "eu.qualimaster:SpamDetectionAlgorithm:0.1.5-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.stream.spam.SpamDetectionBolt", 
		description = "Detects spam in tweet stream", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType)
					}, Field {
						name = "spamPropability", 
						type = refBy(DoubleType)
					}
				}
			}
		}, 
		algTopologyClass = "", 
		successor = null
	};
	twitterStreamFiltering = Algorithm {
		name = "TwitterStreamFiltering", 
		artifact = "eu.qualimaster.test:PreprocessorTSI:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.PreprocessorTSI", 
		description = "", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType), 
						keyPart = false
					}
				}
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	twitterCrawling = Algorithm {
		name = "TwitterCrawling", 
		artifact = "eu.qualimaster.test:PreprocessorTSI:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.PreprocessorTSI", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(StatusType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType), 
						keyPart = false
					}, Field {
						name = "timeInterval", 
						type = refBy(IFTimeIntervalType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	expertSearch = Algorithm {
		name = "ExpertSearch", 
		artifact = "eu.qualimaster.test:PreprocessorTSI:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.PreprocessorTSI", 
		description = "", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(StatusType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "experts", 
						type = refBy(IFExpertListType), 
						keyPart = false
					}, Field {
						name = "timeInterval", 
						type = refBy(IFTimeIntervalType), 
						keyPart = false
					}, Field {
						name = "keywords", 
						type = refBy(StringListType), 
						keyPart = false
					}, Field {
						name = "symbols", 
						type = refBy(StringListType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	financialNetworkExtraction = Algorithm {
		name = "FinancialNetworkExtraction", 
		artifact = "eu.qualimaster.test:PreprocessorTSI:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.test.algorithms.PreprocessorTSI", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(StatusType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "edges", 
						type = refBy(IFEdgeListType), 
						keyPart = false
					}, Field {
						name = "timeInterval", 
						type = refBy(IFTimeIntervalType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}
		}, 
		algTopologyClass = null, 
		successor = null
	};
	AlgorithmVar_25 = Algorithm {
		name = "DynamicGraphCompilation", 
		artifact = "eu.qualimaster:dynamic-graph-compilation:0.1-SNAPSHOT", 
		class = "eu.qualimaster.dynamicgraph.DynamicGraphCompilation", 
		description = "", 
		input = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "edgeStream", 
				fields = {
					Field {
						name = "edge", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			RealParameter {
				name = "correlationThreshold"
			}
		}, 
		algTopologyClass = "", 
		successor = null
	};
	AlgorithmVar_26 = Algorithm {
		name = "TopoDynamicHubComputation", 
		artifact = "eu.qualimaster:dynamic-hub-computation:0.1-SNAPSHOT", 
		class = "eu.qualimaster.dynamicgraph.TopoDynamicHubComputation", 
		description = "", 
		input = {
			Tuple {
				name = "edgeStream", 
				fields = {
					Field {
						name = "edge", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "hubStream", 
				fields = {
					Field {
						name = "hubList", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}, IntegerParameter {
				defaultValue = 10, 
				name = "hubListSize"
			}
		}, 
		algTopologyClass = "TopoDynamicHubComputation", 
		successor = null
	};
	AlgorithmVar_27 = Algorithm {
		name = "TransferEntropy", 
		artifact = "eu.qualimaster:transferentropy-financial-hardware:3.0-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.imp.transferentropy.hardwaresubtopology.TopoHardwareTransferEntropyFinancial", 
		description = "", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType), 
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType), 
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "windowSize"
			}
		}, 
		algTopologyClass = "TopoHardwareTransferEntropyFinancial", 
		successor = null
	};
	AlgorithmVar_28 = Algorithm {
		name = "GenTransferEntropy", 
		artifact = "eu.qualimaster:GenTransferEntropy:0.0.1-SNAPSHOT", 
		class = "eu.qualimaster.algorithms.GenTransferEntropy.GenTransferEntropySubtopology", 
		description = "", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType), 
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType), 
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType), 
						keyPart = false
					}
				}
			}
		}, 
		hwNode = refBy(cluster1), 
		algTopologyClass = "GenTransferEntropySubtopology", 
		successor = null
	};
	freeze {
		algorithms;
		swPreprocessor;
		SWTopoCorrelationFinancial;
		HWTopoCorrelationFinancial;
		GenHWTopoCorrelationFinancial;
		HWTopoCorrelationTwitter;
		SWTopoCorrelationTwitter;
		topoSentiWord;
		topoSVM;
		mismatchedAlg;
		randomAlg1;
		randomAlg2;
		switchAlg1;
		switchAlg2;
		switchAlgHw;
		preprocessorTest;
		financialCorrelationTest;
		sentimentAnalysisTest;
		twitterCorrelationTest;
		AlgorithmVar_18;
		AlgorithmVar_19;
		AlgorithmVar_20;
		AlgorithmVar_21;
		AlgorithmVar_22;
		AlgorithmVar_23;
		AlgorithmVar_24;
		recommendations;
		eventEnrichment;
		keywordAnalyzer;
		tweetClassifier;
		spamRemoval;
		spamDetection;
		twitterStreamFiltering;
		twitterCrawling;
		expertSearch;
		financialNetworkExtraction;
		AlgorithmVar_25;
		AlgorithmVar_26;
		AlgorithmVar_27;
		AlgorithmVar_28;
	} but (f|f.bindingTime >= BindingTime.runtimeMon)
}
