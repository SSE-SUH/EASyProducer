@advice(QM)
template hardwareConnection(Configuration config, FileArtifact target, DecisionVariable family, String ifName, String hwName, mapOf(Tuple,String) nameToOutputMap, mapOf(String, mapOf(Tuple, Tuple)) globalMap) {
	
	
    def String parameterTypeName(DecisionVariable var) {
    	switch(var.type()) {
    		"IntegerParameter" : "int",
    		"BooleanParameter" : "boolean",
    		"RealParameter" : "double",
    		"StringParameter" : "String"
    	}
    }
    def String fieldTypeName(DecisionVariable var) {
    	String type = var.byName("type");   	 
    	switch(type) {
    		"INTEGER" : "int",
    		"BOOLEAN" : "boolean",
    		"REAL" : "double",
    		"STRING" : "String",
    		"OBJECT": "Object",
    		"LONG" : "long",
    		"STRINGLIST" : "java.util.List<String>"
    	}    	
    }
    def produceForTuples(DecisionVariable tuples, Boolean output, Boolean implementation, String fName, Integer indent) {
	    String type;
	    String typeName;
    	String tupleName; 	    	   	   	
    	for (Tuple t : tuples) {
    		tupleName = t.name;
    		tupleName = firstToUpperCase(tupleName);
	        if (output) {
    		    type = "${fName}${tupleName}Output";
    		    typeName = "output";
    	    } else {
    		    type = "${fName}${tupleName}Input";
    		    typeName = "input";   		
    	    }
    	    		  	    	   		   
		    '/**' | indent;
            '* Provides a default implementation of the data ${typeName} for the {@link ${type}} algorithm.' | indent + 1;
            '* Actual execution system code may also directly wrap the respective tuple concept.' | indent + 1; 
		    '*/' | indent + 1;
    	    'public static class $type implements I${type} {' | indent;    	
    	    ''	
    	    //'private static final long serialVersionUID = 1L;' | indent + 4;   
    		for (Field f : t.fields) {
    			String fname = toIdentifier("${f.name}");
    			String ftype = fieldTypeName(f);
    			'private ${ftype} ${fname};' | indent + 4;
    		}
    		''
    		
    		for (Field f : t.fields) {
    			String fname = toIdentifier("${f.name}");
    			String mname = firstToUpperCase(fname);
    			String ftype = fieldTypeName(f);
				'@Override' | indent + 4;
	    		'public ${ftype} get${mname}(){' | indent + 4;
	    			'return ${fname};' | indent + 8;
	    		'}' | indent + 4;	    			
	    		''
	    		
				'@Override' | indent + 4;
	    		'public void set${mname}(${ftype} ${fname}){' | indent + 4;
	    			   'this.${fname} = ${fname};' | indent + 8;
	    		'}' | indent + 4;
    		}
    	'}' | indent;
    	''	   	       	
      }
    }
    def produceForVariable(mapOf(Tuple, Tuple) inputToOutputMapping, DecisionVariable tuples, Boolean input, Integer indent) {
        Integer inputTuplesSize = tuples.variables().size();
        String varName;
        String tupleName;
        String inputTupleId = "";
        Integer tupleCount = 1;
        for(Tuple t : tuples) {
        	/* 
        	if(input) {
				if(inputToOutputMapping.containsKey(t))	{
				  Tuple output = inputToOutputMapping.get(t);
				  varName = nameToOutputMap.get(output);				
				}        		
        	} else {
        	    if(inputTuplesSize >1) {
        		    inputTupleId = "${tupleCount}";
        	    }
        	    varName = "I${ifName}${inputTupleId}Output";	
        	    tupleCount = tupleCount + 1;
        	}
 			*/
			tupleName = t.name;   	
        	
        	if(input) {
        	    varName = "I${ifName}${firstToUpperCase(tupleName)}Input";	
        	} else {
        		varName = "I${ifName}${firstToUpperCase(tupleName)}Output";
        	} 
	
        	'$varName[] buffered${varName};'  | indent;
        	
        }       	
    }
    
    def produceForConstruction(DecisionVariable tuples, Boolean input, Integer indent) {
        Integer inputTuplesSize = tuples.variables().size();
        String varName;
        String tupleName;
        String inputTupleId = "";
        Integer tupleCount = 1;
        for(Tuple t : tuples) {
        	tupleName = t.name;
        	
        	if(input) {
        	    varName = "I${ifName}${firstToUpperCase(tupleName)}Input";	
        	} else {
        		varName = "I${ifName}${firstToUpperCase(tupleName)}Output";
        	}        	
        	'buffered${varName} = new $varName[size];'  | indent;
        }     	
    }
    
    def produceForCalculate(DecisionVariable inputTuples, DecisionVariable outputTuples) {
    	 Integer inputTuplesSize = inputTuples.variables().size();
    	 Integer outputTuplesSize = outputTuples.variables().size();   
    	 String inputTupleName;
    	 String outputTupleName; 	 
    	 String inputTupleId = "";
    	 String outputTupleId = "";
         Integer inputTupleCount = 1;   	   	 	  
    	 for(Tuple t : inputTuples){
    	 	inputTupleName = t.name;
    	           	        	      	 	
    	 	String inTypeName = "I${ifName}${firstToUpperCase(inputTupleName)}Input";

    	 	for(Tuple p : outputTuples){
    	      outputTupleName = p.name;  
    	 	  String outTypeName = "I${ifName}${firstToUpperCase(outputTupleName)}Output";  	 
    	
    	'    /**'
    	'     * Hardware algorithm.'
    	'     *'
    	'     * @param input the algorithm input taken from the input stream'
    	'     * @param result the result calculated by the algorithm'
    	'     */'
        '    public void calculate(${inTypeName} input, ${outTypeName} result) {'
	    '        //Send the size arg number.'
	    '        out.println(size);'
	    '        //Send data'
	    '        for(int i=0; i<buffered${inTypeName}.length; i++) {'
	    '            Utils.sleep(1);'
	    '            out.println(buffered${inTypeName}[i]);'
	    '        }'
	    '        logger.info("Maxeler call performed!");'
	    '        for(int i=0; i<buffered${outTypeName}.length; i++) {'
	    '            //buffered${outTypeName}[i] = in.readLine();'
	    '        }'
	    '        disconnect();'
        '    }'
        ''
           }  
       }
    }     
	
	def main(Configuration config, FileArtifact target, DecisionVariable family, String ifName, String hwName, mapOf(Tuple,String) nameToOutputMap, mapOf(String, mapOf(Tuple, Tuple)) globalMap){		

        String iName = ifName;
      	String ifOutputName = iName + "Output";
        Integer end = ifName.length();
		String name =  hwName;
		DecisionVariable inputTuples = family.byName("input");
		DecisionVariable outputTuples = family.byName("output");
		String fmVarName = family.varName().firstToUpperCase();
		mapOf(Tuple, Tuple) inputToOutputMapping = {};
		if(globalMap.containsKey(fmVarName)){
			inputToOutputMapping = globalMap.get(fmVarName);
		}		 
      	'package eu.qualimaster.hardware.imp;'
      	''
      	'import org.apache.log4j.Logger;'
      	'import java.io.BufferedReader;'
        'import java.io.IOException;'
        'import java.io.InputStreamReader;'
        'import java.io.PrintWriter;'
        'import java.net.Socket;'
        'import eu.qualimaster.families.inf.$iName;'
        'import eu.qualimaster.hardware.inf.*;'
        'import backtype.storm.utils.Utils;'
        'import eu.qualimaster.observables.IObservable;'
		''
		'/**'
		' * Define the family hardware connection class(GEN).'
		'**/'
		'public class $name implements $iName, HardwareStub{'		
		''
		'    final static Logger logger = Logger.getLogger($name.class);'
		'    private static PrintWriter out = null;'
        '    private static BufferedReader in = null;'
        '    private static int size = 384; //Maxeler input size needs to be a multiple of 384 elements'
        '    private static int count = 0;'
		produceForVariable(inputToOutputMapping, inputTuples, true, 4);
		produceForVariable(inputToOutputMapping, outputTuples, false, 4);
        ''
		'    /**'
		'    * Construction of family hardware connection.'
		'    **/'
		'    public $name() {'		
		produceForConstruction(inputTuples, true, 4);
		produceForConstruction(outputTuples, false, 4);		
		'    }'
		''
		'    /**'
		'    * Connect with Hardware.'
		'    **/'
		'    @Override'
		'    public void connect(String host) {'
        '        String[] hostInfo = host.split(":");'
        '        String IP = hostInfo[0];'
        '        String port = hostInfo[1];'
	 	'        try {'
		'            Socket sock = new Socket(IP, Integer.parseInt(port));'
 		'            in = new BufferedReader(new InputStreamReader(sock.getInputStream()));'
  		'            out = new PrintWriter(sock.getOutputStream(), true);'
	    '        }'
	    '        catch (IOException ioe) {'
		'            logger.error(ioe);'
	    '        }'
	    '    }'
	    ''
	    '    /**'
	    '    * Disconnect with hardware.'
	    '    **/'
	    '    @Override'
	    '    public void disconnect() {'
	    '        if(in != null)'
	    '            try {'
	    '                in.close();'
	    '                out.close();'
	    '            } catch(IOException e) {'
	    '                e.printStackTrace();'
	    '            }'
	    '    }'
	    ''
	   // produceForTuples(family.byName("input"), false, true, ifName, 4);
      //	produceForTuples(family.byName("output"), true, true, ifName, 4);
    	
	    produceForCalculate(family.byName("input"), family.byName("output")); 
	    
	        if (family.byName("parameters").variables().size()>0) {
	        '    // algorithm parameters'
	        ''
	        for (Parameter p : family.byName("parameters")) {
	        	String paramName = p.name;
    			String mname = firstToUpperCase(toIdentifier(paramName));
	        	'    /**'
	        	'     * Sets the algorithm parameter "${paramName}".'
	        	'     *'
	        	'     * @param value the new value of the algorithm parameter'
	        	'     */'
	        	'    public void setParameter${mname}(${parameterTypeName(p)} value) {'
	        	'    }'
	        	''
	    	}
    	}
    	
    	        '    @Override'
				'    public void switchState(State state) {'					
				'    }'
				''
				'    @Override'
				'    public Double getMeasurement(IObservable observable) {'
				'	    return null;'
				'    }'
    	
		'}'
			 			
	}
}