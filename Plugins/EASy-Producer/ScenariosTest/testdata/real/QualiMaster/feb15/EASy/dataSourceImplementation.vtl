@advice(QM)
template dataSourceImplementation(Configuration config, FileArtifact target, DecisionVariable elt) {

    def String parameterTypeName(DecisionVariable var) {
    	switch(var.type()) {
    		"IntegerParameter" : "int",
    		"BooleanParameter" : "boolean",
    		"RealParameter" : "double",
    		"StringParameter" : "String"
    	}
    }
    	
	def String fieldTypeName(DecisionVariable var) {
    	String type = var.byName("type");
    	switch(type) {
    		"INTEGER" : "int",
    		"BOOLEAN" : "boolean",
    		"REAL" : "double",
    		"STRING" : "String",
    		"OBJECT": "Object",
    		"LONG": "long",
    		"STRINGLIST": "java.util.List<String>"
    	}		
	}
	
	def produceForTuples(sequenceOf(Tuple) tuples, String srcName, Boolean output, Integer indent) {
		String type;
		String typeName;
		
		Integer tuplesSize = tuples.size();
		
    	String tupleId;
    	Integer tupleCount = 1;
    		for (Tuple t : tuples) {      
	    		String tupleId = "";
	    		if (tuplesSize > 1) {
	    			tupleId = "${tupleCount}"; // we need an operator
	    		}
	    		if (output) {
	    		    type = "${toIdentifier(srcName)}${tupleId}Output";
	    		    typeName = "output";
    	        } else {
	    		    type = "${toIdentifier(srcName)}${tupleId}Input";
	    		    typeName = "input";   		
	    	    }
		        '/**' | indent;
		        '* Define the source data input interface.' | indent;
		        '**/' | 4;
		        'public static class $type implements I${type} {' | indent;
		        
		        'private static final long serialVersionUID = 1L;' | indent + 4;
		        //produce the variable instances.	
		        for (Field f : t.fields) {
	    			String fname = toIdentifier("${f.name}");
	    			String ftype = fieldTypeName(f);
	    			'private ${ftype} ${fname};' | indent + 4;
    		    }
    		    		
    			for (Field f : t.fields) {
    				String fname = toIdentifier("${f.name}");
    				String mname = firstToUpperCase(fname);
    				String ftype = fieldTypeName(f);
    				'/**' | indent + 4;
					'* Returns the input value for tuple field "${f.name}".' | indent + 4;
					'* @return the tuple value' | indent + 4;
					'*/' | indent + 4;
    				'@Override' | indent + 4;
		    		'public ${ftype} get${mname}(){' | indent + 4;
		    			'return ${fname};' | indent + 8;
		    		'}' | indent + 4;
    				''
    				'/**' | indent + 4;
					'* Sets the output value for tuple field "${f.name}".' | indent + 4;
					'* @param ${fname} the field value' | indent + 4;
					'*/' | indent + 4;
					'@Override' | indent + 4;
		    		'public void set${mname}(${ftype} ${fname}){' | indent + 4;
		    			   'this.${fname} = ${fname};' | indent + 8;
		    		'}' | indent + 4;
    			}
    			tupleCount = tupleCount + 1;
    			'}' | indent;
    		}
    		
    		''   	
	}
	
	def main(Configuration config, FileArtifact target, DecisionVariable elt){
		Source src = elt;   
		DataSource dataSrc = src.source;
		String srcName =dataSrc.name;
		srcName = srcName.firstToUpperCase();
		'package eu.qualimaster.data.imp;'
		''
		'import java.io.Serializable;'
		'import eu.qualimaster.data.inf.I${toIdentifier(srcName)}.*;'
		''
		'/**'
		'* Define the data source class(GEN).'
		'**/'
		'public class ${toIdentifier(srcName)} {'
		''
		 produceForTuples(dataSrc.input, srcName, true, 4);		
		''
		String dataSymbol;
		String tupleId = "";
		Integer tupleCount = 1;
		for(Tuple t : dataSrc.input){
			dataSymbol = "";
			Integer size = dataSrc.input.size();
			if(size > 1) {
				tupleId = "$tupleCount";
			}
			for(Field f : t.fields) {
			    String fname = toIdentifier("${f.name}");
    		    String mname = firstToUpperCase(fname);
    		    dataSymbol = dataSymbol + mname;	
			}
			
		'/**' | 4;
		'* Returns a specific type of data source.' | 4;
		'* @return ${toIdentifier(srcName)}${tupleId}Output the source data' | 4;
		'**/' | 4;
	    'public ${toIdentifier(srcName)}${tupleId}Output getData${tupleId}() {' | 4;
	    'return null;' | 8;
	    '}' | 4;
	    
	      tupleCount = tupleCount + 1;
		}
		
        if (dataSrc.parameters.size()>0) {
	        '    // data source parameters'
	        ''
	        for (Parameter p : dataSrc.parameters) {
	        	String paramName = p.name;
    			String mname = firstToUpperCase(toIdentifier(paramName));
    			String type = parameterTypeName(p);
	        	'    /**'
	        	'     * Sets the data source parameter "${paramName}".'
	        	'     *'
	        	'     * @param value the new value of the data source parameter'
	        	'     */'
	        	
	        	'    public void setParameter${mname}(${parameterTypeName(p)} value) {'
	        	'    }'
	        	''
	    	}
    	}		
		'}' 
		}
		
		
 
}