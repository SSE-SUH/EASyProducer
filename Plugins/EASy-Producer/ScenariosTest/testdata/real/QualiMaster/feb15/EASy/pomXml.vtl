@advice(QM)
template pomXml(Configuration config, FileArtifact target, sequenceOf(DecisionVariable) activePipelines) {
	
	setOf(String) nodes = {};
	setOf(Algorithm) algorithms = {};

    def Boolean nodeNotExisted(String name) {
    	Boolean exist = true;
    	for(String n : nodes) {
    		if(name == n) {
    			exist = false;   			
    		}
    	}
    	exist;
    }
    		
    def processElement(sequenceOf(DecisionVariable) output, Text text) {     	
        for(Flow v : output) { 
            DecisionVariable elt = v.destination;
            String nodeName = elt.varName();
            String nodeClsName = elt.varName().firstToUpperCase() + elt.type();                  	            
            if(elt.type() == "Sink" and nodeNotExisted(nodeName)) {
            	Sink snk = elt;
            	DataSink dataSnk = snk.sink;
            	String snkName = dataSnk.name;
            	String artifact = dataSnk.artifact;
				//for appending sink class dependencies 
                	sequenceOf(String) artList = artifact.split(":");
                	if(artList.size() == 3) {                		
	                	text.append("    <dependency>\n      <groupId>${artList[0]}</groupId>\n      <artifactId>${artList[1]}</artifactId>\n");
	                	text.append("      <version>${artList[2]}</version>\n    </dependency>\n");                		
                	}				
                nodes.add(nodeName);           	
            } 
            if(elt.type() == "FamilyElement" and nodeNotExisted(nodeName)) {
            	FamilyElement fe = elt;
            	Family fm = fe.family;
                nodes.add(nodeName);
                for(Algorithm alg : fm.members) {
                	String artifact = alg.artifact;
                	sequenceOf(String) artList = artifact.split(":");
                	if(artList.size() == 3) {                		
	                	text.append("    <dependency>\n      <groupId>${artList[0]}</groupId>\n      <artifactId>${artList[1]}</artifactId>\n");
	                	text.append("      <version>${artList[2]}</version>\n    </dependency>\n");                		
                	}

                }             	
            }
            processElement(elt.byName("output").variables(), text);
        } 
    }

	def appendPlugins(Text text) {
		text.append("            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>\n");
            text.append("            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>              
            </plugin>\n");
            text.append("            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <useDefaultManifestFile>true</useDefaultManifestFile>
                </configuration>
            </plugin>\n");
            text.append("            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>\n");
            text.append("        <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.3</version>
        <executions>
          <execution>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <executable>java</executable>
          <includeProjectDependencies>true</includeProjectDependencies>
          <includePluginDependencies>false</includePluginDependencies>
          <classpathScope>compile</classpathScope>
          <mainClass>"+"$"+"{storm.topology}"+"</mainClass>
        </configuration>
      </plugin>\n");
	}   
	
	def appendResources(Text text) {
		text.append("        <resource>
            <directory>"+"$"+"{basedir}/</directory>
            <filtering>false</filtering>
            <includes>
            <include>mapping.xml</include>
            </includes>
        </resource>\n");        
	}
    def appendCommonDependencies(Text text) {
    	text.append("    <dependency>      
      <groupId>org.apache.storm</groupId>
      <artifactId>storm-core</artifactId>
      <version>0.9.3</version>
	  <scope>provided</scope>
    </dependency>\n");
        text.append("    <dependency>
     <groupId>eu.qualimaster</groupId>
     <artifactId>TwitterSentimentAnalysisStream</artifactId>
     <version>0.1.4</version>
   </dependency>\n");
   		text.append("   <dependency>
     <groupId>eu.qualimaster</groupId>
     <artifactId>StormCommons</artifactId>
     <version>0.0.4</version>
   </dependency>\n");
   	    text.append("   <dependency>
     <groupId>eu.qualimaster</groupId>
     <artifactId>PriorityPipelineInterfaces</artifactId>
     <version>0.0.4</version>
   </dependency>\n");
   		text.append("   <dependency>
     <groupId>eu.qualimaster</groupId>
     <artifactId>DataManagementLayer</artifactId>
     <version>0.0.4</version>  
   </dependency>\n");
   		text.append("   <dependency>
     <groupId>eu.qualimaster</groupId>
     <artifactId>QualiMaster.Events</artifactId>
     <version>0.0.4</version>
   </dependency>\n");
    }
	
	def main(Configuration config, FileArtifact target, sequenceOf(DecisionVariable) activePipelines) {
		//createPomTemplate(target);
		Text text = target.getText();		
		text.append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n");		
		text.append("  <modelVersion>4.0.0</modelVersion>\n");
		text.append("  <groupId>eu.qualimaster</groupId>\n");
		text.append("  <artifactId>QM2.level</artifactId>\n");
		text.append("  <version>0.0.1-SNAPSHOT</version>\n");
		text.append("  <packaging>jar</packaging>\n");
		text.append("\n");
		text.append("  <build>\n");
		text.append("    <sourceDirectory>"+"$"+"{basedir}/src-gen</sourceDirectory>\n");
		text.append("    <plugins>\n");
		appendPlugins(text);
		text.append("    </plugins>\n");
		text.append("    <resources>\n");
		appendResources(text);
		text.append("    </resources>\n");
		text.append("  </build>\n");
		text.append("\n");
		text.append("  <repositories>\n");
		text.append("    <repository>\n      <id>clojars.org</id>\n      <url>http://clojars.org/repo</url>\n    </repository>\n");
		text.append("    <repository>\n      <id>qm.eu</id>\n      <name>qm.eu</name>\n      <url>https://projects.sse.uni-hildesheim.de/qm/maven/</url>\n    </repository>\n");
		text.append("  </repositories>\n");
		text.append("\n");
		text.append("  <dependencies>\n");
		appendCommonDependencies(text);
		for(DecisionVariable vPip : activePipelines) {
			Pipeline pipeline = vPip;
			for(DecisionVariable v : pipeline.sources) {
				String nodeName = v.varName();                       
	            if(v.type() == "Source" and nodeNotExisted(nodeName)) {               	
	                Source src =v;
	                DataSource dataSrc = src.source;
	                String artifact = dataSrc.artifact;                         
					//for source class dependencies
                	sequenceOf(String) artList = artifact.split(":");
                	if(artList.size() == 3) {                		
	                	text.append("    <dependency>\n      <groupId>${artList[0]}</groupId>\n      <artifactId>${artList[1]}</artifactId>\n");
	                	text.append("      <version>${artList[2]}</version>\n    </dependency>\n");                		
                	}					
	            }
	            nodes.add(nodeName);  
	            processElement(v.byName("output").variables(), text);
	        }			
			
		}
		text.append("  </dependencies>\n");
		text.append("</project>\n");
		target.rename("pom.xml");							
	}
}