project DataManagementCfg {
 
    import DataManagement;
 
    //DataSources for the priority pipeline 
    DataSource spring;
    spring = {
		host = "springtechno.org",
	    name = "Spring Financial Data",
	    artifact="eu.qualimaster:spring-client-simulator:0.0.1-SNAPSHOT",
		storageLocation = "input/spring",
		strategy = DataManagementStrategy.LeastRecentlyUsed,
		timeLine = 1000,
		input = {
              {fields={Field{name="symbolTuple", type=FieldType.STRING}}},
              {fields={Field{name="allSymbols", type=FieldType.STRINGLIST}}}
		},
		sourceCls = "eu.qualimaster.algorithms.imp.correlation.SpringClientSimulator"
	}; 
	 
	DataSource twitter;
	twitter = {
		host = "twitter.com",
		name = "Twitter Stream Data",
		artifact = "eu.qualimaster:TwitterStreamDataSource:0.0.4",
		storageLocation = "input/twitter",
		strategy = DataManagementStrategy.None,
		timeLine = 0,
		input = {
			{fields={Field{name="status", type=FieldType.OBJECT}}},
			{fields={Field{name="allSymbols", type=FieldType.STRINGLIST}}}
		},
		sourceCls = "eu.qualimaster.data.stream.source.TwitterFileStreaming",
		parameters={
			StringParameter{name="consumerKey"},
			StringParameter{name="consumerSecret"},
			StringParameter{name="accessToken"},
			StringParameter{name="accessTokenSecret"},
			IntegerParameter{name="queueSize"},
			StringParameter{name="tweetDirectory"},
			RealParameter{name="speedFactor"},
			BooleanParameter{name="runLocally"},
			BooleanParameter{name="adjustTimeToNow"},
			BooleanParameter{name="realLoops"}
		}			
	};

        dataSources = {refBy(spring), refBy(twitter)};	
	/* 
	//DataSources for example pipeline --test
	DataSource exampleSpring;
	exampleSpring = {
		host = "springtechno.org",
		name = "Example Spring Data",
		storageLocation = "input/exampleSpring",
		strategy = DataManagementStrategy.None,
		timeLine = 0,
		input = {
              {fields={Field{name="symbolTuple", type=FieldType.STRING}}}             
		},
		sourceCls = "eu.qualimaster.data.imp.ExampleSpringClient"
	};
	
	
	
	//DataSinks for priority pipeline
	DataSink publicTSI;
	publicTSI = {
	    name = "Public Financial Sink",
		storageLocation = "output/tsi",
		strategy = DataManagementStrategy.None,
		timeLine = 0,
		output = {
    		{fields={Field{name="pairwiseCorrelation", type=FieldType.STRING}}}
    	}		
	};
	 
	DataSink publicL3S;
	publicL3S = {
		name = "Public Twitter Sink",
		storageLocation = "output/l3s",
		strategy = DataManagementStrategy.None,
		timeLine = 0,
		output = {
    		{fields={
    			Field{name="symbolId", type=FieldType.STRING},
    			Field{name="timestamp", type=FieldType.LONG},
    			Field{name="value", type=FieldType.REAL},
    			Field{name="volume", type=FieldType.INTEGER}
    		}}
		}		
	};
    */
    DataSink priorSnk;
    priorSnk = {
    	name = "Priority Data Sink",
    	artifact = "eu.qualimaster:priority-data-sink:0.0.1-SNAPSHOT",
    	storageLocation = "output/prior",
    	strategy = DataManagementStrategy.None,
    	timeLine = 0,
    	output = {
    		{fields={Field{name="pairwiseCorrelationFinancial", type=FieldType.STRING}}},
    		{fields={Field{name="pairwiseCorrelationTwitter", type=FieldType.STRING}}}
    	},
    	sinkCls = "eu.qualimaster.algorithms.imp.correlation.PriorityDataSinkForFinancialAndTwitter"
    };
    /* 
    //DataSinks for example pipeline --test
    DataSink exampleSnk;
    exampleSnk = {
    	name = "Example Sink",
    	storageLocation = "output/example",
    	strategy = DataManagementStrategy.None,
    	timeLine = 0,
		output={
			{
			    fields={
			      Field{name="streamID", type=FieldType.STRING},
			      Field{name="timestamp", type=FieldType.STRING},
			      Field{name="quote", type=FieldType.REAL},
			      Field{name="volume", type=FieldType.INTEGER}
		        }
		    }
		}
    };
    */
	dataSinks = {refBy(priorSnk)};
	
	PersistentDataElement hBaseDataManagement;
	hBaseDataManagement = {
		name = "hBase DataManagement",
		storageLocation = "hBase-l3s",
		strategy = DataManagementStrategy.FirstInFirstOut,
		timeLine = 0
	};
	persistentDataElements = {refBy(hBaseDataManagement)};
	freeze {
		spring;
		twitter; 
		dataSources;
		priorSnk;
		dataSinks;
		hBaseDataManagement;
		persistentDataElements;
	}
	
}