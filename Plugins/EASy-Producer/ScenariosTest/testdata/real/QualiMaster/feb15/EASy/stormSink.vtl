@advice(QM)
template stormSink(Configuration config, FileArtifact target, DecisionVariable preElt, DecisionVariable elt, String topoName, mapOf(Tuple,String) nameToOutputMap, mapOf(String, mapOf(Tuple, Tuple)) globalMap,mapOf(String, setOf(DecisionVariable)) lastElementMap) {

	def produceInputVariable(sequenceOf(Tuple) tuples, Boolean variable, String fName) {
		String ifInputName = "I" + fName;
		Integer size = tuples.size();
		String tupleId = "";
		Integer tupleCount = 1;

		for(Tuple t : tuples) {
			if(size > 1) {
				tupleId = "$tupleCount";
			}
			String inputInfName = ifInputName + "${tupleId}Input";
			String fImpInputName = 	ifInputName + "${tupleId}Input";
			if(variable) {
				'    transient ${toIdentifier(inputInfName)} input${tupleId} = null;'
			} else {
				'        input${tupleId} = new $fName.$fImpInputName();'
			}
			
			tupleCount = tupleCount + 1;
		}
	}
	
	def produceOutputVariable(sequenceOf(Tuple) tuples, mapOf(Tuple, Tuple) inputToOutputMapping, mapOf(Tuple,String) nameToOutputMap, String fName) {
		String outputInfName; //output interface name
		
		String tupleId = "";	
		Integer tuplesSize = tuples.size();
		Integer tupleCount = 1;
		for(Tuple t : tuples) {
			if(tuplesSize > 1){
				tupleId = "$tupleCount";
			}
			//get output interface name	
			if(inputToOutputMapping.containsKey(t))	{
			  Tuple output = inputToOutputMapping.get(t);
			  outputInfName = nameToOutputMap.get(output);				
			} 
			'    transient $outputInfName iTuple${tupleId} = null;'	
			tupleCount = tupleCount + 1;					
	    }
	
	}
	
    def produceInputForTuples(mapOf(Tuple, Tuple) inputToOutputMapping, mapOf(Tuple,String) nameToOutputMap, DecisionVariable elt) {
		String familyName = elt.byName("sink").varName().firstToUpperCase();	
		String outputInfName; //output interface name	
		String inputInfName; //input interface name		
        Sink snk = elt;
        DataSink dataSnk = snk.sink;
		String snkName =dataSnk.name;
		String inputName = snkName.firstToUpperCase();
		String ifInputName = "I" + inputName; 
		String inputImpName;       

		String qualifiedClsName = dataSnk.sinkCls;
		JavaPath javaPath = qualifiedClsName;
		String impClassName = javaPath.getName(); //the class name of the sink implementation
        
        String tupleId = "";		
		Boolean multiStream = false;
		Integer indent = 4;
		sequenceOf(Tuple) tuples = dataSnk.output;
		Integer tuplesSize = tuples.size();
		Integer tupleCount = 1;
		for(Tuple t : tuples) {
			if(tuplesSize > 1){
				tupleId = "$tupleCount";
				multiStream = true;
				indent = 8;
			}
			//get input interface name
			inputInfName = ifInputName + "${tupleId}Input";
			
			inputImpName = inputName +"${tupleId}Input";
					
			//get output interface name	
			if(inputToOutputMapping.containsKey(t))	{
			  Tuple output = inputToOutputMapping.get(t);
			  outputInfName = nameToOutputMap.get(output);				
			} 									
			if(multiStream){
				'if(tuple.getValue(0) instanceof $outputInfName) {' | indent;
			}
			'iTuple${tupleId} = ($outputInfName)tuple.getValue(0);' | indent+4;
			'input${tupleId} = new ${toIdentifier(inputName)}.${toIdentifier(inputImpName)}();' | indent+4;
			 for(Field f : t.fields) {
				 String fname = toIdentifier("${f.name}");
    			 String mname = firstToUpperCase(fname);
    	         'input${tupleId}.set${mname}(iTuple${tupleId}.get${mname}());' | indent+4;
			 }
			 'sinkHandler.postData${tupleId}(input${tupleId});' | indent+4;
			 if(multiStream){
			 	'}' | indent;
			 }	
			 ''	
			 tupleCount = tupleCount + 1;	
		}					
		
	}

	def produceImportsFromLastElements(setOf(DecisionVariable) lastElt) {
	    for(DecisionVariable v : lastElt) {
    		if(v.type() == "Source"){
    		  Source src = v;
    	      DataSource dataSrc = src.source;
    	      String srcName = dataSrc.name;
		      String srcInfName = "I" + srcName.firstToUpperCase();
    	     'import eu.qualimaster.data.inf.${toIdentifier(srcInfName)}.*;'	
    		} else if(v.type() == "FamilyElement") {
    			//the name is the varName!!
    			String familyName = v.byName("family").varName();
                String ifName = "I" + familyName.firstToUpperCase();
    			'import eu.qualimaster.families.inf.${toIdentifier(ifName)}.*;'
    		} else if(v.type() == "DataManagementElement") {
    			String dmVarName = v.varName().firstToUpperCase();
    			setOf(DecisionVariable) lastElt = lastElementMap.get(dmVarName);
    			produceImportsFromLastElements(lastElt);
    		}
    	}
	}	

	def transferParameterValueType(DecisionVariable varParameter, String value) {
		String paraType = varParameter.type();
		Integer len = paraType.length();
		String type;
	    if(len>9){
			type = paraType.substring(0, len - 9);
		}	
       	switch(type) {
    		"Integer" : "Integer.parseInt($value)",
    		"Boolean" : "Boolean.parseBoolean($value)",
    		"Real" : "Double.parseDouble($value)",
    		"String" : "$value"   	
    	}					
	}
		
    def main(Configuration config, FileArtifact target, DecisionVariable preElt, DecisionVariable elt, String topoName, mapOf(Tuple,String) nameToOutputMap, mapOf(String, mapOf(Tuple, Tuple)) globalMap,mapOf(String, setOf(DecisionVariable)) lastElementMap) {
        String name = elt.varName().firstToUpperCase() + elt.type();
        String preIfName = "I" + preElt.byName("family").varName().firstToUpperCase();
		String streamId = elt.varName() + "Stream";
		Sink snk = elt;
		DataSink dataSnk = snk.sink;
		String qualifiedClsName = dataSnk.sinkCls;
		JavaPath javaPath = qualifiedClsName;
		String impClassName = javaPath.getName(); //the class name of the sink implementation	
			
		String fmVarName = elt.varName().firstToUpperCase();
		setOf(DecisionVariable) lastElt = lastElementMap.get(fmVarName); //last elements linked to the current element	
		
		String snkName =dataSnk.name;
		String inputName = snkName.firstToUpperCase();	
		
		String eltName = elt.varName().firstToUpperCase();
		mapOf(Tuple, Tuple) inputToOutputMapping = {};
		if(globalMap.containsKey(eltName)){
			inputToOutputMapping = globalMap.get(eltName);
		}
		
        'package eu.qualimaster.topologies.$topoName;'
    	''
    	'import java.util.*;'
    	'import org.apache.log4j.Logger;'
    	'import backtype.storm.tuple.*;'
    	'import backtype.storm.task.*;'
    	'import backtype.storm.topology.*;'
    	'import eu.qualimaster.common.signal.*;'
    	'import eu.qualimaster.data.inf.I${toIdentifier(snkName)};'
    	'import eu.qualimaster.data.inf.I${toIdentifier(snkName)}.*;'
    	'import eu.qualimaster.data.imp.${toIdentifier(snkName)};'
    	//'import eu.qualimaster.data.imp.${toIdentifier(snkName)}.*;'
    	'import $qualifiedClsName;'
    	produceImportsFromLastElements(lastElt);
    	''
    	'/**'
    	'* Defines the Sink class(GEN).'
    	'**/'
    	'@SuppressWarnings({ "rawtypes", "serial" })'
    	'public class $name extends BaseSignalBolt {'
    	''
    	'    final static Logger logger = Logger.getLogger($name.class);'
    	'    transient OutputCollector _collector;'
    	'    transient I${toIdentifier(snkName)} sinkHandler;'
    	produceOutputVariable(dataSnk.output, inputToOutputMapping, nameToOutputMap, inputName);
    	produceInputVariable(dataSnk.output, true, inputName);
    	''
    	'	public $name(String name, String namespace) {'
    	'        super(name, namespace);'
    	'    }'
    	''
		'    @Override'
		'    public void execute(Tuple tuple) {'
		'        //for now, sink just emits the tuple that get from last familyelement'
		
		 //produce input -- output casting statement
		produceInputForTuples(inputToOutputMapping, nameToOutputMap, elt);		
		//'        logger.info("Emitting data from Sink:" + iTuple);'
		//'        _collector.emit(tuple, new Values(iTuple));'
		'        _collector.ack(tuple);'
		'    }'
	    ''
		'    @Override'
		'    public void prepare(Map map, TopologyContext topologyContext, OutputCollector collector) {'
		'		super.prepare(map, topologyContext, collector);'
		'        _collector = collector;'
		'        sinkHandler = new $impClassName();'
		'    }'
	    ''
	    '    @Override'
        '    public void cleanup() {'
        '        super.cleanup();'
        '    }'
        ''
		'    @Override'
		'    public void declareOutputFields(OutputFieldsDeclarer declarer) {'
		'        declarer.declareStream("$streamId", new Fields("sinkData"));'
		'    }'
    	''
        '/**' | 4;
	    '* Receives the signal data for Sink adaptation.'| 4;
	    '* @param data the signal data' | 4;
	    '**/' | 4;    	
    	'    @Override'
	    '    public void onSignal(byte[] data) {'
        'String signal=new String(data);' | 8;
        'logger.info("Received signal: " + signal);' | 8;
        '//handle the received signal and make related changes, e.g., give a parameter to Source' | 8;
		'String[] parts = signal.split(":");' | 8;
		'if (parts.length >= 2) {' | 8;
		'if ("param".equals(parts[0]) && 3 == parts.length) {' | 12;

		setOf(Parameter) parameters = dataSnk.parameters;
		for(Parameter p : parameters) {
		    String paraName = p.name;
		    String paraValue = transferParameterValueType(p, "parts[2]");
		'switch (parts[1]) { // just for illustration, may need parameter conversion' | 16;
		'case "$paraName" : ' | 16;
		'alg.setParameter${paraName.firstToUpperCase()}($paraValue); ' | 16;
		'break;' | 16;
		'}'	| 16;		
		}		    
		'       	     /*switch (parts[1]) { // just for illustration, may need parameter conversion'
		' 	             case "param1" : '
		'		         alg.setParameterParam1(parts[2]); '
		' 	             break;'
		'	          }*/'
				    
		'}' | 12;
		'}' | 8;	    		
	    '    }'
    	'}'
    }
    
}