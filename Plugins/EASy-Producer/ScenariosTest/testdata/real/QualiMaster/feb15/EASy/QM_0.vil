@advice(QM)
vilScript QM (Project source, Configuration config, Project target) {

    version v0;
    Path targetPath = "$target/";
    Path mappingPath = "$target/mapping.xml";
    Path pomPath = "$target/pom.xml";
	Path proTarget = "$target/resources";
    Path srcGen = "$target/src-gen";
    Path ifGen = "$target/if-gen";
    Path hwGen = "$target/hw-gen";
    Path maxJ = "$hwGen/EngineCode/src/qm";
    Path maxC = "$hwGen/CPUCode";
    Path signal = "$srcGen/eu/qualimaster/signal";
    Path topology = "$srcGen/eu/qualimaster/topologies"; 

    mapOf(String, setOf(DecisionVariable)) lastElementMap = {};
    mapOf(Tuple,Tuple) inputToOutputMap = {};
    mapOf(Tuple,String) nameToOutputMap = {};
    mapOf(String, mapOf(Tuple,Tuple)) globalMap = {};
    mapOf(String, setOf(DecisionVariable)) familiesInPipeline = {};

    cleanup(Project target) = : {
        srcGen.delete();
        hwGen.delete(); 
        proTarget.delete();
        pomPath.delete();
        mappingPath.delete();
        
    }
    
    // this needs to be done separately, please do not clear the interfaces in cleanup
    cleanupInterfaces(Project target) = : {
        ifGen.delete();
    }      
    
    protected processElement(sequenceOf(DecisionVariable) output, DecisionVariable prevar, Configuration config, String topoName) = : {     	
        map(Flow v=output) { 
            DecisionVariable elt = v.destination;
            String eltName = elt.varName().firstToUpperCase();
            
            String name = elt.varName().firstToUpperCase() + elt.type();         
            vilTemplateProcessor("storm" + elt.type(), config, "$topology/${toIdentifier(topoName)}/$name.java", preElt = prevar, elt=elt, topoName=topoName, nameToOutputMap=nameToOutputMap, globalMap=globalMap, lastElementMap=lastElementMap);
            processElement(elt.byName("output").variables(), elt, config, topoName);
            if(elt.type() == "Sink") {
            	Sink snk = elt;
            	DataSink dataSnk = snk.sink;
            	String snkName = dataSnk.name;
            	snkName = snkName.firstToUpperCase();
            	vilTemplateProcessor("dataSinkInterface", config, "$ifGen/eu/qualimaster/data/inf/I${toIdentifier(snkName)}.java", elt=elt); //generate the data sink interface
            	vilTemplateProcessor("dataSinkImplementation", config, "$ifGen/eu/qualimaster/data/imp/${toIdentifier(snkName)}.java", elt=elt);
            }
        }; 
    }
    
    // entry point for interface generation - do not change the name / signature
    interfaces(Project source, Configuration config, Project target) = : cleanupInterfaces(target) {
    	QM topLevel = config;
    	/* 
    	//generate the algorithm topology interface
        String prefixPath = "$ifGen/eu/qualimaster/algorithms/inf";
        vilTemplateProcessor("algorithmTopologyInterface", config, "$prefixPath/ITopologyCreate.java");  
        */
		map(DecisionVariable f=topLevel.families) {
			String ifName = "I" + f.varName().firstToUpperCase(); 
			String fName = f.varName().firstToUpperCase();			

			//generate the family interfaces and implementations
			createInterfacesFor(f, ifName, config, target);
			createImpFor(f, fName, config, target);
			/* 
			//create the family hardware classes
			Family fm = f;
			map(Algorithm alg=fm.members) {
				if(alg.hwNode.isConfigured() and !alg.hwNode.isNull()){			
				createFamilyHardware(f, ifName, config, target);	// TODO select hardware-containing families only	
				}		    
			};
			*/
		};
	}  
 
    protected obtainGlobalMapForTuples(Pipeline pip, setOf(DecisionVariable) families) = : {//globalMap --> <elementName, mapOf(inputTuple, outputTuple)>
    	map(DecisionVariable v = pip.sources){
            if(v.type() == "Source") { // add <name,outputTuple>
            	Source src = v;
                DataSource dataSrc = src.source;
                String srcName = dataSrc.name;
            	Tuples outputTuples = dataSrc.input;
            	String name = "I" + srcName.firstToUpperCase();
            	name = "${toIdentifier(name)}";
                obtainNameToOutputMap(outputTuples, name);
            }
            processForGlobalMap(v.byName("output").variables(), v, families);    		
    	};
    }
   
	protected checkedLastElementForOutputTuples(setOf(DecisionVariable) lastElementSet, sequenceOf(Tuple) outputTuples) = : {
	    //Collect all output tuples from last elements	   	
		sequenceOf(Tuple) tmpTuples = {};
		map(DecisionVariable lastElt = lastElementSet){
	    	if(lastElt.type() == "Source"){
	    	   Source src = lastElt;
	    	   DataSource dataSrc = src.source;
	    	   tmpTuples = dataSrc.input;
	    	} else if(lastElt.type() == "FamilyElement") {
	     	   Family lastEltFamily = lastElt.byName("family");
	   	       tmpTuples = lastEltFamily.output;
	    	} else if(lastElt.type() == "DataManagementElement"){
	    	   String name = lastElt.varName().firstToUpperCase();
	    	   setOf(DecisionVariable) preLastEltSet = lastElementMap.get(name);
	    	   checkedLastElementForOutputTuples(preLastEltSet, outputTuples);
	    	}	    	    	 	 
	    	   map(Tuple t = tmpTuples){
	    	   outputTuples.add(t);
	           };
	    	    	     	    	 	
	    };
	    outputTuples;	
	}
	
    protected processForGlobalMap(sequenceOf(DecisionVariable)output, DecisionVariable lastVar, setOf(DecisionVariable) families) = : {//globalMap --> <elementName, mapOf(inputTuple, outputTuple)>
    	mapOf(Tuple, Tuple) tempMap = {};
    	setOf(DecisionVariable) lastElementSet = {};
    	sequenceOf(Tuple) inputTuples = {};    	
    	sequenceOf(Tuple) outputTuples = {};
    	sequenceOf(Tuple) tmpTuples = {};
    	map(Flow f = output){
    	    DecisionVariable elt = f.destination;	
    	    String eltName = elt.varName().firstToUpperCase();
    	    //check current element (FamilyElement, DataManagement or Sink)
    	    if(elt.type() != "DataManagementElement") {
	    	    if(elt.type() == "FamilyElement"){
	    	    	 DecisionVariable eltFamilyVar = elt.byName("family"); 
	    	    	 Family eltFamily = elt.byName("family"); 
	    	    	 String fName = eltFamilyVar.varName(); 	    	     	    	 
	    	    	 obtainNameToOutputMap(eltFamily.output, "II"+ fName.firstToUpperCase()); //obtain <currentElementName, outputTuple>
	    	         inputTuples = eltFamily.input;
	    	         //collect families
	    	         families.add(eltFamily);   	         
	    	    } else if(elt.type() == "Sink"){
	    	    	 Sink snk = elt;
	    	    	 DataSink dataSnk = snk.sink;
	    	    	 inputTuples = dataSnk.output;
	    	    }    	    
	    	    //check last elements linked to the current elt in order to obtain the output Tuples from last element(lastElement only can be Source or Family)
	    	    lastElementSet = lastElementMap.get(eltName);
	    	    checkedLastElementForOutputTuples(lastElementSet, outputTuples); //get all output tuples from last elements	    
	    	    tempMap = outputTuples.mapSequence(inputTuples);
	    	    globalMap.add(eltName, tempMap);
	    	    processForGlobalMap(elt.byName("output").variables(), elt, families); 
    	    } else { // if elt is DataManagementElement, just pass to next bolt
    	    	processForGlobalMap(elt.byName("output").variables(), elt, families); 
    	    }    	       	       	    
    	};
    }
    protected obtainNameToOutputMap(Tuples tuples,  String elementName) = : {//nameToOutputMap --> <elementName, outputTuple>
    	String eName = "";
    	Integer size = tuples.size();
        Integer tupleCount = 1;
        map(Tuple t = tuples) {
            if(size > 1) {
            	eName = elementName + "$tupleCount";
            }else{
            	eName = elementName;
            }
            String name = eName + "Output";
            nameToOutputMap.add(t,name);    
            tupleCount = tupleCount +1;
        };
    }
    
    protected obtainLastElementMap(Pipeline pip) = : {//lastElementMap --> <elementName, setOf(lastElement)>
        map(DecisionVariable v = pip.sources){
            processForLastElementMap(v.byName("output").variables(), v);    		
    	};
    } 
  
    protected processForLastElementMap(sequenceOf(DecisionVariable)output, DecisionVariable lastVar) = : { //lastElementMap --> <elementName, setOf(lastElement)>
  		map(Flow f = output){
    	    DecisionVariable elt = f.destination;	
    	    String eltName = elt.varName().firstToUpperCase();
    	    setOf(DecisionVariable) tempSet = {};
    	    
    	    if(lastElementMap.containsKey(eltName)) { //containsKey returns opposite boolean value
    	    	 tempSet = lastElementMap.get(eltName);
    	    	 setOf(DecisionVariable) t = {}; 
    	    	 map(DecisionVariable v : tempSet){
    	    	 	t.add(v);
    	    	 };    	    	
    	    	 t.add(lastVar); 
    	    	 tempSet = t; 	    	
    	    } else {
    	    	 tempSet.add(lastVar);
    	    }   	       	    
    	    lastElementMap.add(eltName, tempSet);
    	    if(!elt.byName("output").isNull()){
    	    	processForLastElementMap(elt.byName("output").variables(), elt);
    	    }    	    
    	    
    	};
    } 

   
    protected createImpFor(Family family, String fName, Configuration config, Project target) = : {
    	String prefixImpPath = "$ifGen/eu/qualimaster/families/imp/${toIdentifier(fName)}";
    	vilTemplateProcessor("familyImplementationJava", config, "$prefixImpPath.java", family=family, fName=fName);
    }
    
    protected createInterfacesFor(Family family, String ifName, Configuration config, Project target) = : {
        String prefixPath = "$ifGen/eu/qualimaster/families/inf/${toIdentifier(ifName)}";
    	vilTemplateProcessor("familyInterfaceJava", config, "$prefixPath.java", family=family, ifName=ifName);
    	vilTemplateProcessor("familyInterfaceC", config, "$prefixPath.c", family=family, ifName=ifName);
    	
    }
     	 
    protected createFamilyHardware(Family family, String ifName, Configuration config, Project target) = :{
    	Integer end = ifName.length();
    	map(Algorithm alg : family.members) {
    		if(alg.hwNode.isConfigured() and !alg.hwNode.isNull()) {
    		    String algName = alg.name;
    		    String prefixPath = "$ifGen/eu/qualimaster/hardware/imp/${toIdentifier(algName)}";
    	        vilTemplateProcessor("hardwareConnection", config, "$prefixPath.java", family=family, ifName=ifName, hwName=algName, nameToOutputMap=nameToOutputMap, globalMap=globalMap);	
    		}
    	};    	
    }
    
    protected createHardwareConnector(DecisionVariable elt) = : {
    	String eltName = elt.varName().firstToUpperCase();
    	DecisionVariable f = elt.byName("family");
    	String ifName = "I" + f.varName().firstToUpperCase(); 
    	Family fm = f;
    }
    
    protected createPomTempalte() = : {
    	
    }
    
    package() = : {
    	//jar("${target.getPath()}/bin", "${target.getPath()}/bin/**/*.class", "${target.getPath()}/Lib.jar");
    	//maven(targetPath);
    }
    
    main(Project source, Configuration config, Project target) = : cleanup(target) {
    	/* 
    	FileArtifact targetFile = "$target/Mapping.xml";
        XmlFileArtifact xmlFile = targetFile;
        xmlFile.createRootElement("project");
        XmlElement root = xmlFile.getRootElement();
        XmlElement ds = new XmlElement(root, "dependencies");
        // new XmlAttribute(hello, "attrib", "value");
        XmlElement d = new XmlElement(ds, "dependency");
         XmlElement g = new XmlElement(d, "groupId");
         XmlElement a = new XmlElement(d, "artifactId");
        */ 
       
    	//generate signal-related classes
    	/* 
        vilTemplateProcessor("signalListener", config, "$signal/SignalListener.java");
        vilTemplateProcessor("abstractSignalConnection", config, "$signal/AbstractSignalConnection.java",project=target);
        vilTemplateProcessor("stormSignalConnection", config, "$signal/StormSignalConnection.java");
        vilTemplateProcessor("baseSignalBolt", config, "$signal/BaseSignalBolt.java");
        vilTemplateProcessor("signalHandler", config, "$signal/SignalHandler.java");
        */
        // signal client is part of CoordinationLayer/ExecutionLayer           
       
        interfaces(source, config, target);
        //generate a basic HardwareStub interface
        vilTemplateProcessor("hardwareStub", config, "$ifGen/eu/qualimaster/hardware/inf/HardwareStub.java"); 
	
        sequenceOf(DecisionVariable) activePipelines = config.byName("activePipelines").variables();
        vilTemplateProcessor("pomXml", config, "$target/pom.tmp", activePipelines=activePipelines);
        //deriving a mapping xml
        vilTemplateProcessor("mappingXml", config, "$target/mapping.tmp", activePipelines=activePipelines);
        map(DecisionVariable vPip : activePipelines) {
        	Pipeline pip = vPip;
        	String topoName = pip.name;
        	setOf(DecisionVariable) families = {};
        	//test for map
        	obtainLastElementMap(pip);
        	obtainGlobalMapForTuples(pip, families);
        	familiesInPipeline.add(topoName, families);
        	//vilTemplateProcessor("test", config, "$srcGen/test.java", nameToOutputMap=nameToOutputMap, globalMap=globalMap,lastElementMap=lastElementMap,familiesInPipeline=familiesInPipeline);             
        	 
            //String topoName = vPip.varName;
//			artifactText.append('<pipeline name="$topoName">');         
            vilTemplateProcessor("stormPipeline", config, "$topology/${toIdentifier(topoName)}/Topology.java", pipeline=pip, familiesInPipeline=familiesInPipeline);
            map(DecisionVariable v=pip.sources) {
                String name = v.varName().firstToUpperCase() + v.type();
                vilTemplateProcessor("storm" + v.type(), config, "$topology/${toIdentifier(topoName)}/$name.java", elt=v, topoName=topoName);
                if(v.type() == "Source") {
                	Source src =v;
                	DataSource dataSrc = src.source;
                	String srcName = dataSrc.name; 
                	srcName = srcName.firstToUpperCase();      
                    vilTemplateProcessor("dataSourceInterface", config, "$ifGen/eu/qualimaster/data/inf/I${toIdentifier(srcName)}.java", elt=v); //generate the data source interface
                    vilTemplateProcessor("dataSourceImplementation", config, "$ifGen/eu/qualimaster/data/imp/${toIdentifier(srcName)}.java", elt=v);
                    
                } 
                processElement(v.byName("output").variables(), v, config, topoName);
            };
            vilTemplateProcessor("maxKernel", config, "$maxJ/Pipeline.maxj", pipeline=pip);
            vilTemplateProcessor("maxManager", config, "$maxJ/PipelineManager.maxj", pipeline=pip);
            vilTemplateProcessor("maxHost", config, "$maxC/PipelineCpuCode.c", pipeline=pip);
        };
        
        package();               
    }

}