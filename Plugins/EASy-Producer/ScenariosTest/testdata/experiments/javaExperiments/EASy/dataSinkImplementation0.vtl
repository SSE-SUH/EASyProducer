import commonVTLMethods0;
@advice(javaExperiments)
template dataSinkImplementation0(Configuration config, FileArtifact target, DataSink elt, Boolean profiling) {          
    mapOf(String, String) specificTypes = {};
    /*
     * Produces the tuple type classes.
     */
    def tupleProducer(Tuple t, String fName, String typeName, String type, Boolean output, Integer indent) {
        '/**' | indent;
        '* Define the source data input interface.' | indent;
        '**/' | indent;
        'public static class $type implements I${type} {' | indent;             
        produceFieldDeclarations(t, indent, {});
        ''
        produceFieldAccessors(t, false, indent, specificTypes);
        if(!profiling) {
            //register the seriliazers.
            String fserializer = formulateString(elt.name) + "Serializers";
            ''
            registerSerializer(fserializer, type, specificTypes, indent);
        }
        '}' | indent;
    }
    
    def main(Configuration config, FileArtifact target, DataSink dataSnk, Boolean profiling){
        String snkName =dataSnk.name;
        snkName = snkName.firstToUpperCase();
        String inputName = "I" + snkName;
        String snkIdentifier = toIdentifier(snkName);
        'package eu.qualimaster.data.imp;'
        ''
        'import eu.qualimaster.data.inf.I${snkIdentifier};'
        'import eu.qualimaster.data.inf.I${snkIdentifier}.*;'
        'import eu.qualimaster.dataManagement.strategies.*;'
        'import eu.qualimaster.observables.*;'
        'import eu.qualimaster.dataManagement.serialization.SerializerRegistry;'
        ''
        '/**'
        '* Define the data source class(GEN).'
        '**/'
        'public class ${snkIdentifier} implements I${snkIdentifier}{'
        ''
        produceForTuples(dataSnk.output, false, snkIdentifier, 4, tupleProducer);
        producePostEmitMethods(dataSnk.output, inputName, inputName, false, 4);
        produceParameterMethods(dataSnk.parameters, false, comment="// data sink parameters", parameterKind="data sink");
        
        '@Override' | 4;
        'public void connect() {}' | 4;
        ''
        '@Override' | 4;
        'public void disconnect(){}' | 4;
        ''
        '@Override' | 4;
        'public void setStrategy(IStorageStrategyDescriptor strategy) {}' | 4;
        ''
        '@Override' | 4;
        'public IStorageStrategyDescriptor getStrategy() { return NoStorageStrategyDescriptor.INSTANCE;}' | 4;
        ''
        '@Override' | 4;
        'public Double getMeasurement(IObservable observable) { return null;}'  | 4;
                
        '}' 
        }
 
}