import commonVTLMethods0;
@advice(javaExperiments)
template tupleSerialization0(Configuration config, FileArtifact target, DecisionVariable elt, String pkg) {

    Boolean isTupleForFamily = false;
	
    def tupleProducer(Tuple t, String fName, String typeName, String type, Boolean output, Integer indent) {
        String nestType = type;    
        String infNestType = "I${type}";
        String ifName = fName;
        if (isTupleForFamily) {
            nestType = "I" + nestType;
            infNestType = "I" + infNestType;
            ifName = "I" + fName;
        }
        Boolean flag1 = true;
        Boolean flag2 = false;
        String tupleName = firstToUpperCase(t.name);
        String serializerType = nestType + "Serializer";
        String iType = "${fName}.${nestType}"; // qualify inner classes
        String infType = "${ifName}.${infNestType}";   //qualify inner interfaces                         
        '/**' | indent;
        '* Provides a serializer (supports both Kyro and Protobuf) for the default implementation of the data ${typeName} for the {@link ${infType}} algorithm.' | indent + 1;
        '*/' | indent + 1;
        'public static class $serializerType extends Serializer<${iType}> implements ISerializer<${infType}> {' | indent;
        ''
        '@Override' | indent + 4;
        'public void serializeTo($infType object, OutputStream out) throws IOException {' | indent + 4;             
            for (Field f : t.fields) {  
                if (isBasicType(f.type)) {
                    if (flag1){
                        'S$nestType tmp = S$nestType.newBuilder()' | indent + 8; 
                        flag1 = false; //generate once
                        flag2 = true;
                    }               
                    String fname = toIdentifier(f.name);
                    String mname = firstToUpperCase(fname);                     
                    '.set${mname}(object.get${mname}())' | indent + 12;                     
                }                       
            }
            if(flag2) {
                '.build();' | indent + 12;
                'tmp.writeDelimitedTo(out);' | indent + 8;  
                flag2 = false; //generate once
            }
            for (Field f : t.fields) {
                String fname = toIdentifier(f.name);
                String mname = firstToUpperCase(fname);                                     
                if (!isBasicType(f.type)) {                      
                    if (!isListType(f.type)){
                        'SerializerRegistry.getSerializerSafe("${f.type.name}", ${f.type.class}.class).serializeTo(object.get${mname}(), out);' | indent + 8;                       
                    } else {
                        String innertype = obtainInnerType(f.type.class);
                        'SerializerRegistry.getListSerializerSafe("${f.type.name}", $innertype.class).serializeTo(object.get${mname}(), out);' | indent + 8;
                    }
                }
            }       
        '}' | indent + 4;
        ''

        produceDataInputSerialization(t, infType, indent + 4);
            
        '@Override' | indent + 4;
        'public $infType deserializeFrom(InputStream in) throws IOException {' | indent + 4;
             '$iType result = new $iType();' | indent + 8;
             flag1 = true;           
             for (Field f : t.fields) {
                 String fname = toIdentifier(f.name);
                 String mname = firstToUpperCase(fname);
                 if (isBasicType(f.type)) {
                     if (flag1) {
                         'S$nestType tmp = S$nestType.parseDelimitedFrom(in);' | indent + 8; 
                         flag1 = false; //only generate once
                     } 
                     'result.set${mname}(tmp.get${mname}());'    | indent + 8;               
                 } else {                        
                     if (!isListType(f.type)){
                         'result.set${mname}(SerializerRegistry.getSerializerSafe("${f.type.name}", ${f.type.class}.class).deserializeFrom(in));' | indent + 8;
                     } else {
                         String innertype = obtainInnerType(f.type.class);
                         'result.set${mname}(SerializerRegistry.getListSerializerSafe("${f.type.name}", $innertype.class).deserializeFrom(in));' | indent + 8;
                     }
                 }                   
            } 
            'return result;' | indent + 8;          
        '}' | indent + 4;
        ''

        produceDataInputDeserialization(t, infType, iType, indent + 4);
        produceKryoObjectHandling(t, iType, true, indent);
        ''
        produceKryoObjectHandling(t, iType, false, indent);
        '}' | indent;
        ''                      
	}
	
	def produceFor(DecisionVariable elt) {
		'//unhandled type ${elt.type()}'
	}
	def produceFor(Family elt) {
	    isTupleForFamily = true;
		produceForTuples(elt.input, false, formulateString(elt.name), 4, tupleProducer);
		produceForTuples(elt.output, true, formulateString(elt.name), 4, tupleProducer);
        isTupleForFamily = false;
	}
	
	def produceFor(DataSource elt) {
		produceForTuples(elt.input, true, formulateString(elt.name), 4, tupleProducer);
	}
	def produceFor(DataSink elt) {
		produceForTuples(elt.output, false, formulateString(elt.name), 4, tupleProducer);
	}
	
    def main(Configuration config, FileArtifact target, DecisionVariable elt, String pkg) {
    	'package $pkg.imp;'
    	''
    	'import java.io.IOException;'
    	'import java.io.InputStream;'
		'import java.io.OutputStream;'
    	'import javax.annotation.Generated;'
    	'import com.esotericsoftware.kryo.io.Output;'
    	'import com.esotericsoftware.kryo.io.Input;'
    	'import com.esotericsoftware.kryo.Serializer;'
    	'import com.esotericsoftware.kryo.Kryo;'
    	'import eu.qualimaster.dataManagement.serialization.ISerializer;'
    	'import eu.qualimaster.dataManagement.serialization.SerializerRegistry;'
    	'import eu.qualimaster.dataManagement.serialization.IDataInput;'
    	'import eu.qualimaster.dataManagement.serialization.IDataOutput;'
    	'import $pkg.imp.${formulateString(eltName(elt))};'
    	'import $pkg.inf.*;'
    	''
    	'import eu.qualimaster.protos.${formulateString(eltName(elt))}Protos.*;'
   		String comment;
   		if(elt.type() == "Family") {
   			comment = "the algorithm family \"I${formulateString(eltName(elt))}\"";
   		} else {
   			comment = "the data element \"${formulateString(eltName(elt))}\"";
   		}
    	'/**'
    	' * The implementation of the serializers for $comment (GEN).'
    	' */'
    	'@Generated(value="EASy-Producer")'
    	'public class ${formulateString(eltName(elt))}Serializers {'
    	''
    	produceFor(elt);
        ' ' 
        '}'
    }
    
}