import commonVTLMethods0;
@advice(javaExperiments)
template familyImplementationJava0(Configuration config, FileArtifact target, Family family) {   
	String fName = family.name.firstToUpperCase();
	mapOf(String) specificTypes = {};
	 
    def tupleProducer(Tuple t, String fName, String typeName, String type, Boolean output, Integer indent) {
	    '/**' | indent;
        '* Provides a default implementation of the data ${typeName} for the {@link ${type}} algorithm.' | indent + 1;
        '* Actual execution system code may also directly wrap the respective tuple concept.' | indent + 1; 
	    '*/' | indent + 1;
	    String parents = "implements I${type}";
	    if (genMultiOutputs and output) {
	    	parents = "extends eu.qualimaster.base.algorithm.AbstractOutputItem<I${type}> $parents";
	    }
	    'public static class $type $parents {' | indent;    	
	    ''	
	    if (genMultiOutputs and output) {
	        '/**' | indent + 4;
            '* Creates the item.' | indent + 5;
            '*/' | indent + 5;
            'public ${type}() {' | indent + 4;
            'this(true);' | indent + 8;
            '}' | indent + 4;
            ''
            '/**' | indent + 4;
            '* Creates a sub-item.' | indent + 5;
            '*' | indent + 5;
            '* @param topLevel whether it is a top-level item' | indent + 5;
            '*/' | indent + 5;
            'private ${type}(boolean topLevel) {' | indent + 4;
            'super(topLevel);' | indent + 8;
            'setParent(this);' | indent + 8;
            '}' | indent + 4;
            ''
            '@Override' | indent + 4;
            'public ${type} createItem() {' | indent + 4;
                'return new ${type}(false);' | indent + 8;
            '}' | indent + 4;
            
            '@Override' | indent + 4;
            'public void setTaskId(int taskId) {' | indent + 4;
            	'this.taskId = taskId;' | indent + 8;
            '}' | indent + 4;
            
            '@Override' | indent + 4;
            'public int getTaskId() {' | indent + 4;
            	'return taskId;' | indent + 8;
            '}' | indent + 4;
            'private transient int taskId;' | indent + 4;
	    }   
        produceFieldDeclarations(t, indent, specificTypes);
        ''
        produceFieldAccessors(t, false, indent, {});
		String fserializer = fName.substring(1, fName.length()) + "Serializers";
		registerSerializer(fserializer, type, specificTypes, indent);
    	'}' | indent;
    	''	   	       	
    }    
		
    def main(Configuration config, FileArtifact target, Family family) {
    	'package eu.qualimaster.families.imp;'
    	''
    	'import eu.qualimaster.families.inf.*;'
    	'import eu.qualimaster.observables.IObservable;'
    	'import eu.qualimaster.dataManagement.serialization.SerializerRegistry;'
    	''
    	String ifName = "I" + fName;
    	'/**'
    	' * The implementation for the algorithm family "${ifName}" (GEN).'
    	' */'
    	'public class $fName implements $ifName {'
    	''
    	produceForTuples(family.input, false, ifName, 4, tupleProducer);
    	produceForTuples(family.output, true, ifName, 4, tupleProducer);
    	
        produceForCalculate(family, false); 
        produceParameterMethods(family.parameters, false);
		'    @Override'
		'    public void switchState(State arg0) {'					
		'    }'
		''
		'    @Override'
		'    public Double getMeasurement(IObservable arg0) {'
		'	    return null;'
		'    }'
        '}'
    }
    
}