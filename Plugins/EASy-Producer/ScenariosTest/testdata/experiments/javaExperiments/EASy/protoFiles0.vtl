import commonVTLMethods0;
@advice(javaExperiments)
template protoFiles0(Configuration config, FileArtifact target, DecisionVariable elt, String pkg) {

    Integer count = 0;

    def tupleProducer(Tuple t, String fName, String typeName, String type, Boolean output, Integer indent) {
        Boolean flag1 = true;
        Boolean flag2 = false;
        for (Field f : t.fields) {
            FieldType ftype = f.type;
            String fname = toIdentifier(f.name);
            String ptype = basicTypeForProto(ftype);
            if (ptype != "") {
                if (flag1) {
                    flag1 = false;
                    flag2 = true;
                    'message S$type {' | indent; //only generate once for one tuple
                }
                count = count + 1;                          
                "required $ptype $fname = $count;" | indent+4;
            }   
        }
        if(flag2) {
            '}' | indent;
        }
        ''
    }
 
    def produceForTuples(sequenceOf(Tuple) tuples, Boolean output, String fName, Integer indent) {
        count = 0;
        produceForTuples(tuples, output, fName, indent, tupleProducer);
    }
    
    def produceFor(DecisionVariable elt) {
        '//unhandled type ${elt.type()}'
    }
    def produceFor(Family elt) {
        produceForTuples(elt.input, false, "I"+formulateString(elt.name), 0);
        produceForTuples(elt.output, true, "I"+formulateString(elt.name), 0);
    }
    
    def produceFor(DataSource elt) {
        produceForTuples(elt.input, true, formulateString(elt.name), 0);
    }
    def produceFor(DataSink elt) {
        produceForTuples(elt.output, false, formulateString(elt.name), 0);
    }
    
    def main(Configuration config, FileArtifact target, DecisionVariable elt, String pkg) {     
        'package $pkg.protobuf;'

        'option java_package = "eu.qualimaster.protos";'
        'option java_outer_classname = "${formulateString(eltName(elt))}Protos";'
        ''
        produceFor(elt);
    }
    
}