@advice(xmlExperiments)
template settingsXml3(Configuration config, XmlFileArtifact target, setOf(Sink) sinks, setOf(Parameter) permissibleParameters, mapOf(String, setOf(DecisionVariable)) lastElementMap, String topoName) {
    
    def main(Configuration config, XmlFileArtifact target, setOf(Sink) sinks, setOf(Parameter) permissibleParameters, mapOf(String, setOf(DecisionVariable)) lastElementMap, String topoName) {
        target.setOmitXmlDeclaration(true);
        XmlElement root = target.createRootElement("pipeline");
          new XmlElement(root, "name", topoName);
          //append external settings
          appendExternalSettings(root);
          //append commands
          XmlElement cmds = new XmlElement(root, "commands"); 
          //append common commands
          appendCommonCommands(cmds);
          //append permissible parameter commands
          appendPermissibleParameterCommands(permissibleParameters, cmds);
        /*
        //append sinks 
        XmlElement snks = new XmlElement(root, "sinks");
        //append general sinks
        appendGeneralSinks(sinks, snks);
        //append replay sinks
        appendReplaySinks(sinks, snks);
        if (permissibleParameters.size() > 0) {
            XmlElement pp = new XmlElement(root, "permissibleParameters");
            appendPermissibleParameters(permissibleParameters, pp);
        }
        * 
        */
    }
    
    def appendPermissibleParameterCommands(setOf(Parameter) parameters, XmlElement parent) {
        for (Parameter p : parameters) {
            new XmlComment(parent, "This is generated based on the configuration of permissible parameters from the pipeline");
            appendCmd(parent, "change${p.name}", {"change${p.name}", "%new${firstToUpperCase(p.name)}%"}, 
                {"change${p.name}_response", "%status%", "%new${firstToUpperCase(p.name)}%"}); 
        }
    }
    
    def appendCmdFields(XmlElement parent, sequenceOf(String) names) {
        Integer seqNr = 0;
        for (String n : names) {
            XmlElement field = new XmlElement(parent, "field", n);
              new XmlAttribute(field, "sequence", "$seqNr");
            seqNr = seqNr + 1;
        }
    }
    
    def appendCmd(XmlElement parent, String name, sequenceOf(String) request, sequenceOf(String) response) {
        XmlElement cmd = new XmlElement(parent, "command");
          new XmlElement(cmd, "name", name);
          XmlElement req = new XmlElement(cmd, "request");
            appendCmdFields(req, request);
          XmlElement res = new XmlElement(cmd, "response");
            appendCmdFields(res, response);
    }
    
    def appendCommonCommands(XmlElement parent) {
        appendCmd(parent, "login", {"login", "%username%", "%password%"}, {"login_response", "%status%", "%result%"});
        appendCmd(parent, "logout", {"logout"}, {"logout_response", "%status%", "%result%"});
        appendCmd(parent, "quoteList", {"quoteList"}, {"quoteList_response", "%status%", "%result%"});
        appendCmd(parent, "requestHistoricalSentiment", {"requestHistoricalSentiment", "%startDate%", "%endDate%", 
            "%listOfIds%"}, {"historicalSentiment_response", "%status%", "%result%"});
    }
    
    def appendExternalSettings(XmlElement root) {
        XmlElement exService = new XmlElement(root, "external_service_settings");
          new XmlElement(exService, "packet_delimiter", "!"); 
          new XmlElement(exService, "main_delimiter", ",");
          new XmlElement(exService, "secondary_delimiter", "|");
          new XmlElement(exService, "line_delimiter", "\"Lf\""); 
    }
    
    /**
     * Appends the replay sinks.
     */
    def appendReplaySinks(setOf(Sink) sinks, XmlElement parent) {
        for (Sink snk : sinks->selectByType(ReplaySink)) {
            appendSinkImpl(snk, "replaySink", parent);
        }
    }
    
    /**
     * Appends the source, i.e., sink in the pipeline.
     */
    def appendGeneralSinks(setOf(Sink) sinks, XmlElement parent) {
        //produce data tuples
        for (Sink snk : sinks->selectByType(Sink)) {
            appendSinkImpl(snk, "sink", parent);
        }
    }
    
    def appendSinkImpl(Sink sink, String type, XmlElement parent) {
        XmlElement snk = new XmlElement(parent, "sink");
          new XmlAttribute(snk, "type", type);
          new XmlElement(snk, "name", "${sink.name}");
          XmlElement data = new XmlElement(snk, "data");
          String varName = sink.varName().firstToUpperCase();
          setOf(DecisionVariable) lastElt = {};
          if (lastElementMap.containsKey(varName)) {
              lastElt = lastElementMap.get(varName); //last elements linked to the current element    
          }
          obtainTupleTypes(lastElt, parent); //append only relative tuple types
    }
    
    def obtainTupleTypes(setOf(DecisionVariable) lastElt, XmlElement parent) {
        for (DecisionVariable e : lastElt) {
            Tuples tuples = obtainTupleTypes(e, parent);
            if (tuples != null and tuples.size() > 0) {
                appendDataTuples(tuples, parent); //only generate the type of tuples emitted from the last element
            }
        }
    }
    
    def Tuples obtainTupleTypes(DecisionVariable var, XmlElement parent) {
        {};
    }
    
    def Tuples obtainTupleTypes(Source src, XmlElement parent) {
        src.source.input;
    }

    def Tuples obtainTupleTypes(FamilyElement fe, XmlElement parent) {
        fe.family.output;
    }

    def Tuples obtainTupleTypes(DataManagementElement elt, XmlElement parent) {
        String dmVarName = elt.varName().firstToUpperCase();    //recursively check the last element
        setOf(DecisionVariable) lastElt = lastElementMap.get(dmVarName);
        obtainTupleTypes(lastElt, parent);
        {};
    }
    
    def appendDataTuples(Tuples tuples, XmlElement parent) {
        for (Tuple t : tuples) {
            XmlElement tup = new XmlElement(parent, "tuple");
              new XmlElement(tup, "name", t.name);
              for (Field f : t.fields) {
                XmlElement fld = new XmlElement(tup, "field");
                  new XmlElement(fld, "name", f.name);
                  new XmlElement(fld, "type", f.type.class);
              }             
        }
    }
    
    def appendPermissibleParameters(setOf(Parameter) parameters, XmlElement parent) {
        for(Parameter p : parameters) {
            XmlElement par = new XmlElement(parent, "parameter");
              new XmlElement(par, "name", p.name);
              new XmlElement(par, "value"); //consider default value?
        }
    }
    
}