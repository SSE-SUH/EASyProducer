//@advice(QM)
template commonPomMethods1(Configuration config, FileArtifact target) {
	
	def appendDependencyManagement(Text text) {
		text.append(" <dependencyManagement>
    <dependencies>\n");
        appendDependency(text, "eu.qualimaster", "InfrastructureDependencies", "0.5.0-SNAPSHOT", "pom", "import");
        appendDependency(text, "eu.qualimaster", "PipelineDependencies", "0.5.0-SNAPSHOT", "pom", "import");   
        text.append("    </dependencies>
 </dependencyManagement>\n");
	}
	
	def appendDependency(Text text, String groupId, String artifactId, String ver="", String type = "", String scope = "", Boolean qmDepExcl=false) {
        text.append("    <dependency>
            <groupId>${groupId}</groupId>
            <artifactId>${artifactId}</artifactId>\n");
        if (ver.length() > 0) {
            text.append("    <version>$ver</version>\n");
        }
        if (type.length() > 0) {
            text.append("    <type>$type</type>\n");
        }
        if (scope.length() > 0) {
            text.append("    <scope>$scope</scope>\n");
        }
        if (qmDepExcl) {
            text.append("    <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-log4j12</artifactId>
        </exclusion>
        <exclusion>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </exclusion>        
      </exclusions>");
        }
        text.append("    </dependency>\n");
    }
    
    def appendDependency(Text text, String artifact) {
        sequenceOf(String) artList = artifact.split(":");
        if(artList.size() == 3) {
            appendDependency(text, artList[0], artList[1], ver=artList[2]);
        } else if (artifact != null) { // legacy semantics
            text.append("    <dependency>\n    </dependency>");
        }
    }
   
    def appendRepositories(Text text, String repoURL="https://projects.sse.uni-hildesheim.de/qm/maven/") {
        text.append("    <repository>\n      <id>qm.eu</id>\n      <name>qm.eu</name>\n      <url>$repoURL</url>\n    </repository>\n");
    }
    
    def appendCompilerPlugin(Text text) {      
            text.append("            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>              
            </plugin>\n");
    }

    def appendInstallPlugin(Text text) {      
            text.append("            <plugin>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.3.1</version>
                <configuration>
                    <createChecksum>true</createChecksum>
                </configuration>
            </plugin>\n");  
    }

    def appendSourcePlugin(Text text) {      
            text.append("            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>\n");                  
    }
    
    def appendHeader(Text text, String artifact, String packaging="jar") {
        text.append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n");        
        text.append("  <modelVersion>4.0.0</modelVersion>\n");
        sequenceOf(String) artList = artifact.split(":");
        if (artList.size() == 3) {
            text.append("  <groupId>${artList[0]}</groupId>\n");
            text.append("  <artifactId>${artList[1]}</artifactId>\n");
            text.append("  <version>${artList[2]}</version>\n");    
        }       
        if (packaging.length() > 0) {
            text.append("  <packaging>$packaging</packaging>\n");
        }
    }
    
    def appendBuildSectionStart(Text text, String srcDir="\\${basedir}/") {
        text.append("  <build>\n");
        text.append("    <sourceDirectory>$srcDir</sourceDirectory>\n");
        text.append("    <plugins>\n");
    }
    
    def appendGoal(Text text, String goal) {
        text.append("    <goals>
                <goal>$goal</goal>
            </goals>");
    }
    
    def appendDependencySet(Text text, Boolean unpack=false, String scope="runtime") {
        text.append("   <dependencySet>
                <unpack>$unpack</unpack>
                <scope>$scope</scope>
            </dependencySet>");
    }
   
    def appendConfDescriptorRef(Text text, String ref) {
        text.append("                 <configuration>
                    <descriptorRefs>
                        <descriptorRef>$ref</descriptorRef>
                    </descriptorRefs>
                    <dependencySets>");
    }
   
}