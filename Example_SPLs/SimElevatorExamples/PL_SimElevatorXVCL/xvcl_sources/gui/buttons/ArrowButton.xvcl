<?xml version="1.0"?>
<!DOCTYPE x-frame SYSTEM "?@dtd?">
<x-frame name="ArrowButton">

package gui.buttons;

import gui.windows.MainWindow;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

import main.ElevatorSimulator;
import properties.ProgramSettings;
import simulator.model.Target;

/**
 * Klasse die die Up&amp;Down Buttons eines JSpinners liefern fuer Rufknoepfe hoch
 * runter
 * 
 */
public class ArrowButton extends JSpinner {

	/**
	 * id
	 */
	private static final long serialVersionUID = 1L; 

	private boolean isIgnored;
	private boolean hightlighted[] = new boolean[2];
	private int id;
	private int iElevatorIndex;
	private static SpinnerNumberModel snm = new SpinnerNumberModel(1, -1, 1, 2);

	/**
	 * Konstruktor mit uebergebener ID fuer stockwerke
	 */
	public ArrowButton(int id, int iElevatorIndex) {
		super(snm);
		this.setId(id);
		this.iElevatorIndex = iElevatorIndex;
		this.isIgnored = false;
		this.remove(this.getEditor());
		this.setBorder(null);
		this.setMaximumSize(new Dimension(20, 25));
		this.setBounds(200, 45, 20, 25);
	
		this.getComponent(0).addMouseListener(new ArrowButtonListener(0));
		this.getComponent(1).addMouseListener(new ArrowButtonListener(1));
	}

	/**
	 * getter der id
	 * 
	 * @return id
	 */
	public int getId() {
		return id;
	}

	/**
	 * setter der id
	 * 
	 * @param id
	 */
	public void setId(int id) {
		this.id = id;
	}

	// TODO jedem elevator mitgeben achtet auf buttonklicks am spinner

	/**
	 * @param isIgnored
	 *            the isIgnored to set
	 */
	public void setIgnored(boolean isIgnored) {
		this.isIgnored = isIgnored;
	}

	/**
	 * @return the isIgnored
	 */
	public boolean isIgnored() {
		return isIgnored;
	}

	public boolean isHighlighted(int iComponent) {
		return hightlighted[iComponent];
	}

	public void setHighlight(int iComponent, boolean bHighlight) {
		if (bHighlight) {
			if (iComponent == 0) {
				this.getComponent(iComponent).setBackground(Color.GREEN);
			} else {
				this.getComponent(iComponent).setBackground(Color.YELLOW);
			}
		} else {
			this.getComponent(iComponent).setBackground(null);
		}
		hightlighted[iComponent] = bHighlight;
	}

	
	public void updatePosition(int panelHeight) {
		<select option="floors_heights">
			<option value="{}">
			// #else
			this.setBounds(125, panelHeight
					- (id * ProgramSettings.FLOORS_HEIGHT)
					- 60, 20, 30);
		// #end
			</option>
			<otherwise>
		// #if($floors_heights != "{}")
			this.setBounds(125, panelHeight
					- (id * ProgramSettings.FLOORS_HEIGHTS[id])
					- 60, 20, 30);
			</otherwise>
		</select>
	}
	
	
	private class ArrowButtonListener extends MouseAdapter implements MouseListener {
		private int iComp;
		
		public ArrowButtonListener(int iComp) {
			this.iComp = iComp;
		}
		
		@Override
		public void mouseClicked(MouseEvent e) {
			ArrowButton self = ArrowButton.this;
			
			if (e.getButton() == MouseEvent.BUTTON1 &amp;&amp; self.isEnabled()) {

				// Fahrtwunsch hinzufuegen/stornieren
				if (self.isHighlighted(iComp)) {
					<select option="controlling_synchronized">
						<option value="true">
					// #if($controlling_synchronized)
					ElevatorSimulator.getInstance().getSuperController().deleteTarget(iElevatorIndex, id);
						</option>
						<otherwise>
					// #else
							<select option="elevators">
								<option value="1" comp-operator="&gt;">
					ElevatorSimulator.getInstance().getController(iElevatorIndex).addDeletion(id);
								</option>
								<option value="1">
					ElevatorSimulator.getInstance().getController().addDeletion(id);							
								</option>
							</select>
					// #end
						</otherwise>
					</select>
				} else {
					Target target = new Target(self.getId(), (Integer) self.getValue());
					<select option="controlling_synchronized">
						<option value="true">
					// #if($controlling_synchronized)
					ElevatorSimulator.getInstance().getSuperController().addTarget(target, iElevatorIndex, false);
						</option>
						<otherwise>
					// #else
							<select option="elevators">
								<option value="1" comp-operator="&gt;">
					ElevatorSimulator.getInstance().getController(iElevatorIndex).addFloor(target);
								</option>
								<option value="1">
					ElevatorSimulator.getInstance().getController().addFloor(target);
								</option>
							</select>
					
					// #end
						</otherwise>
					</select>
				}

				// Highlight invertieren und ggf. Highlight des anderen
				// Pfeils entfernen
				<select option="controlling_synchronized">
					<option value="true">
				// #if($controlling_synchronized)
					MainWindow.getInstance().highlightFloorButtons(id, !isHighlighted(iComp), iComp);
					MainWindow.getInstance().highlightFloorButtons(id, false, Math.abs(iComp - 1));
					</option>
					<otherwise>
				// #else
					setHighlight(iComp, !isHighlighted(iComp));
					setHighlight(Math.abs(iComp - 1), false);
				// #end
					</otherwise>
				</select>
			}

			if (e.getButton() == MouseEvent.BUTTON3 &amp;&amp; self.isEnabled()) {
			<select option="elevators">
				<option value="1" comp-operator="&gt;">
				DefaultButton untenbutton = MainWindow.getInstance().getControlPanel(iElevatorIndex).getButtons().get(
						self.getId());
				</option>
				<option value="1">		
				DefaultButton untenbutton = MainWindow.getInstance().getControlPanel().getButtons().get(
						self.getId());		
				</option>
			</select>

				if (!self.isIgnored() || !untenbutton.isIgnored()) {
					self.setIgnored(true);
					self.setEnabled(false);
					<select option="elevators">
						<option value="1" comp-operator="&gt;">
					ElevatorSimulator.getInstance().getController(iElevatorIndex).getlIgnoreList()
							.set(self.getId(), true);
						</option>
						<option value="1">
					ElevatorSimulator.getInstance().getController().getlIgnoreList()
							.set(self.getId(), true);	
						</option>
					</select>
					untenbutton.setIgnored(true);
					untenbutton.setEnabled(false);
				} else {
					self.setIgnored(false);
					self.setEnabled(true);
					untenbutton.setIgnored(false);
					untenbutton.setEnabled(true);
				}

			}
		}
		
	}
	
}



</x-frame>

