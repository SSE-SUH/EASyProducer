<?xml version="1.0"?>
<!DOCTYPE x-frame SYSTEM "?@dtd?">
<x-frame name="ScrollPanel">

package gui.views;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;

import javax.swing.JPanel;
import javax.swing.ScrollPaneConstants;
import javax.swing.Scrollable;
import javax.swing.SwingConstants;

/**
 * Eigene Klasse, die von JPanel erbt und Scrollable implementiert, 
 * damit es Scrollbar ist.
 * @see "http://java.sun.com/docs/books/tutorial/uiswing/examples/components/ScrollDemoProject/src/components/ScrollablePicture.java"
 */
public class ScrollPanel extends JPanel implements Scrollable, MouseMotionListener {
    /**
	 * Serial ID.
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * die Anzahl der Pixel, die incrementiert werden, wenn
	 * Pfeil oder Block bei der Scrollbar geklickt werden.
	 */
	private int maxUnitIncrement = 50;
	
	/**
	 * Konstruktor.
	 */
	public ScrollPanel(){
	}

	/**
	 * @see "java.awt.event.MouseMotionListener"
	 * 
	 */
    //Methods required by the MouseMotionListener interface:
    public void mouseMoved(MouseEvent e) { }
    
	/**
	 * @see "java.awt.event.MouseMotionListener"
	 * 
	 */
    public void mouseDragged(MouseEvent e) {
        //The user is dragging us, so scroll!
        Rectangle r = new Rectangle(e.getX(), e.getY(), 1, 1);
        scrollRectToVisible(r);
    }
	/**
	 * @see "javax.swing.Scrollable"
	 * @return getPreferredSize()
	 */
	@Override
	public Dimension getPreferredScrollableViewportSize() {
		return getPreferredSize();
	}

	/**
	 * @see "java.swing.JComponent"
	 * @return super.getPreferredSize()
	 */
    public Dimension getPreferredSize() {
        return super.getPreferredSize();       
    }

	/**
	 * @see "javax.swing.Scrollable"
	 * @return currentPosition
	 */
    public int getScrollableUnitIncrement(Rectangle visibleRect,
                                          int orientation,
                                          int direction) {
        //Get the current position.
        int currentPosition = 0;
        if (orientation == SwingConstants.HORIZONTAL) {
			currentPosition = visibleRect.x;
        } else {
            currentPosition = visibleRect.y;
        }

        //Return the number of pixels between currentPosition
        //and the nearest tick mark in the indicated direction.
        if (direction &lt; 0) {
            int newPosition = currentPosition -
                             (currentPosition / maxUnitIncrement)
                              * maxUnitIncrement;
            return (newPosition == 0) ? maxUnitIncrement : newPosition;
        } else {
            return ((currentPosition / maxUnitIncrement) + 1)
                   * maxUnitIncrement
                   - currentPosition;
        }
    }

	/**
	 * @see "javax.swing.Scrollable"
	 * @return size
	 */
    public int getScrollableBlockIncrement(Rectangle visibleRect,
                                           int orientation,
                                           int direction) {
        if (orientation == SwingConstants.HORIZONTAL) {
            return visibleRect.width - maxUnitIncrement;
        } else {
            return visibleRect.height - maxUnitIncrement;
        }
    }

	/**
	 * @see "javax.swing.Scrollable"
	 * @return false
	 */
    public boolean getScrollableTracksViewportWidth() {
        return false;
    }

	/**
	 * @see "javax.swing.Scrollable"
	 * @return false
	 */
    public boolean getScrollableTracksViewportHeight() {
        return false;
    }

	/**
	 * Setter fuer die MaxUnitInkrement 
	 * Pfeil oder Block bei der Scrollbar geklickt werden.
	 * @param  pixels - die Anzahl der Pixel, die incrementiert werden, wenn
	 */
    public void setMaxUnitIncrement(int pixels) {
        maxUnitIncrement = pixels;
    }
    
	/**
	 * Getter fuer die MaxUnitInkrement, fuers Testen benoetigt. 
	 * 
	 * Pfeil oder Block bei der Scrollbar geklickt werden.
	 * @return maxUnitIncrementpixels - die Anzahl der Pixel, die incrementiert werden, wenn
	 */
    public int getMaxUnitIncrement() {
        return this.maxUnitIncrement;
    }
    
}

</x-frame>